[Int.negOfNat_mul_ofNat,[Eq.mpr, Eq.refl, Eq, HMul.hMul, Int.negOfNat, Int.ofNat, Int.mul_comm, of_eq_true, Eq.trans, congrFun, congrArg, Int.ofNat_mul_negOfNat, Nat.mul_comm, eq_self],[Eq, HMul.hMul, Int.negOfNat, Int.ofNat]]
[Nat.lt_ge_by_cases,[dite, LT.lt, Nat.lt_ge_by_cases.proof_1],[]]
[Nat.div_self,[Eq.mp, Eq.refl, Eq, HDiv.hDiv, Nat.succ, OfNat.ofNat, Nat.zero_div, HAdd.hAdd, Nat.zero_add],[Eq, HDiv.hDiv, OfNat.ofNat]]
[«term_×__1»,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.bracketedExplicitBinders, Lean.ParserDescr.symbol, Lean.ParserDescr.cat],[Lean.ParserDescr]]
[heq_of_eq_rec_left,[Unit.unit, Eq.symm, eq_of_heq, Eq.refl, HEq.refl, HEq, HEq.rfl],[HEq]]
[instToStringUInt16,[ToString.mk, ToString.toString, UInt16.toNat],[ToString, UInt16]]
[Mathlib.Tactic.Lint.simpComm,[Mathlib.Tactic.Lint.Linter.mk, Lean.Meta.withReducible, Bind.bind, Mathlib.Tactic.Lint.isSimpLemma, ite, Eq, Bool.true, Pure.pure, PUnit.unit, Option.none, Function.comp, Lean.MessageData.ofFormat, Std.ToFormat.format],[Mathlib.Tactic.Lint.Linter]]
[Array.instReprArray,[Repr.mk, Std.Format, ite, Eq, BEq.beq, Array.size, OfNat.ofNat, Bool.true, Std.Format.text, Std.Format.bracketFill, Std.Format.joinSep, Array.toList, HAppend.hAppend, Std.Format.line],[Repr, Array]]
[IsAddLeftCancel.noConfusionType,[],[]]
[Array.findSomeRev?,[Id.run, Array.findSomeRevM?],[Option]]
[Nat.pred_le,[Unit.unit, LE.le, Nat.pred, Nat.le.refl, Nat.le_succ, Nat.succ],[LE.le, Nat.pred]]
[Decidable.not_and_distrib,[Iff.intro, dite, Or.inr, And.intro, Or.inl, not_and_of_not_or_not],[Iff, Not, And, Or]]
[exists_false,[False],[Not, Exists, False]]
[unexpandSigma,[ite, Eq, Lean.Syntax.isOfKind, Lean.Name.mkStr, Lean.Name.anonymous, Bool.true, Lean.Syntax.matchesNull, OfNat.ofNat, cond, Bind.bind, Lean.MonadRef.mkInfoFromRefPos, Lean.MonadQuotation.getCurrMacroScope, Lean.MonadQuotation.getMainModule, Pure.pure, Lean.Syntax.node, Lean.SourceInfo.none, List.toArray, List.cons, Lean.Syntax.atom, List.nil, MonadExcept.throw, Unit.unit],[Lean.PrettyPrinter.Unexpander]]
[instAddSemigroupFin.proof_1,[Fin.eq_of_val_eq, of_eq_true, Eq.trans, congr, congrArg, Eq, Fin.val, congrFun, HAdd.hAdd, Fin.add_def, Fin.mk, HMod.hMod, Nat.mod_lt, Fin.size_positive, Nat.mod_add_mod, Nat.add_assoc, Nat.add_mod_mod, eq_self],[Eq, HAdd.hAdd]]
[ex_of_PSigma,[Exists, Exists.intro],[Exists]]
[instMonadFunctorT,[MonadFunctorT.mk, MonadFunctor.monadMap, MonadFunctorT.monadMap],[MonadFunctorT]]
[Nat.le_of_add_le_add_left,[Nat.le.intro, Eq.mp, Eq.refl, Eq, HAdd.hAdd, propext, Nat.add_left_cancel_iff, Nat.add_assoc],[LE.le]]
[String.toNat?,[ite, Eq, String.isNat, Bool.true, Option.some, String.foldl, HAdd.hAdd, HMul.hMul, OfNat.ofNat, HSub.hSub, Char.toNat, Char.ofNat, Option.none],[Option, Nat]]
[Classical.epsilon_singleton,[Classical.epsilon_spec, Exists.intro, rfl],[Eq, Classical.epsilon]]
[Char.utf8Size_pos,[Classical.em, LE.le, Char.val, UInt32.ofNatCore, OfNat.ofNat, Char.utf8Size.proof_1, Eq.mpr, congrArg, LT.lt, if_pos, of_decide_eq_true, Eq.refl, Bool.true, if_neg, Char.utf8Size.proof_3, Char.utf8Size.proof_5],[LT.lt, OfNat.ofNat, Char.utf8Size]]
[UInt64.mk_val_eq,[Eq, UInt64.mk, UInt64.val, rfl],[Eq, UInt64.mk, UInt64.val]]
[Int.natAbs_ofNat,[rfl],[Eq, Int.natAbs, Int.ofNat]]
[FloatArray.uset,[FloatArray, FloatArray.mk, Array.uset],[FloatArray]]
[Tactic.instInhabitedDeclCache,[inferInstanceAs, Inhabited, Prod, Tactic.Cache, Lean.Meta.MetaM],[Inhabited, Tactic.DeclCache]]
[System.Platform.numBits,[Subtype.val, System.Platform.getNumBits, Unit.unit],[Nat]]
[Functor.mapConst,[],[]]
[Mathlib.Prelude.Rename.lookup3,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.symbol, Lean.ParserDescr.const],[Lean.ParserDescr]]
[Array.toArrayLit_eq'.aux,[Eq, Array.toListLitAux, List.drop, Array.data, rfl],[Eq, Array.toListLitAux, List.drop, Array.data]]
[Nat.div,[WellFounded.fix, Nat.div.proof_1, dite, And, LT.lt, OfNat.ofNat, LE.le, HAdd.hAdd, HSub.hSub, Nat.sub_lt, Nat.lt_of_lt_of_le, Nat.zero],[Nat]]
[Char.utf8Size.proof_4,[of_decide_eq_true, Eq.refl, Bool.true],[LT.lt, OfNat.ofNat, UInt32.size]]
[List.card,[Unit.unit, Nat, OfNat.ofNat, ite, Mem.mem, PProd.fst, HAdd.hAdd],[Nat]]
[Nat.coprime.coprime_dvd_left,[Nat.eq_one_of_dvd_one],[Nat.coprime]]
[String.toAsciiByteArray,[String.toAsciiByteArray.loop, ByteArray.empty, OfNat.ofNat],[ByteArray]]
[Functor.map_equiv_apply,[rfl],[Eq, Equiv.toFun, Functor.map_equiv, Functor.map]]
[Subarray.mk.inj,[And.intro],[And, Eq]]
[lt_trans,[LT.lt, le_not_le_of_lt, lt_of_le_not_le, le_trans],[LT.lt]]
[le_min,[dite, LE.le, Eq.mpr, congrArg, if_pos, if_neg],[LE.le, min]]
[Nat.dvd_of_mul_dvd_mul_left,[Exists.elim, Exists.intro, Nat.eq_of_mul_eq_mul_left, Eq.mp, Eq.refl, Eq, HMul.hMul, Nat.mul_assoc],[Dvd.dvd]]
[Mathlib.Tactic.Lint.SimpLemmaInfo.rhs,[],[Lean.Expr]]
[List.init,[Unit.unit, List.cons, List, List.nil, PProd.fst],[List]]
[Nat.gcd_comm,[Nat.dvd_antisymm, Nat.dvd_gcd, Nat.gcd_dvd_right, Nat.gcd_dvd_left],[Eq, Nat.gcd]]
[UInt32.land,[UInt32.mk, Fin.land, UInt32.val],[UInt32]]
[Function.has_uncurry.noConfusionType,[],[]]
[Fin.checkedMul,[Option, Fin, Fin.overflowingMul, Option.none, Option.some],[Option, Fin]]
[imp_imp_imp,[Function.comp],[]]
[«term_=_»,[Lean.ParserDescr.trailingNode, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.symbol, Lean.ParserDescr.cat],[Lean.TrailingParserDescr]]
[Nat.sub_lt_left_of_lt_add,[],[LT.lt, HSub.hSub]]
[Function.involutive,[Eq],[]]
[congr,[rfl],[Eq]]
[Stream.noConfusionType,[],[]]
[Prod.lt_def,[rfl],[Eq, LT.lt, Or, Prod.fst, And, Prod.snd]]
[Ring.toNeg,[],[Neg]]
[BEq.beq,[],[Bool]]
[instHAdd,[HAdd.mk, Add.add],[HAdd]]
[instInhabitedUInt64.proof_1,[of_decide_eq_true, Eq.refl, Bool.true],[LT.lt, OfNat.ofNat, UInt64.size]]
[Fin.mk.inj,[],[Eq]]
[StdGen.noConfusionType,[],[]]
[Nat.succ_pos,[Nat.zero_lt_succ],[LT.lt, OfNat.ofNat, Nat.succ]]
[UInt8.div,[UInt8.mk, HDiv.hDiv, UInt8.val],[UInt8]]
[WellFoundedRelation.wf,[],[WellFounded, WellFoundedRelation.rel]]
[Semiring.one_mul,[],[Eq, HMul.hMul, OfNat.ofNat]]
[Array.filterMap,[Id.run, Array.filterMapM],[Array]]
[System.FilePath.pathExists,[Bind.bind, EIO.toBaseIO, System.FilePath.metadata, Pure.pure, Except.toBool],[BaseIO, Bool]]
[Char.toUInt8,[UInt32.toUInt8, Char.val],[UInt8]]
[mul_left_inj,[Iff.intro, mul_right_cancel, rfl],[Iff, Eq, HMul.hMul]]
[Fin.val_eq_of_lt,[of_eq_true, Eq.trans, congrFun, congrArg, Eq, Nat.mod_eq_of_lt, eq_self],[Eq, Fin.val, Fin.ofNat', zero_lt_of_lt]]
[And.comm,[Iff.intro, And.symm],[Iff, And]]
[instSemiringFin.proof_9,[Eq.mpr, Eq.refl, Eq, HMul.hMul, OfNat.ofNat, instSemiringFin.proof_4, instSemiringFin.proof_2],[Eq, HMul.hMul, OfNat.ofNat]]
[EStateM.instMonadEStateM,[Monad.mk],[Monad, EStateM]]
[String.extract,[String, ite, GE.ge, String.mk, List.nil, List.cons, List, Char, Eq, PProd.fst, HAdd.hAdd, String.csize, OfNat.ofNat],[String]]
[Int.ofNat_add_negSucc_ofNat,[rfl],[Eq, HAdd.hAdd, Int.ofNat, Int.negSucc, Int.subNatNat, Nat.succ]]
[instHashableNat,[Hashable.mk, UInt64.ofNat],[Hashable, Nat]]
[Set.«term{_|_}»,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.symbol, Mathlib.ExtendedBinder.extBinder, Lean.ParserDescr.cat],[Lean.ParserDescr]]
[Tactic.Ring.HornerExpr.const.inj,[And.intro],[And, Eq]]
[List.decidableBall,[Unit.unit, Decidable, Decidable.isTrue, List.decidableBall.proof_1, Decidable.isFalse, List.decidableBall.proof_2, PProd.fst, List.decidableBall.proof_3, List.decidableBall.proof_4],[Decidable]]
[Except.orElseLazy,[Except, Except.ok, Unit.unit],[Except]]
[instReprString,[Repr.mk, Std.Format.text, String.quote],[Repr, String]]
[Fin.checked_add_spec,[Decidable.em, LE.le, HAdd.hAdd, Fin.val, of_eq_true, Eq.trans, congrFun, congrArg, Iff, Eq, Unit.unit, Bool, Option, Fin, Prod.mk, decide_eq_true, eq_true, Option.none, Option.some, Bool.true, Bool.false, eq_false', LT.lt, false_iff, propext, not_lt, Eq.symm, congr, decide_eq_false, Not, eq_false, eq_true_of_decide, Eq.refl, Eq.mp, not_le],[Iff, Eq, Option.isSome, Fin.checkedAdd, Bool.true, LT.lt, HAdd.hAdd, Fin.val]]
[Decidable.not_and_not_right,[Iff.intro, Not.decidable_imp_symm, And.intro, False],[Iff, Not, And]]
[Mathlib.Tactic.Ext.withExtHyps,[Bind.bind, Lean.MonadEnv.getEnv, ite, Eq, Lean.isStructure, Bool.true, Pure.pure, PUnit.unit, Lean.throwError, HAppend.hAppend, Lean.ToMessageData.toMessageData],[Lean.Meta.MetaM]]
[USize.val,[],[Fin, USize.size]]
[Nat.zero_mod,[Eq.mpr, Eq.refl, Eq, HMod.hMod, OfNat.ofNat, Nat.mod_eq],[Eq, HMod.hMod, OfNat.ofNat]]
[DivInvMonoid.gpow,[],[]]
[USize.decEq,[Decidable, Eq, dite, Decidable.isTrue, USize.decEq.proof_1, Decidable.isFalse, USize.decEq.proof_2],[Decidable, Eq]]
[Quot.hrecOn.proof_1,[eq_of_heq],[Eq, Quot.sound]]
[inferInstanceAs,[],[]]
[and_congr_right',[and_congr, Iff.rfl],[Iff, And]]
[Substring.isNat,[Substring.all, Char.isDigit],[Bool]]
[Prod.foldI,[Nat.foldAux, Prod.snd, HSub.hSub, Prod.fst],[]]
[Int.negSucc_ofNat_mul_negOfNat,[Unit.unit, Eq, HMul.hMul, Int.negSucc, Int.negOfNat, Int.ofNat, Nat.succ, rfl],[Eq, HMul.hMul, Int.negSucc, Int.negOfNat, Int.ofNat, Nat.succ]]
[Char.lt,[LT.lt, Char.val],[]]
[Array.concatMap,[Array.foldl, HAppend.hAppend, Array.empty, OfNat.ofNat, Array.size],[Array]]
[Nat.gcd_dvd_right,[And.right, Nat.gcd_dvd],[Dvd.dvd, Nat.gcd]]
[Array.insertAt,[ite, GT.gt, Array.size, panicWithPosWithDecl, OfNat.ofNat, Array.insertAtAux],[Array]]
[Subtype.coind_surjective,[Exists, Eq, Subtype.coind, Exists.intro, Subtype.coe_injective],[Function.surjective, Subtype.coind]]
[Function.involutive.comp_self,[funext],[Eq, Function.comp, id]]
[Array.insertionSort.swapLoop,[Array, Eq.refl],[Array]]
[Array.find?,[Id.run, Array.findM?],[Option]]
[instDecidableEqBool.proof_2,[],[Bool.noConfusionType, False, Bool.true, Bool.false]]
[Or.symm,[Or, Or.inr, Or.inl],[Or]]
[Nat.gcd_gcd_self_right_right,[Eq.mpr, Eq.refl, Eq, Nat.gcd, Nat.gcd_comm, Nat.gcd_gcd_self_right_left, rfl],[Eq, Nat.gcd]]
[Tactic.Ring.horner_mul_horner_zero,[Eq.mpr, Eq.refl, Eq, HMul.hMul, Tactic.Ring.horner, OfNat.ofNat, Eq.symm, of_eq_true, Eq.trans, congr, congrArg, HAdd.hAdd, HPow.hPow, add_zero, add_mul, congrFun, mul_assoc, eq_self],[Eq, HMul.hMul, Tactic.Ring.horner, OfNat.ofNat]]
[Nat.pos_pow_of_pos,[Nat.pow_le_pow_of_le_right, Nat.zero_le],[LT.lt, OfNat.ofNat, HPow.hPow]]
[prioHigh,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.nonReservedSymbol, Bool.false],[Lean.ParserDescr]]
[instReprAtomUInt64,[ReprAtom.mk],[ReprAtom, UInt64]]
[HAndThen.noConfusionType,[],[]]
[Subarray.any,[Id.run, Subarray.anyM],[Bool]]
[ForIn.noConfusionType,[],[]]
[Nat.le_sub_iff_add_le,[Eq.mpr, Eq.refl, Iff, LE.le, HSub.hSub, HAdd.hAdd, Eq.symm, Nat.add_sub_cancel, propext, Nat.sub_le_sub_right_iff, Iff.rfl],[Iff, LE.le, HSub.hSub, HAdd.hAdd]]
[MonadWithReaderOf.withReader,[],[]]
[Or.by_cases,[dite, False.elim, Or.elim],[]]
[PProd.fst,[],[]]
[FloatArray.mk.sizeOf_spec,[Eq.refl, HAdd.hAdd, OfNat.ofNat, SizeOf.sizeOf],[Eq, SizeOf.sizeOf, FloatArray.mk, HAdd.hAdd, OfNat.ofNat]]
[instSubsingletonEmpty,[instSubsingletonEmpty.proof_1],[Subsingleton, Empty]]
[and_false,[propext, Iff.intro, And.right, False.elim],[Eq, And, False]]
[HAdd.hAdd,[],[]]
[instDecidableLt_2,[UInt16.decLt],[Decidable, LT.lt]]
[UInt16.instRingUInt16.proof_3,[congrArg, UInt16.mk, Ring.gsmul_succ', UInt16.val],[Eq, UInt16.mk, Ring.gsmul, Int.ofNat, Nat.succ, UInt16.val]]
[List.filterMapM,[List.reverse, List.nil, List.filterMapM.loop],[List]]
[USize.instRingUSize.proof_1,[congrArg, USize.mk, Ring.sub_eq_add_neg, USize.val],[Eq, USize.mk]]
[coeOfHeafOfTCOfTail,[CoeHTCT.mk, coeTail, coeTC, coeHead],[CoeHTCT]]
[instInhabitedArrow_1,[Inhabited.mk, Pure.pure],[Inhabited]]
[StateM,[StateT, Id],[]]
[peirce',[id],[]]
[instMulFloat,[Mul.mk, Float.mul],[Mul, Float]]
[true_and,[propext, Iff.intro, And.right, And.intro, trivial],[Eq, And, True]]
[List.append_ne_nil_of_left_ne_nil,[of_eq_true, Eq.trans, ne_eq, HAppend.hAppend, List.nil, congrArg, Not, propext, List.append_eq_nil, congrFun, And, eq_false, Eq, false_and, eq_true_of_decide, Eq.refl, Bool.true],[Ne, HAppend.hAppend, List.nil]]
[getThe,[MonadStateOf.get],[]]
[Nat.coprime.gcd_mul_right_cancel,[Eq.mpr, Eq.refl, Eq, Nat.gcd, HMul.hMul, Nat.mul_comm, Nat.coprime.gcd_mul_left_cancel, rfl],[Eq, Nat.gcd, HMul.hMul]]
[UInt16.instSemiringUInt16.proof_7,[of_eq_true, Eq.trans, forall_congr, congrFun, congrArg, Eq, HMul.hMul, UInt16.one_def, UInt16.mul_def, UInt16.mk, OfNat.ofNat, one_mul, UInt16.val, UInt16.mk_val_eq, eq_self, propext, forall_const, UInt16],[Eq, HMul.hMul, OfNat.ofNat]]
[List.getLast.proof_1,[rfl],[Eq, List.nil]]
[Except.ok.sizeOf_spec,[Eq.refl, HAdd.hAdd, OfNat.ofNat, SizeOf.sizeOf],[Eq, SizeOf.sizeOf, Except.ok, HAdd.hAdd, OfNat.ofNat]]
[instAddSemigroupFin,[AddSemigroup.mk, instAddSemigroupFin.proof_1],[AddSemigroup, Fin]]
[Id.instLawfulMonadId,[Id.instLawfulMonadId.proof_1],[LawfulMonad, Id]]
[instOrOpUInt32,[OrOp.mk, UInt32.lor],[OrOp, UInt32]]
[Nat.coprime.pow,[Nat.coprime.pow_right, Nat.coprime.pow_left],[Nat.coprime, HPow.hPow]]
[Function.left_inverse.comp,[],[Function.left_inverse, Function.comp]]
[Nat.eq_or_lt_of_le,[Or, Eq, LT.lt, Or.inl, rfl, Or.inr, Nat.succ_le_succ, Nat.zero_le, absurd, Nat.not_succ_le_zero],[Or, Eq, LT.lt]]
[ofNat_pow,[Eq.mpr, Eq.refl, Eq, Numeric.ofNat, HPow.hPow, Nat.zero, pow_zero, OfNat.ofNat, Nat.pow_zero, rfl, Nat.succ, pow_succ, HMul.hMul, Nat.pow_succ, ofNat_mul],[Eq, Numeric.ofNat, HPow.hPow]]
[instShiftRightUInt64,[ShiftRight.mk, UInt64.shiftRight],[ShiftRight, UInt64]]
[FloatSpec.mk.injEq,[Eq.propIntro, And.intro, Eq.refl, FloatSpec.mk, Eq.symm, eq_of_heq, DecidableRel, HEq.refl],[Eq, FloatSpec.mk, And, HEq]]
[instHSub,[HSub.mk, Sub.sub],[HSub]]
[One.one,[],[]]
[UInt8.toChar.proof_1,[UInt8.toChar_aux, Fin.val, UInt8.val, Fin.isLt],[Nat.isValidChar, Fin.val, UInt32.val, UInt32.ofNat, UInt8.val]]
[UInt16.decEq.proof_2,[absurd],[False]]
[ExceptT.instMonadFunctorExceptT,[MonadFunctor.mk, Except],[MonadFunctor, ExceptT]]
[Decidable.not_or_iff_and_not,[Iff.intro, And, Not, False.elim, Or.inl, Or.inr, And.intro, False, Or.elim],[Iff, Not, Or, And]]
[leOfOrd,[LE.mk, Eq, Ordering.isLE, Ord.compare, Bool.true],[LE]]
[Nat.lcm_comm,[],[Eq, Nat.lcm]]
[WellFoundedRelation.mk.injEq,[Eq.propIntro, Eq.refl, WellFoundedRelation.mk, Eq.symm, eq_of_heq, HEq.refl],[Eq, WellFoundedRelation.mk]]
[List.ball_nil,[False.elim],[]]
[List.eq_nil_iff_forall_not_mem,[],[Iff, Eq, List.nil, Not, Mem.mem]]
[List.le,[Not, LT.lt],[]]
[ExceptCpsT.runCatch_throw,[rfl],[Eq, ExceptCpsT.runCatch, MonadExcept.throw, Pure.pure]]
[UInt8.instNegUInt8,[Neg.mk, UInt8.mk, Neg.neg, UInt8.val],[Neg, UInt8]]
[Ne.irrefl,[rfl],[False]]
[HEq.elim,[eq_of_heq],[]]
[List.isPrefix,[Exists, Eq, HAppend.hAppend],[]]
[Functor.map_equiv,[Equiv.mk, Functor.map, Equiv.toFun, Equiv.symm, Functor.map_equiv.proof_1, Functor.map_equiv.proof_2],[Equiv]]
[ExceptCpsT.runCatch_bind_lift,[rfl],[Eq, ExceptCpsT.runCatch, Bind.bind, ExceptCpsT.lift]]
[List.disjoint_of_disjoint_cons_right,[List.disjoint_of_subset_right, List.subset_cons],[List.disjoint]]
[Array.«term__[:_]»,[Lean.ParserDescr.trailingNode, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.const, Lean.ParserDescr.symbol, Lean.ParserDescr.cat],[Lean.TrailingParserDescr]]
[UInt64.mul,[UInt64.mk, HMul.hMul, UInt64.val],[UInt64]]
[UInt8.instSemigroupUInt8.proof_1,[congrArg, UInt8.mk, Semigroup.mul_assoc, UInt8.val],[Eq, UInt8.mk]]
[String.intercalate,[Unit.unit, String, String.intercalate.go],[String]]
[ST.mkRef,[liftM, ST.Prim.mkRef],[ST.Ref]]
[Function.uncurry_bicompr,[rfl],[Eq, Function.uncurry, Function.bicompr, Function.comp]]
[instDecidableLt_5,[LinearOrder.decidable_lt],[Decidable, LT.lt]]
[Nat.eq_zero_of_gcd_eq_zero_right,[Nat.eq_zero_of_gcd_eq_zero_left, Eq.mp, Eq.refl, Eq, Nat.gcd, OfNat.ofNat, Nat.gcd_comm],[Eq, OfNat.ofNat]]
[lt_of_le_of_ne,[lt_of_le_not_le, mt, le_antisymm],[LT.lt]]
[Eq.to_iff,[Unit.unit, Eq.symm, eq_of_heq, Eq.refl, HEq.refl, Iff, Iff.rfl],[Iff]]
[AddMonoid.add_zero,[],[Eq, HAdd.hAdd, OfNat.ofNat]]
[Array.foldrM.fold,[ite, Eq, BEq.beq, Bool.true, Pure.pure],[]]
[instMonadEST,[inferInstanceAs, Monad, EStateM],[Monad, EST]]
[termWithout_expected_type_,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.symbol, Lean.ParserDescr.cat],[Lean.ParserDescr]]
[instBEqProd,[BEq.mk, Bool, and, BEq.beq],[BEq, Prod]]
[Nat.le_or_le,[Or.imp_left, Nat.le_of_lt, Nat.lt_or_ge],[Or, LE.le]]
[UInt8.toChar_aux,[Eq.mpr, Eq.refl, Nat.isValidChar, Fin.val, UInt32.val, UInt32.ofNat, UInt32.val_eq_of_lt, Nat.lt_trans, of_decide_eq_true, Bool.true, Or.inl],[Nat.isValidChar, Fin.val, UInt32.val, UInt32.ofNat]]
[Nat.eq_zero_or_pos,[Unit.unit, Or, Eq, OfNat.ofNat, GT.gt, Or.inl, rfl, Or.inr, Nat.succ_pos],[Or, Eq, OfNat.ofNat, GT.gt]]
[List.card_insert_of_mem,[of_eq_true, Eq.trans, congrFun, congrArg, Eq, List.card, List.insert_of_mem, eq_true, eq_self],[Eq, List.card, List.insert]]
[List.bind,[List.join, List.map],[List]]
[List.erasep_map,[Unit.unit, Eq, List.erasep, List.map, Function.comp, rfl, Classical.em, of_eq_true, Eq.trans, congr, congrArg, List.map_cons, List.erasep_cons_of_pos, eq_true, Function.comp_apply, eq_self, Eq.symm, List.erasep_cons_of_neg, Not, eq_false, eq_true_of_decide, Eq.refl, Bool.true, List.cons, PProd.fst],[Eq, List.erasep, List.map, Function.comp]]
[Nat.not_le,[Iff.intro, Nat.lt_of_not_le, Nat.not_le_of_lt],[Iff, Not, LE.le, LT.lt]]
[List.«term_~_»,[Lean.ParserDescr.trailingNode, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.symbol, Lean.ParserDescr.cat],[Lean.TrailingParserDescr]]
[Fin.xor.proof_1,[LT.lt, HMod.hMod, Nat.mod_lt],[LT.lt, HMod.hMod, Nat.xor]]
[String.join,[List.foldl, HAppend.hAppend],[String]]
[Nat.ble,[Unit.unit, Bool, Bool.true, Bool.false, PProd.fst],[Bool]]
[Decidable.lt_or_eq_of_le,[dite, LE.le, Or.inr, le_antisymm, Or.inl, lt_of_le_not_le],[Or, LT.lt, Eq]]
[List.append',[List, List.cons, PProd.fst],[List]]
[dif_ctx_congr,[Eq, dite, absurd, Iff.mp, not_iff_not_of_iff, Iff.mpr],[Eq, dite]]
[Nat.zero_sub,[Unit.unit, Eq, HSub.hSub, OfNat.ofNat, rfl, congr_arg, Nat.pred, PProd.fst],[Eq, HSub.hSub, OfNat.ofNat]]
[Option.filter,[Unit.unit, Option, ite, Eq, Bool.true, Option.some, Option.none],[Option]]
[UInt8.instSemiringUInt8.proof_11,[Eq.mpr, congr, congrArg, Eq, Eq.trans, HMul.hMul, UInt8.add_def, UInt8.mul_def, UInt8.mk, HAdd.hAdd, UInt8.val, UInt8.eq_of_val_eq, Semiring.mul_add],[Eq, HMul.hMul, HAdd.hAdd]]
[Option.some.inj,[],[Eq]]
[Nat.prod_dvd_and_dvd_of_dvd_prod.proof_3,[Nat.zero_lt_succ, Eq.symm],[LT.lt, OfNat.ofNat, Nat.gcd]]
[String.isPrefixOf,[String.substrEq, OfNat.ofNat, String.bsize],[Bool]]
[instDecidableEqOption,[Unit.unit, Decidable, Eq, Decidable.isTrue, rfl, Decidable.isFalse, dite],[DecidableEq, Option]]
[pure_id_seq,[of_eq_true, Eq.trans, congrFun, congrArg, Eq, LawfulApplicative.pure_seq, id, LawfulFunctor.id_map, eq_self],[Eq, Seq.seq, Pure.pure, id]]
[type_eq_of_heq,[type_eq_of_heq.proof_1],[Eq]]
[Char.utf8Size.proof_7,[of_decide_eq_true, Eq.refl, Bool.true],[LT.lt, OfNat.ofNat, UInt32.size]]
[instToStringUInt32,[ToString.mk, ToString.toString, UInt32.toNat],[ToString, UInt32]]
[Nat.le_step,[Nat.le.step],[LE.le, Nat.succ]]
[Ring.gsmul_succ',[],[Eq, Ring.gsmul, Int.ofNat, Nat.succ, HAdd.hAdd]]
[Seq.noConfusionType,[],[]]
[instStreamSubarray.proof_1,[Nat.succ_le_of_lt],[LE.le, Nat.succ, Subarray.start, Subarray.stop]]
[forall_not_of_not_exists,[Exists.intro],[Not]]
[String.utf16PosToCodepointPosFrom,[OfNat.ofNat],[Nat]]
[not_and_self_iff,[Iff.intro, False, False.elim],[Iff, And, Not, False]]
[Nat.mul_comm,[Eq, HMul.hMul, rfl, Eq.symm, Nat.mul_zero, Nat.zero_mul, PProd.fst, Nat.succ_mul, Nat.mul_succ],[Eq, HMul.hMul]]
[Function.injective.eq_iff,[Iff.intro, congr_arg],[Iff, Eq]]
[EIO.mapTasks,[BaseIO.mapTasks, EIO.toBaseIO],[BaseIO, Task, Except]]
[ExceptT.instMonadExceptT,[Monad.mk],[Monad, ExceptT]]
[instDivUInt32,[Div.mk, UInt32.div],[Div, UInt32]]
[instDecidableEqUSize,[USize.decEq],[DecidableEq, USize]]
[and_comm,[And.comm],[Iff, And]]
[Fin.mulOverflows?,[Decidable.decide, LE.le, HMul.hMul, Fin.val],[Bool]]
[UInt32.instSemiringUInt32.proof_6,[of_eq_true, Eq.trans, forall_congr, congr, congrArg, Eq, HMul.hMul, UInt32.zero_def, UInt32.mul_def, UInt32.mk, OfNat.ofNat, MonoidWithZero.mul_zero, UInt32.val, eq_true_of_decide, Eq.refl, Bool.true, propext, forall_const, UInt32],[Eq, HMul.hMul, OfNat.ofNat]]
[ReaderT.instMonadFunctorReaderT,[MonadFunctor.mk],[MonadFunctor, ReaderT]]
[MProd.noConfusionType,[],[]]
[ne_eq,[rfl],[Eq, Ne, Not]]
[instReprSSet,[Repr.mk, Repr.addAppParen, HAppend.hAppend, reprArg, Lean.SSet.toList, Std.Format.text],[Repr, Lean.SSet]]
[Subtype.instHasEquivSubtype,[HasEquiv.mk, HasEquiv.Equiv, Subtype.val],[HasEquiv, Subtype]]
[heq_of_eq_of_heq,[HEq.trans, heq_of_eq],[HEq]]
[Array.filterMapM,[Array.foldlM, Bind.bind, Unit.unit, Array, Pure.pure, Array.push, List.toArray, List.nil],[Array]]
[StateT.tryFinally,[MonadFinally.mk, Bind.bind, MonadFinally.tryFinally', Unit.unit, Prod, Option.some, Option.none, Pure.pure, Prod.mk],[MonadFinally, StateT]]
[Char.utf8Size.proof_3,[of_decide_eq_true, Eq.refl, Bool.true],[LT.lt, OfNat.ofNat, UInt32.size]]
[instDecidableEqSum.proof_2,[absurd],[False]]
[List.mem_append_right,[Iff.mpr, List.mem_append, Or.inr],[Mem.mem, HAppend.hAppend]]
[Subarray.stop,[],[Nat]]
[UInt32.toUSize,[Nat.toUSize, UInt32.toNat],[USize]]
[instInhabitedSubstring,[Inhabited.mk, Substring.mk, OfNat.ofNat],[Inhabited, Substring]]
[Nat.gcd_dvd_gcd_mul_left,[Nat.gcd_dvd_gcd_of_dvd_left, Nat.dvd_mul_left],[Dvd.dvd, Nat.gcd, HMul.hMul]]
[List.erase_cons,[Classical.em, Eq, of_eq_true, Eq.trans, congr, congrArg, congrFun, Unit.unit, List, Iff.mp, EqIffBeqTrue, Eq.symm, List.cons, List.erase, if_pos, eq_self, NeqIffBeqFalse, Ne.symm, if_neg, Eq.refl],[Eq, List.erase, List.cons, ite]]
[UInt8.instSemiringUInt8.proof_12,[Eq.mpr, congr, congrArg, Eq, Eq.trans, congrFun, HMul.hMul, UInt8.add_def, UInt8.mul_def, UInt8.mk, HAdd.hAdd, UInt8.val, UInt8.eq_of_val_eq, Semiring.add_mul],[Eq, HMul.hMul, HAdd.hAdd]]
[Equiv.symm,[Equiv.mk, Equiv.invFun, Equiv.toFun, Equiv.rightInv, Equiv.leftInv],[Equiv]]
[Int.ofNat_mul_ofNat,[rfl],[Eq, HMul.hMul, Int.ofNat]]
[UInt64.xor,[UInt64.mk, Fin.xor, UInt64.val],[UInt64]]
[Xor.xor,[],[]]
[termMax_prec,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.symbol],[Lean.ParserDescr]]
[instToStringOption,[ToString.mk, Unit.unit, String, HAppend.hAppend, addParenHeuristic, ToString.toString],[ToString, Option]]
[List.exists_of_mem_map,[Exists, And, Mem.mem, List.nil, Eq, Eq.refl, List.eq_or_mem_of_mem_cons, Exists.intro, And.intro, List.mem_cons_self, Eq.symm, List.cons, List.mem_cons_of_mem],[Exists, And, Mem.mem, Eq]]
[le_iff_lt_or_eq,[Decidable.le_iff_lt_or_eq],[Iff, LE.le, Or, LT.lt, Eq]]
[UInt8.val_eq_of_lt,[Fin.val_eq_of_lt],[Eq, Fin.val, UInt8.val, UInt8.ofNat]]
[Array.indexOf?,[Array.indexOfAux, OfNat.ofNat],[Option, Fin, Array.size]]
[Iff.refl,[Iff.intro],[Iff]]
[of_heq_true,[of_eq_true, eq_of_heq],[]]
[Nat.gcd_le_right,[Nat.le_of_dvd, Nat.gcd_dvd_right],[LE.le, Nat.gcd]]
[Semiring.add_zero,[],[Eq, HAdd.hAdd, OfNat.ofNat]]
[Char.utf8Size.proof_6,[of_decide_eq_true, Eq.refl, Bool.true],[LT.lt, OfNat.ofNat, UInt32.size]]
[ReaderT.map,[Functor.map],[ReaderT]]
[Tactic.Ring.HornerExpr.reflConv,[Bind.bind, liftM, Lean.Meta.mkEqRefl, Tactic.Ring.HornerExpr.e, Pure.pure, Prod.mk],[Tactic.Ring.RingM, Prod, Tactic.Ring.HornerExpr, Lean.Expr]]
[Functor.map_equiv_symm_apply,[rfl],[Eq, Equiv.toFun, Equiv.symm, Functor.map_equiv, Functor.map]]
[FloatArray.instInhabitedFloatArray,[Inhabited.mk, FloatArray.empty],[Inhabited, FloatArray]]
[Int.add_left_cancel,[],[Eq]]
[Prod.map_mk,[rfl],[Eq, Prod.map, Prod.mk]]
[MonadControlT.liftWith,[],[]]
[Or.elim3,[Or.elim],[]]
[Mathlib.Tactic.Lint.isSimpLemma,[Bind.bind, liftM, Lean.Meta.getSimpLemmas, Pure.pure, Std.PersistentHashSet.contains, Lean.Meta.SimpLemmas.lemmaNames],[Lean.Meta.MetaM, Bool]]
[Fin.mod_def,[Eq, HMod.hMod, Fin.mk, Fin.val, Nat.mod_lt, Fin.size_positive, rfl],[Eq, HMod.hMod, Fin.mk, Fin.val, Nat.mod_lt, Fin.size_positive]]
[Nat.div_div_eq_div_mul,[Nat.eq_zero_or_pos, Eq.mpr, Eq.refl, Eq, HDiv.hDiv, HMul.hMul, OfNat.ofNat, Nat.mul_zero, Nat.div_zero, rfl, Eq.symm, Nat.zero_mul, Nat.zero_div, Nat.le_antisymm, Iff.mpr, Nat.le_div_iff_mul_le, Nat.mul_pos, LE.le, Nat.mul_comm, Nat.mul_assoc, Iff.mp, Nat.le_refl],[Eq, HDiv.hDiv, HMul.hMul]]
[Eq.mpr,[Eq.symm],[]]
[instToStringNat,[ToString.mk, Nat.repr],[ToString, Nat]]
[instSemiringFin.proof_7,[Fin.eq_of_val_eq, of_eq_true, Eq.trans, congr, congrArg, Eq, Fin.val, Fin.mul_def, Fin.mk, HMod.hMod, OfNat.ofNat, Nat.mod_lt, Fin.size_positive, congrFun, HMul.hMul, Nat.zero_mod, MonoidWithZero.zero_mul, Fin.zero_def, eq_true_of_decide, Eq.refl, Bool.true],[Eq, HMul.hMul, Fin.ofNat', Fin.size_positive, OfNat.ofNat]]
[not_not_of_not_imp,[mt, Not.elim],[Not]]
[instToStringByteArray,[ToString.mk, List.toString, ByteArray.toList],[ToString, ByteArray]]
[dbgSleep,[Unit.unit],[]]
[PSigma.eta,[rfl],[Eq, PSigma.mk]]
[String.singleton,[String.push],[String]]
[instCommMonoid_1.proof_4,[Semiring.npow_succ'],[Eq, Semiring.npow, Nat.succ, HMul.hMul]]
[StateT.run,[],[Prod]]
[instDecidableEqString,[String.decEq],[DecidableEq, String]]
[List.decidableBall.proof_4,[Iff.mp, List.mem_cons, Eq.symm],[]]
[Function.injective_of_subsingleton,[Subsingleton.elim],[Function.injective]]
[Function.injective.of_comp_iff',[Iff.intro, Eq, rfl, Function.injective.comp, Function.bijective.injective],[Iff, Function.injective, Function.comp]]
[List.leftpad_prefix,[Exists.intro, rfl],[List.isPrefix, List.repeat, HSub.hSub, List.length, List.leftpad]]
[CoeDep.coe,[],[]]
[Nat.add_lt_add,[Nat.lt_trans, Nat.add_lt_add_right, Nat.add_lt_add_left],[LT.lt, HAdd.hAdd]]
[Classical.propComplete,[Or, Eq, True, False, Classical.em, Or.inl, propext, Iff.intro, True.intro, Or.inr, False.elim],[Or, Eq, True, False]]
[USize.instSemiringUSize.proof_6,[of_eq_true, Eq.trans, forall_congr, congr, congrArg, Eq, HMul.hMul, USize.zero_def, USize.mul_def, USize.mk, OfNat.ofNat, MonoidWithZero.mul_zero, USize.val, eq_self, propext, forall_const, USize],[Eq, HMul.hMul, OfNat.ofNat]]
[Subtype.refl,[Setoid.refl, Subtype.val],[HasEquiv.Equiv]]
[UInt16.decEq,[Decidable, Eq, dite, Decidable.isTrue, UInt16.decEq.proof_1, Decidable.isFalse, UInt16.decEq.proof_2],[Decidable, Eq]]
[StateT.run_map,[of_eq_true, Eq.trans, congrArg, Eq, Bind.bind, Pure.pure, Prod.mk, map_eq_pure_bind, Prod.fst, Prod.snd, eq_self],[Eq, StateT.run, Functor.map, Prod.mk, Prod.fst, Prod.snd]]
[instNegFloat,[Neg.mk, Float.neg],[Neg, Float]]
[System.Platform.isWindows,[System.Platform.getIsWindows, Unit.unit],[Bool]]
[«term_∉_»,[Lean.ParserDescr.trailingNode, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.symbol, Lean.ParserDescr.cat],[Lean.TrailingParserDescr]]
[OptionT.tryCatch,[OptionT.mk, Bind.bind, Option.none, Option, Pure.pure, Option.some, Unit.unit],[OptionT]]
[plift.up_down,[Eq, plift.up, plift.down, rfl],[Eq, plift.up, plift.down]]
[«term_>>=_»,[Lean.ParserDescr.trailingNode, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.symbol, Lean.ParserDescr.cat],[Lean.TrailingParserDescr]]
[eq_min,[le_antisymm, le_min, min, min_le_left, min_le_right],[Eq, min]]
[not_iff_self,[iff_not_self, Iff.symm],[Not, Iff]]
[Tactic.Ring.State.noConfusionType,[],[]]
[StdGen.mk.sizeOf_spec,[Eq.refl, HAdd.hAdd, OfNat.ofNat, SizeOf.sizeOf],[Eq, SizeOf.sizeOf, StdGen.mk, HAdd.hAdd, OfNat.ofNat]]
[List.inj_on_of_subset,[],[List.inj_on]]
[Nat.lcm_zero_left,[],[Eq, Nat.lcm, OfNat.ofNat]]
[Mathlib.ExtendedBinder.extBinderCollection,[Lean.ParserDescr.nodeWithAntiquot, Lean.Name.mkStr, Lean.Name.anonymous, Lean.ParserDescr.unary, Mathlib.ExtendedBinder.extBinderParenthesized],[Lean.ParserDescr]]
[USize.decLt,[Decidable, LT.lt, inferInstanceAs],[Decidable, LT.lt]]
[Nat.iterate,[PProd.fst],[]]
[Sum.inr.inj,[],[Eq]]
[UInt64.decLt,[Decidable, LT.lt, inferInstanceAs],[Decidable, LT.lt]]
[UInt16.instSemiringUInt16.proof_2,[of_eq_true, Eq.trans, forall_congr, congrFun, congrArg, Eq, HAdd.hAdd, UInt16.zero_def, UInt16.add_def, UInt16.mk, OfNat.ofNat, zero_add, UInt16.val, UInt16.mk_val_eq, eq_self, propext, forall_const, UInt16],[Eq, HAdd.hAdd, OfNat.ofNat]]
[Subtype.ext_val,[Subtype.ext],[Eq]]
[Nat.le_of_le_of_sub_le_sub_right,[Nat.zero_le, Eq.symm, LE.le, Nat.succ, Nat.zero, Nat.not_succ_le_zero, Eq.refl, Nat.succ_le_succ, Nat.le_of_succ_le_succ, Eq.mp, congr, congrArg, Nat.succ_sub_succ],[LE.le]]
[«tacticBy_cases__:_»,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.nonReservedSymbol, Bool.false, Lean.ParserDescr.const, Lean.ParserDescr.symbol, Lean.ParserDescr.cat],[Lean.ParserDescr]]
[Nat.gcd_dvd_left,[And.left, Nat.gcd_dvd],[Dvd.dvd, Nat.gcd]]
[Semiring.toAddCommSemigroup,[],[AddCommSemigroup]]
[Option.any,[Unit.unit, Bool, Bool.false],[Bool]]
[Mathlib.Eval.evalTerm,[Bind.bind, Lean.Elab.Term.elabTermEnsuringType, Option.some, Bool.true, Option.none, Lean.Elab.Term.synthesizeSyntheticMVarsNoPostponing, Bool.false, liftM, Lean.Meta.instantiateMVars, Lean.Meta.getMVars, Lean.Elab.Term.logUnassignedUsingErrorInfos, ite, Eq, Lean.Elab.throwAbortTerm, Pure.pure, PUnit.unit],[Lean.Elab.Term.TermElabM]]
[IsAddLeftCancel.add_left_cancel,[],[Eq]]
[iff_false_right,[Iff.trans, Iff.comm, iff_false_left],[Iff, Not]]
[instReprIterator,[Repr.mk, Std.Format, Repr.addAppParen, HAppend.hAppend, Std.Format.text, reprArg],[Repr, String.Iterator]]
[Array.qsort,[Array.qsort.sort],[Array]]
[USize.instSemiringUSize.proof_7,[of_eq_true, Eq.trans, forall_congr, congrFun, congrArg, Eq, HMul.hMul, USize.one_def, USize.mul_def, USize.mk, OfNat.ofNat, one_mul, USize.val, USize.mk_val_eq, eq_self, propext, forall_const, USize],[Eq, HMul.hMul, OfNat.ofNat]]
[Id.instMonadId,[Monad.mk],[Monad, Id]]
[List.card_append_disjoint,[Eq, List.card, HAppend.hAppend, HAdd.hAdd, of_eq_true, Eq.trans, congr, congrArg, List.nil_append, congrFun, List.card_nil, Nat.zero_add, eq_self],[Eq, List.card, HAppend.hAppend, HAdd.hAdd]]
[«term{__:_//_}»,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.symbol, Lean.ParserDescr.const, Lean.ParserDescr.unary, Lean.ParserDescr.cat],[Lean.ParserDescr]]
[Nat.prod_dvd_and_dvd_of_dvd_prod,[Nat.gcd, Nat.prod_dvd_and_dvd_of_dvd_prod.proof_1, Nat.prod_dvd_and_dvd_of_dvd_prod.proof_2, Nat.prod_dvd_and_dvd_of_dvd_prod.proof_4],[Subtype, Eq, HMul.hMul, Subtype.val, Prod.fst, Prod.snd]]
[Mathlib.Tactic.Lint.isSimpEq,[Lean.Meta.withReducible, ite, Eq, Bool.true, Bind.bind, Lean.Meta.whnf, Pure.pure],[Lean.Meta.MetaM, Bool]]
[Nat.sub_add_cancel,[Eq.mpr, Eq.refl, Eq, HAdd.hAdd, HSub.hSub, Nat.add_comm, Nat.add_sub_of_le, rfl],[Eq, HAdd.hAdd, HSub.hSub]]
[Nat.mul_le_mul,[Nat.le_trans, Nat.mul_le_mul_right, Nat.mul_le_mul_left],[LE.le, HMul.hMul]]
[List.not_bex_nil,[False],[Not, Exists, And, Mem.mem, List.nil]]
[HEq.rfl.proof_1,[HEq.refl],[HEq]]
[left_neg_eq_right_neg,[Eq.mpr, Eq.refl, Eq, Eq.symm, zero_add, HAdd.hAdd, OfNat.ofNat, add_assoc, add_zero, rfl],[Eq]]
[Nat.mul_mod_mul_right,[Eq.mpr, Eq.refl, Eq, HMod.hMod, HMul.hMul, Nat.mul_comm, Nat.mul_mod_mul_left],[Eq, HMod.hMod, HMul.hMul]]
[Function.injective_of_partial_inv,[Option.some.inj, Eq.trans, Eq.symm, Iff.mpr, rfl],[Function.injective]]
[tacticTransitivity__,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.nonReservedSymbol, Bool.false, Lean.ParserDescr.unary, Lean.ParserDescr.const, Lean.ParserDescr.cat],[Lean.ParserDescr]]
[Array.toArrayLit,[List.toArray, Array.toListLitAux, Array.toArrayLit.proof_1, List.nil],[Array]]
[OptionT.orElse,[OptionT.mk, Bind.bind, Option.none, Option, Pure.pure, Option.some, Unit.unit],[OptionT]]
[instDecidableXor.proof_1,[False],[False]]
[List.forall_mem_of_forall_mem_cons,[And.right, Iff.mp, List.forall_mem_cons],[]]
[instOfNatNat,[OfNat.mk],[OfNat, Nat]]
[instShiftLeftUInt16,[ShiftLeft.mk, UInt16.shiftLeft],[ShiftLeft, UInt16]]
[floatDecLt,[Float.decLt],[Decidable, LT.lt]]
[UInt64.sub,[UInt64.mk, HSub.hSub, UInt64.val],[UInt64]]
[forall_and_distrib,[Iff.intro, And.intro, And.left, And.right, And],[Iff, And]]
[Nat.mul_pred_left,[Eq, HMul.hMul, Nat.pred, HSub.hSub, of_eq_true, Eq.trans, congr, congrArg, congrFun, Nat.pred_zero, Nat.zero_mul, Nat.zero_sub, eq_true_of_decide, Eq.refl, Bool.true, Eq.mpr, HAdd.hAdd, OfNat.ofNat, Nat.pred_succ, Nat.succ_mul, Nat.add_sub_cancel, rfl],[Eq, HMul.hMul, Nat.pred, HSub.hSub]]
[Int.neg_inj,[Eq.mpr, Eq.refl, Eq, Eq.symm, Int.neg_neg, Neg.neg, rfl],[Eq]]
[Nat.succ_mul,[rfl, Eq.mpr, Eq.refl, Eq, HMul.hMul, Nat.succ, HAdd.hAdd, Nat.mul_succ, Nat.add_succ, Nat.add_right_comm],[Eq, HMul.hMul, Nat.succ, HAdd.hAdd]]
[optParam_eq,[rfl],[Eq, optParam]]
[Tactic.Ring.evalAtom,[Bind.bind, Tactic.Ring.addAtom, MonadReader.read, liftM, Lean.Meta.mkAppOptM, Lean.Name.mkStr, Lean.Name.anonymous, List.toArray, List.cons, Option.some, Tactic.Ring.Cache.α, Lean.mkRawNatLit, OfNat.ofNat, Option.none, List.nil, Pure.pure, Tactic.Ring.HornerExpr.const, Tactic.Ring.HornerExpr.xadd', Prod.mk, Tactic.Ring.mkAppCS],[Tactic.Ring.RingM, Prod, Tactic.Ring.HornerExpr, Lean.Expr]]
[PNonScalar.mk.sizeOf_spec,[Eq.refl, HAdd.hAdd, OfNat.ofNat, SizeOf.sizeOf],[Eq, SizeOf.sizeOf, PNonScalar.mk, HAdd.hAdd, OfNat.ofNat]]
[not_not_intro,[],[Not]]
[List.decidablePairwise.proof_1,[Eq.refl],[Eq]]
[ReaderT.instMonadLiftReaderT,[MonadLift.mk],[MonadLift, ReaderT]]
[UInt8.decEq,[Decidable, Eq, dite, Decidable.isTrue, UInt8.decEq.proof_1, Decidable.isFalse, UInt8.decEq.proof_2],[Decidable, Eq]]
[Nat.gcd_div,[Eq, Nat.gcd, HDiv.hDiv, Nat.eq_zero_or_pos, Eq.mpr, Eq.refl, OfNat.ofNat, Nat.div_zero, Nat.gcd_zero_right, rfl, Nat.eq_of_mul_eq_mul_right, HMul.hMul, Nat.div_mul_cancel, Nat.dvd_gcd, Eq.symm, Nat.gcd_mul_right],[Eq, Nat.gcd, HDiv.hDiv]]
[List.getLast?,[Unit.unit, Option, Option.none, Option.some, List.getLast, List.cons, List.getLast?.proof_1],[Option]]
[«term_&&&_»,[Lean.ParserDescr.trailingNode, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.symbol, Lean.ParserDescr.cat],[Lean.TrailingParserDescr]]
[List.not_mem_cons_of_ne_of_not_mem,[absurd, List.eq_or_mem_of_mem_cons, Iff.mpr, not_or, Eq, Mem.mem, And.intro],[Not, Mem.mem, List.cons]]
[instSemiringFin.proof_3,[Fin.eq_of_val_eq, Eq.mpr, congr, congrArg, Eq, Fin.val, Eq.trans, HMul.hMul, Fin.add_def, Fin.mul_def, Fin.mk, HMod.hMod, HAdd.hAdd, Nat.mod_lt, Fin.size_positive, Nat.add_mod_mod, Nat.mod_add_mod, Eq.refl, Eq.symm, Eq.mp, Nat.mul_mod, Nat.mod_eq_of_lt, Fin.isLt, Semiring.mul_add, rfl],[Eq, HMul.hMul, HAdd.hAdd]]
[String.revPosOf,[ite, Eq, BEq.beq, String.bsize, OfNat.ofNat, Bool.true, Option.none, String.revPosOfAux, String.prev],[Option, String.Pos]]
[Char.instLTChar,[LT.mk, Char.lt],[LT, Char]]
[Nat.add_sub_cancel_left,[],[Eq, HSub.hSub, HAdd.hAdd]]
[EStateM,[EStateM.Result],[]]
[Int.gcd,[Nat.gcd, Int.natAbs],[Nat]]
[Nat.decLt,[Nat.decLe, Nat.succ],[Decidable, LT.lt]]
[Monad.toBind,[],[Bind]]
[FloatArray.instForInFloatArrayFloat,[ForIn.mk, FloatArray.forIn],[ForIn, FloatArray, Float]]
[ExistsUnique.exists,[Exists, Exists.intro],[Exists]]
[Ne.elim,[],[False]]
[instToStringSigma,[ToString.mk, String, HAppend.hAppend, ToString.toString],[ToString, Sigma]]
[Bind.noConfusionType,[],[]]
[Function.comp_update,[funext, Function.apply_update],[Eq, Function.comp, Function.update]]
[Nat.div_eq_of_eq_mul_left,[Eq.mpr, Eq.refl, Eq, HDiv.hDiv, HMul.hMul, Nat.mul_div_cancel, rfl],[Eq, HDiv.hDiv]]
[Prod.lexAccessible.proof_1,[Acc.intro, Prod.mk, Eq.symm, eq_of_heq, Eq.refl, HEq.refl],[Acc, Prod.Lex, Prod.mk]]
[Function.left_inverse.surjective,[Function.right_inverse.surjective, Function.left_inverse.right_inverse],[Function.surjective]]
[instInhabitedBool,[Inhabited.mk, Bool.false],[Inhabited, Bool]]
[UInt8.ofNatCore,[UInt8.mk, Fin.mk],[UInt8]]
[PUnit.ext,[rfl],[Eq]]
[Ring.add_left_neg,[],[Eq, HAdd.hAdd, Neg.neg, OfNat.ofNat]]
[instOrdUInt64,[Ord.mk, compareOfLessAndEq],[Ord, UInt64]]
[List.length_add_eq_lengthTRAux,[of_eq_true, Eq.trans, congrFun, congrArg, Eq, Nat.zero_add, eq_self, Eq.mpr, congr, Nat.succ_add, List.length, Eq.symm, Nat.succ, rfl],[Eq, HAdd.hAdd, List.length, List.lengthTRAux]]
[«term_!=_»,[Lean.ParserDescr.trailingNode, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.symbol, Lean.ParserDescr.cat],[Lean.TrailingParserDescr]]
[UInt16.val_eq_of_lt,[Fin.val_eq_of_lt],[Eq, Fin.val, UInt16.val, UInt16.ofNat]]
[ByteSlice.mk.injEq,[Eq.propIntro, And.intro, Eq.refl, ByteSlice.mk, Eq.symm, eq_of_heq, HEq.refl],[Eq, ByteSlice.mk, And]]
[WellFounded.fix',[WellFounded.fix],[]]
[List.append,[List, List.cons, PProd.fst],[List]]
[Nat.dvd_sub,[Iff.mpr, Nat.dvd_add_iff_left, Eq.mpr, Eq.refl, Dvd.dvd, HAdd.hAdd, HSub.hSub, Nat.sub_add_cancel],[Dvd.dvd, HSub.hSub]]
[Exists.elim,[],[]]
[List.reduceOption,[List.filterMap, id],[List]]
[List.remove,[Unit.unit, List, List.nil, ite, Eq, PProd.fst, List.cons],[List]]
[DoResultSBC.noConfusionType,[],[]]
[Quot.recOnSubsingleton.proof_1,[Subsingleton.elim, Quot.sound],[Eq, Quot.sound]]
[Prod.swap_injective,[Function.left_inverse.injective, Prod.swap_left_inverse],[Function.injective, Prod.swap]]
[Prod.mk.eta,[Eq, Prod.mk, Prod.fst, Prod.snd, rfl],[Eq, Prod.mk, Prod.fst, Prod.snd]]
[ne_self_iff_false,[not_iff_false_intro, rfl],[Iff, Ne, False]]
[USize.zero_def,[rfl],[Eq, OfNat.ofNat, USize.mk]]
[Int.subNatNat_elim,[],[Int.subNatNat]]
[Nat.decEq.proof_1,[Eq.refl, Nat.beq],[Eq, Nat.beq]]
[Char.val_ne_of_ne,[absurd, Char.eq_of_val_eq],[Not, Eq, Char.val]]
[Functor.map,[],[]]
[UInt8.add,[UInt8.mk, HAdd.hAdd, UInt8.val],[UInt8]]
[StateT.run_monadLift,[rfl],[Eq, StateT.run, MonadLiftT.monadLift, Bind.bind, Pure.pure, Prod.mk]]
[MonoidWithZero.toMonoid,[],[Monoid]]
[BaseIO.mapTasks.go,[BaseIO, Task, BaseIO.bindTask, PProd.fst, List.cons, BaseIO.asTask, List.reverse],[BaseIO, Task]]
[ToStream.toStream,[],[]]
[Repr.addAppParen,[ite, GE.ge, OfNat.ofNat, Std.Format.paren],[Std.Format]]
[List.forM_cons,[rfl],[Eq, ForM.forM, List.cons, Bind.bind]]
[UInt32.ofNatCore,[UInt32.mk, Fin.mk],[UInt32]]
[UInt64.shiftRight,[UInt64.mk, HShiftRight.hShiftRight, UInt64.val, UInt64.modn, OfNat.ofNat],[UInt64]]
[Prod.exists',[Prod.exists],[Iff, Exists, Prod.fst, Prod.snd]]
[decidable_eq_of_bool_pred,[dite, Eq, Bool.true, Decidable.isTrue, Decidable.isFalse, decidable_eq_of_bool_pred.proof_1],[DecidableEq]]
[ByteSliceT.getOp,[ByteArray.get!, ByteSliceT.arr, HAdd.hAdd, ByteSliceT.off],[UInt8]]
[List.rangeAux,[List, Nat, PProd.fst, List.cons],[List, Nat]]
[UInt32.add,[UInt32.mk, HAdd.hAdd, UInt32.val],[UInt32]]
[Function.cantor_injective,[Function.cantor_surjective, Function.right_inverse.surjective, funext, propext, Iff.intro, rfl],[Not, Function.injective]]
[List.mem_append,[of_eq_true, Eq.trans, congr, congrArg, Iff, Mem.mem, List.nil_append, congrFun, Or, propext, List.mem_nil_iff, false_or, iff_self, List.cons_append, List.mem_cons_iff, HAppend.hAppend, Eq, or_assoc],[Iff, Mem.mem, HAppend.hAppend, Or]]
[Nat.not_succ_le_zero,[False, Eq.refl, OfNat.ofNat, HEq.refl],[False]]
[List.decidableBall.proof_2,[List.mem_cons_self],[False]]
[CoeSort.coe,[],[]]
[List.appendTR,[List.reverseAux, List.reverse],[List]]
[unsafeCast.proof_1,[lcProof],[Eq]]
[SubNegMonoid.gsmul_zero',[],[Eq, SubNegMonoid.gsmul, OfNat.ofNat]]
[Nat.coprime.eq_one_of_dvd,[Eq.mpr, Eq.refl, Eq, OfNat.ofNat, Eq.symm, Nat.coprime.gcd_eq_one, Nat.gcd, Nat.gcd_eq_left, rfl],[Eq, OfNat.ofNat]]
[UInt8.decEq.proof_1,[rfl],[Eq, UInt8.mk]]
[Mathlib.Tactic.Lint.Linter.mk.injEq,[Eq.propIntro, And.intro, Eq.refl, Mathlib.Tactic.Lint.Linter.mk, Eq.symm, eq_of_heq, HEq.refl],[Eq, Mathlib.Tactic.Lint.Linter.mk, And]]
[ExceptCpsT.runCatch_bind_throw,[rfl],[Eq, ExceptCpsT.runCatch, Bind.bind, MonadExcept.throw, Pure.pure]]
[Nat.Up.WF,[Subrelation.wf, WellFoundedRelation.rel, measure, HSub.hSub, Nat.sub_lt_sub_left, WellFoundedRelation.wf],[WellFounded, Nat.Up]]
[Nat.succ_ne_zero,[],[Ne, Nat.succ, OfNat.ofNat]]
[ST.instInhabitedRef.proof_1,[Nonempty.intro, arbitrary],[Nonempty]]
[instDecidableLe_2,[UInt16.decLe],[Decidable, LE.le]]
[panic,[panicCore],[]]
[typedExpr,[],[]]
[And.noConfusionType,[],[]]
[Function.is_partial_inv,[Iff, Eq, Option.some],[]]
[Mathlib.Tactic.Lint.getDeclsInCurrModule,[Bind.bind, Lean.MonadEnv.getEnv, Pure.pure, Array.map, Prod.fst, List.toArray, Std.PersistentHashMap.toList, Lean.SMap.map₂, Lean.Environment.constants],[Lean.Core.CoreM, Array, Lean.Name]]
[Function.injective,[Eq],[]]
[UInt64.one_def,[rfl],[Eq, OfNat.ofNat, UInt64.mk]]
[instTransEq_1,[Trans.mk, instTransEq_1.proof_1],[Trans, Eq]]
[Mem.noConfusionType,[],[]]
[Tactic.Ring.Cache.mk.inj,[And.intro],[And, Eq]]
[Decidable.noConfusionType,[],[]]
[recSubsingleton,[Subsingleton],[Subsingleton]]
[not_and',[Iff.trans, not_and, imp_not_comm],[Iff, Not, And]]
[and_self_left,[Iff.intro, And.intro, And.left, And.right],[Iff, And]]
[List.notElem,[not, List.elem],[Bool]]
[Nat.add_assoc,[Eq, HAdd.hAdd, rfl, congrArg, Nat.succ, PProd.fst],[Eq, HAdd.hAdd]]
[Nat.instTransLeArrowNatArrowNatPropLtArrowNatArrowNatPropLtArrowNatArrowNatProp.proof_1,[Nat.lt_of_le_of_lt],[LT.lt]]
[Quotient.sound,[Quotient.sound.proof_1],[Eq, Quotient.mk]]
[Nat.sub_add_eq_max,[le_total, Eq.mpr, Eq.refl, Eq, HAdd.hAdd, HSub.hSub, max, max_eq_right, Iff.mpr, Nat.sub_eq_zero_iff_le, OfNat.ofNat, Nat.zero_add, rfl, Eq.symm, max_eq_left, Nat.sub_add_cancel],[Eq, HAdd.hAdd, HSub.hSub, max]]
[if_simp_congr_prop,[if_ctx_simp_congr_prop],[Iff, ite]]
[StateCpsT.runK_bind_get,[rfl],[Eq, StateCpsT.runK, Bind.bind, MonadState.get]]
[Function.bijective,[And, Function.injective, Function.surjective],[]]
[List.mem_union_iff,[of_eq_true, Eq.trans, congr, congrArg, Iff, Mem.mem, List.nil_union, congrFun, Or, propext, List.mem_nil_iff, false_or, iff_self, List.cons_union, List.mem_insert_iff, Eq, List.mem_cons_iff, or_assoc],[Iff, Mem.mem, List.union, Or]]
[Quotient.lift,[Quot.lift],[]]
[Array.foldr,[Id.run, Array.foldrM],[]]
[ByteArray.toUInt64LE!,[ite, Eq, BEq.beq, ByteArray.size, OfNat.ofNat, Bool.true, HOr.hOr, HShiftLeft.hShiftLeft, UInt8.toUInt64, ByteArray.get!, panicWithPosWithDecl, HAppend.hAppend],[UInt64]]
[List.append_ne_nil_of_ne_nil_left,[of_eq_true, Eq.trans, implies_congr_ctx, ne_eq, List.nil, HAppend.hAppend, congrArg, Not, propext, List.append_eq_nil, congrFun, And, eq_false, Eq, false_and, eq_true_of_decide, Eq.refl, Bool.true, implies_true],[Ne, HAppend.hAppend, List.nil]]
[Int.ofNat_zero,[rfl],[Eq, Int.ofNat, OfNat.ofNat]]
[instSubsingletonDecidable.proof_1,[Subsingleton.intro, Eq, Decidable.isTrue, rfl, absurd, Decidable.isFalse],[Subsingleton, Decidable]]
[Nat.lcm_dvd,[Dvd.dvd, Nat.lcm, Nat.eq_zero_or_pos, Eq.mpr, Eq.refl, Nat.dvd_zero, Nat.dvd_of_mul_dvd_mul_left, Nat.gcd_pos_of_pos_left, Nat.pos_of_dvd_of_pos, HMul.hMul, Nat.gcd, Nat.gcd_mul_lcm, Eq.symm, Nat.gcd_mul_right, Nat.mul_comm, Nat.dvd_gcd, Nat.mul_dvd_mul_left, Nat.mul_dvd_mul_right],[Dvd.dvd, Nat.lcm]]
[Nat.Up.next,[And.intro, Nat.lt_succ_self],[Nat.Up, HAdd.hAdd, OfNat.ofNat]]
[instAddUSize,[Add.mk, USize.add],[Add, USize]]
[Function.injective2,[And, Eq],[]]
[List.hasDecidableLt.proof_3,[Eq.symm, eq_of_heq, Eq.refl, List.cons, HEq.refl, False, absurd],[False]]
[Mathlib.Tactic.Lint.getLinter,[arbitrary],[Lean.Core.CoreM, Mathlib.Tactic.Lint.NamedLinter]]
[withPtrEqDecEq.proof_1,[toBoolUsing_eq_true, Unit.unit],[Eq, toBoolUsing, Unit.unit, Bool.true]]
[and_imp,[Iff.intro, And.intro],[Iff]]
[Substring.mk.sizeOf_spec,[Eq.refl, HAdd.hAdd, OfNat.ofNat, SizeOf.sizeOf],[Eq, SizeOf.sizeOf, Substring.mk, HAdd.hAdd, OfNat.ofNat]]
[LE.noConfusionType,[],[]]
[FloatSpec.mk.inj,[And.intro],[And, Eq, HEq]]
[instReprUInt64,[Repr.mk, repr, UInt64.toNat],[Repr, UInt64]]
[FloatArray.mk.inj,[],[Eq]]
[LawfulApplicative.map_pure,[],[Eq, Functor.map, Pure.pure]]
[«term∃!_,_»,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.symbol, Lean.explicitBinders, Lean.ParserDescr.cat],[Lean.ParserDescr]]
[instLawfulMonadStateRefT'.proof_1,[inferInstanceAs, LawfulMonad, ReaderT, ST.Ref],[LawfulMonad, ReaderT, ST.Ref]]
[instLEUInt32,[LE.mk, LE.le, UInt32.val],[LE, UInt32]]
[is_dec_eq,[Eq],[]]
[Int.neg_neg,[Unit.unit, Eq, Neg.neg, rfl],[Eq, Neg.neg]]
[Substring.hasBeq,[BEq.mk, Substring.beq],[BEq, Substring]]
[String.Range.mk.injEq,[Eq.propIntro, And.intro, Eq.refl, String.Range.mk, Eq.symm, eq_of_heq, HEq.refl],[Eq, String.Range.mk, And]]
[LinearOrder.decidable_eq,[],[DecidableEq]]
[Zero.noConfusionType,[],[]]
[ExistsUnique,[Exists, And, Eq],[]]
[Tactic.Ring.HornerExpr.pp,[Lean.Meta.MetaM, Std.Format, Bind.bind, Lean.PrettyPrinter.ppExpr, Lean.Name.anonymous, List.nil, Pure.pure, HAppend.hAppend, Std.Format.text, ToString.toString, PProd.fst, PProd.snd, Prod.fst],[Lean.Meta.MetaM, Std.Format]]
[List.mem_join,[Unit.unit, Iff, Mem.mem, List.join, Exists, And, of_eq_true, Eq.trans, congr, congrArg, List.join_nil, propext, List.mem_nil_iff, funext, congrFun, false_and, eq_false, exists_false, eq_true_of_decide, Eq.refl, Bool.true, Eq.mpr, List.mem_append, Or, PProd.fst, List.cons, Iff.intro, Exists.intro, And.intro, Or.inl, rfl, Or.inr, Eq.symm, eq_of_heq, HEq.refl],[Iff, Mem.mem, List.join, Exists, And]]
[Tactic.TryThis.addSuggestion,[Lean.Elab.logInfoAt, HAppend.hAppend, Lean.ToMessageData.toMessageData],[Unit]]
[UInt64.decLe,[Decidable, LE.le, inferInstanceAs],[Decidable, LE.le]]
[Char.instDecidableLe,[UInt32.decLe, Char.val],[Decidable, LE.le]]
[UInt32.noConfusionType,[],[]]
[Subtype.coe_injective,[Subtype.ext],[Function.injective, Subtype.val]]
[Set.instInterSet,[Inter.mk, Set.inter],[Inter, Set]]
[Classical.strongIndefiniteDescription,[dite, Exists, Subtype.mk, Classical.choice, Classical.strongIndefiniteDescription.proof_2],[Subtype]]
[Nat.ctor_eq_zero,[rfl],[Eq, Nat.zero, OfNat.ofNat]]
[MonadStateOf.set,[],[PUnit]]
[Array.findM?,[Bind.bind, ForIn.forIn, MProd.mk, Option.none, PUnit.unit, ite, Eq, Bool.true, Pure.pure, ForInStep.done, Option.some, ForInStep.yield, Unit.unit, Option, MProd.fst],[Option]]
[Mathlib.ExtendedBinder.extBinderParenthesized,[Lean.ParserDescr.nodeWithAntiquot, Lean.Name.mkStr, Lean.Name.anonymous, Lean.ParserDescr.binary, Lean.ParserDescr.symbol, Mathlib.ExtendedBinder.extBinder],[Lean.ParserDescr]]
[instAddNat,[Add.mk, Nat.add],[Add, Nat]]
[instDecidableEqSum,[Decidable, Eq, dite, Decidable.isTrue, instDecidableEqSum.proof_1, Decidable.isFalse, instDecidableEqSum.proof_2, instDecidableEqSum.proof_3, instDecidableEqSum.proof_4, instDecidableEqSum.proof_5, instDecidableEqSum.proof_6],[DecidableEq, Sum]]
[Array.push,[Array.mk, List.concat, Array.data],[Array]]
[Function.injective2.left,[And.left],[Eq]]
[dif_ctx_simp_congr,[dif_ctx_congr],[Eq, dite]]
[Function.has_left_inverse.injective,[Exists.elim, Function.left_inverse.injective],[Function.injective]]
[notM,[Functor.map, not],[Bool]]
[true_implies,[propext, Iff.intro, trivial],[Eq]]
[LinearOrder.decidable_lt,[],[DecidableRel, LT.lt]]
[Eq.trans,[],[Eq]]
[Nat.gcd_one_right,[Eq.trans, Nat.gcd_comm, OfNat.ofNat, Nat.gcd_one_left],[Eq, Nat.gcd, OfNat.ofNat]]
[instHModUInt64NatUInt64,[HMod.mk, UInt64.modn],[HMod, UInt64, Nat]]
[HOrElse.noConfusionType,[],[]]
[UInt32.ofNat',[UInt32.mk, Fin.mk],[UInt32]]
[Nat.pos_of_ne_zero,[Or.resolve_left, Nat.eq_zero_or_pos],[LT.lt, OfNat.ofNat]]
[Function.comp.right_id,[rfl],[Eq, Function.comp, id]]
[instSemiringFin.proof_13,[],[]]
[instMonadFinallyStateRefT',[inferInstanceAs, MonadFinally, ReaderT, ST.Ref],[MonadFinally, StateRefT']]
[String.contains,[String.any, BEq.beq],[Bool]]
[proofIrrel,[rfl],[Eq]]
[Nat.find_x.proof_1,[And.intro],[And, Not]]
[instShiftRightUSize,[ShiftRight.mk, USize.shiftRight],[ShiftRight, USize]]
[Equiv.trans.proof_1,[Function.left_inverse.comp, Equiv.leftInv],[Function.left_inverse, Function.comp, Equiv.invFun, Equiv.toFun]]
[Equiv.noConfusionType,[],[]]
[decidable_of_bool.proof_2,[mt, Iff.mpr, Bool.ff_ne_tt],[Not]]
[instHModUInt32NatUInt32,[HMod.mk, UInt32.modn],[HMod, UInt32, Nat]]
[«term_^_»,[Lean.ParserDescr.trailingNode, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.symbol, Lean.ParserDescr.cat],[Lean.TrailingParserDescr]]
[instToStringFin,[ToString.mk, ToString.toString, Fin.val],[ToString, Fin]]
[Nat.le_of_eq,[Nat.le_refl],[LE.le]]
[Int.negSucc_ofNat_ofNat,[rfl],[Eq, HMul.hMul, Int.negSucc, Int.ofNat, Int.negOfNat, Nat.succ]]
[«term-[1+_]»,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.symbol, Lean.ParserDescr.cat],[Lean.ParserDescr]]
[Function.Equiv.isEquivalence,[Equivalence.mk, Function.Equiv.refl, Function.Equiv.symm, Function.Equiv.trans],[Equivalence, Function.Equiv]]
[List.forall_mem_map_iff,[Iff.intro, List.mem_map_of_mem, Iff.mp, List.mem_map, Eq.mpr, Eq.refl],[Iff]]
[Nat.sub_mul_div,[Nat.eq_zero_or_pos, Eq.mpr, Eq.refl, Eq, HDiv.hDiv, HSub.hSub, HMul.hMul, OfNat.ofNat, Nat.div_zero, Nat.zero_sub, rfl, Eq.symm, Nat.zero, Nat.mul_zero, Nat.sub_zero],[Eq, HDiv.hDiv, HSub.hSub, HMul.hMul]]
[Int.instMulInt,[Mul.mk, Int.mul],[Mul, Int]]
[USize.instSemiringUSize.proof_1,[of_eq_true, Eq.trans, forall_congr, congrFun, congrArg, Eq, HAdd.hAdd, USize.zero_def, USize.add_def, USize.mk, OfNat.ofNat, add_zero, USize.val, USize.mk_val_eq, eq_self, propext, forall_const, USize],[Eq, HAdd.hAdd, OfNat.ofNat]]
[instHashableUInt8,[Hashable.mk, UInt8.toUInt64],[Hashable, UInt8]]
[or_false,[propext, Iff.intro, False.elim, Or.inl],[Eq, Or, False]]
[DecidableEq,[Decidable, Eq],[]]
[instOrdUInt32,[Ord.mk, compareOfLessAndEq],[Ord, UInt32]]
[String.Iterator.toString,[String],[String]]
[List.instLEList,[LE.mk, List.le],[LE, List]]
[String.Iterator.mk.injEq,[Eq.propIntro, And.intro, Eq.refl, String.Iterator.mk, Eq.symm, eq_of_heq, HEq.refl],[Eq, String.Iterator.mk, And]]
[emptyRelation,[False],[]]
[Nat.succ_add_eq_succ_add,[of_eq_true, Eq.trans, congr, congrArg, Eq, Nat.succ_add, Nat.add_succ, eq_self, Nat.succ, HAdd.hAdd],[Eq, HAdd.hAdd, Nat.succ]]
[Function.Equiv.trans,[Eq.trans],[Function.Equiv]]
[Array.foldlMUnsafe,[ite, LT.lt, LE.le, Array.size, USize.ofNat, Pure.pure, Array.foldlMUnsafe.fold],[]]
[Pure.noConfusionType,[],[]]
[Nonempty.elim.proof_1,[],[]]
[Nat.le.brecOn,[Nat.le.below.refl, Nat.le.below.step],[]]
[Nat.lt_trichotomy,[Nat.lt_by_cases, Or.inl, Function.comp, Or.inr],[Or, LT.lt, Eq]]
[UInt16.one_def,[rfl],[Eq, OfNat.ofNat, UInt16.mk]]
[CoeTail.coe,[],[]]
[if_ctx_congr,[Eq, ite, absurd, Iff.mp, not_iff_not_of_iff, Iff.mpr],[Eq, ite]]
[ne_false_of_self,[],[Ne, False]]
[Nat.one_add,[of_eq_true, Eq.trans, congrFun, congrArg, Eq, Nat.add_comm, OfNat.ofNat, Nat.succ, eq_self, HAdd.hAdd],[Eq, HAdd.hAdd, OfNat.ofNat, Nat.succ]]
[Iff.elim,[Iff.elim.proof_1],[]]
[Quotient.inductionOn,[Quot.inductionOn],[]]
[Float.ofNat,[OfScientific.ofScientific, Bool.false, OfNat.ofNat],[Float]]
[fix3,[fixCore3, arbitrary],[]]
[Nat.sub_add_comm,[Iff.mpr, Nat.sub_eq_iff_eq_add, Nat.le_trans, Nat.le_add_right, Eq.mpr, Eq.refl, Eq, HAdd.hAdd, HSub.hSub, Nat.add_right_comm, Nat.sub_add_cancel, rfl],[Eq, HSub.hSub, HAdd.hAdd]]
[String.isEmpty,[BEq.beq, String.bsize, OfNat.ofNat],[Bool]]
[fix4,[fixCore4, arbitrary],[]]
[Set.instSdiffSet,[Sdiff.mk, Set.diff],[Sdiff, Set]]
[instOrdString,[Ord.mk, compareOfLessAndEq],[Ord, String]]
[Set.instSubsetSet,[Subset.mk, Set.subset],[Subset, Set]]
[StateCpsT.runK,[],[]]
[UInt16.instRingUInt16.proof_1,[congrArg, UInt16.mk, Ring.sub_eq_add_neg, UInt16.val],[Eq, UInt16.mk]]
[Array.mk.inj,[],[Eq]]
[Fin.val_ne_of_ne,[absurd, Fin.eq_of_val_eq],[Ne, Fin.val]]
[instHOrElse,[HOrElse.mk, OrElse.orElse],[HOrElse]]
[Mathlib.Tactic.Lint.isConditionalHyps,[Unit.unit, Lean.Meta.MetaM, Bool, Pure.pure, Bool.false, Bind.bind, Lean.Meta.getFVarLocalDecl, List.anyM, Lean.Meta.inferType, Lean.Expr.containsFVar, Lean.Expr.fvarId!, ite, Eq, and, not, Lean.BinderInfo.isInstImplicit, Lean.LocalDecl.binderInfo, Bool.true, PUnit.unit],[Lean.Meta.MetaM, Bool]]
[ExceptT.run_map,[Eq.mpr, congrArg, Eq, ExceptT.run, ExceptT.mk, Bind.bind, Except, Pure.pure, Except.ok, Except.error, map_eq_pure_bind, Except.map, bind_congr, of_eq_true, eq_self, Eq.symm, Eq.refl],[Eq, ExceptT.run, Functor.map, Except.map]]
[add_right_cancel,[IsAddRightCancel.add_right_cancel],[Eq]]
[List.subset_append_right,[List.mem_append_right],[Subset.subset, HAppend.hAppend]]
[StateCpsT.runK_modify,[rfl],[Eq, StateCpsT.runK, modify, PUnit.unit]]
[Nat.toSuperDigits,[Nat.toSuperDigitsAux, List.nil],[List, Char]]
[Int.instLTInt,[LT.mk, Int.lt],[LT, Int]]
[List.lengthTRAux,[Nat, PProd.fst, Nat.succ],[Nat]]
[USize.val_eq_of_eq,[Eq, USize.val, congrArg],[Eq, USize.val]]
[Nat.ble_eq_true_of_le,[Unit.unit, Eq.symm, eq_of_heq, Eq.refl, HEq.refl, Eq, Nat.ble, Bool.true, Nat.ble_self_eq_true, Nat.ble_succ_eq_true, PProd.fst],[Eq, Nat.ble, Bool.true]]
[FloatArray.set!,[FloatArray, FloatArray.mk, Array.set!],[FloatArray]]
[instReprAtomUInt32,[ReprAtom.mk],[ReprAtom, UInt32]]
[Mathlib.ExtendedBinder.«binderTerm>_»,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.symbol, Lean.ParserDescr.cat],[Lean.ParserDescr]]
[List.Perm.symm,[List.Perm.nil, List.Perm.cons, List.Perm.swap, List.Perm.trans],[List.Perm]]
[Nat.lt_of_succ_lt,[Nat.le_of_succ_le],[LT.lt]]
[Except.tryCatch,[Except, Except.ok],[Except]]
[Task.Priority,[Nat],[]]
[HAppend.hAppend,[],[]]
[USize.instCommRingUSize,[CommRing.mk, USize.instCommRingUSize.proof_1],[CommRing, USize]]
[instComplementUInt64,[Complement.mk, UInt64.complement],[Complement, UInt64]]
[Mathlib.Tactic.Ext.tacticExt__,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.nonReservedSymbol, Bool.false, Lean.ParserDescr.unary, Lean.ParserDescr.const, Lean.ParserDescr.cat],[Lean.ParserDescr]]
[List.mapM,[Unit.unit, List, Pure.pure, List.nil, Bind.bind, PProd.fst, List.cons],[List]]
[ExceptT.instLawfulMonadExceptT,[ExceptT.instLawfulMonadExceptT.proof_1],[LawfulMonad, ExceptT]]
[Nat.toLevel,[Lean.Level.ofNat],[Lean.Level]]
[EIO.toBaseIO,[EStateM.Result, Empty, IO.RealWorld, Except, EStateM.Result.ok, Except.ok, Except.error],[BaseIO, Except]]
[Iff.rfl,[Iff.refl],[Iff]]
[Function.has_uncurry_induction,[Function.has_uncurry.mk, Function.has_uncurry.uncurry, Prod.fst, Prod.snd],[Function.has_uncurry, Prod]]
[BaseIO.toIO,[liftM],[IO]]
[precMin,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.nonReservedSymbol, Bool.false],[Lean.ParserDescr]]
[instOrdUSize,[Ord.mk, compareOfLessAndEq],[Ord, USize]]
[Nat.superDigitChar,[ite, Eq, OfNat.ofNat, Char.ofNat],[Char]]
[inv_inv,[inv_eq_of_mul_eq_one, mul_left_inv],[Eq, Inv.inv]]
[List.lt.brecOn,[List.lt.below.nil, List.lt.below.head, List.lt.below.tail],[]]
[instSemiringFin.proof_4,[Fin.eq_of_val_eq, of_eq_true, Eq.trans, congr, congrArg, Eq, Fin.val, Fin.mul_def, congrFun, HMod.hMod, Nat.mul_comm, eq_self, HMul.hMul],[Eq, HMul.hMul]]
[Nat.gcd_mul_right_right,[Eq.mpr, Eq.refl, Eq, Nat.gcd, HMul.hMul, Nat.gcd_comm, Nat.gcd_mul_right_left, rfl],[Eq, Nat.gcd, HMul.hMul]]
[Mathlib.Tactic.Ext.«termExtType%__»,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.symbol, Lean.ParserDescr.const],[Lean.ParserDescr]]
[Option.toBool,[Unit.unit, Bool, Bool.true, Bool.false],[Bool]]
[Array.foldlM.loop,[dite, LT.lt, Unit.unit, Pure.pure, Bind.bind, Array.get, Fin.mk, Array.foldlM.loop.proof_1, PProd.fst, HAdd.hAdd, OfNat.ofNat],[]]
[Preorder.noConfusionType,[],[]]
[Nat.sub_le_sub_left,[Eq.symm, eq_of_heq, Eq.refl, HEq.refl, LE.le, HSub.hSub, Nat.le.dest, Eq.mpr, Nat.sub_sub, Nat.sub_le],[LE.le, HSub.hSub]]
[Substring.takeRight,[Substring.mk, Substring, HAdd.hAdd, Substring.prevn, Substring.bsize],[Substring]]
[UInt64.toUInt16,[Nat.toUInt16, UInt64.toNat],[UInt16]]
[instDecidableEq_1,[LinearOrder.decidable_eq],[Decidable, Eq]]
[Int.subNatNat_add_negSucc_ofNat,[],[Eq, HAdd.hAdd, Int.subNatNat, Int.negSucc, Nat.succ]]
[Classical.strongIndefiniteDescription.proof_1,[Subtype.property, Classical.indefiniteDescription],[Subtype.val, Classical.indefiniteDescription]]
[tactic_,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.nonReservedSymbol, Bool.false],[Lean.ParserDescr]]
[List.decidableBall.proof_3,[List.mem_cons_of_mem],[False]]
[instDecidableNot,[Decidable, Not, Decidable.isFalse, absurd, Decidable.isTrue],[Decidable, Not]]
[UInt64.instCommRingUInt64,[CommRing.mk, UInt64.instCommRingUInt64.proof_1],[CommRing, UInt64]]
[Nat.eq_of_mul_eq_mul_left,[Nat.le_antisymm, Nat.le_of_mul_le_mul_left, Nat.le_of_eq, Eq.symm],[Eq]]
[UInt64.instRingUInt64,[Ring.mk, UInt64.instRingUInt64.proof_1, UInt64.mk, Ring.gsmul, UInt64.val, UInt64.instRingUInt64.proof_2, UInt64.instRingUInt64.proof_3, UInt64.instRingUInt64.proof_4, UInt64.instRingUInt64.proof_5],[Ring, UInt64]]
[List.length_singleton,[rfl],[Eq, List.length, List.cons, List.nil, OfNat.ofNat]]
[List.length_reverse,[rfl, of_eq_true, Eq.trans, congr, congrArg, Eq, List.length, List.reverse_cons, List.length_append, List.reverse, List.cons, List.nil, HAdd.hAdd, List.length_cons, Nat.succ, List.length_nil, eq_self, OfNat.ofNat],[Eq, List.length, List.reverse]]
[instNegFin,[Neg.mk, Fin.mk, HMod.hMod, HSub.hSub, Fin.val, instNegFin.proof_1],[Neg, Fin]]
[String.trim,[Substring.toString, Substring.trim, String.toSubstring],[String]]
[instOfNatUInt16,[OfNat.mk, UInt16.ofNat],[OfNat, UInt16]]
[Nat.mod_eq_sub_mod,[Eq, HMod.hMod, HSub.hSub, Nat.eq_zero_or_pos, rfl, Eq.symm, Nat.sub_zero, if_pos, And.intro, Nat.mod_eq],[Eq, HMod.hMod, HSub.hSub]]
[Except.map,[Except, Except.error, Except.ok],[Except]]
[Nat.gcd_gcd_self_left_right,[Eq.mpr, Eq.refl, Eq, Nat.gcd, Nat.gcd_comm, Nat.gcd_gcd_self_right_right, rfl],[Eq, Nat.gcd]]
[Char.isValidUInt32,[LT.lt, UInt32.size, Nat.lt_trans, of_decide_eq_true, Eq.refl, Bool.true],[LT.lt, UInt32.size]]
[instRingFin.proof_5,[Eq.mpr, Eq.refl, Eq, HAdd.hAdd, Neg.neg, OfNat.ofNat, add_comm, Eq.symm, instRingFin.proof_1, Fin.eq_of_val_eq, of_eq_true, Eq.trans, congr, congrArg, Fin.val, Fin.sub_def, congrFun, HMod.hMod, Nat.add_sub_cancel', Nat.le_of_lt, Fin.isLt, Nat.mod_self, Fin.zero_def, eq_true_of_decide, Bool.true],[Eq, HAdd.hAdd, Neg.neg, OfNat.ofNat]]
[List.cons_union,[of_eq_true, eq_self, List.insert, List.foldr],[Eq, List.union, List.cons, List.insert]]
[Nat.not_coprime_of_dvd_of_dvd,[],[Not, Nat.coprime]]
[PSum.inl.sizeOf_spec,[Eq.refl, HAdd.hAdd, OfNat.ofNat, SizeOf.sizeOf],[Eq, SizeOf.sizeOf, PSum.inl, HAdd.hAdd, OfNat.ofNat]]
[Exists.imp,[exists_imp_exists],[Exists]]
[prioMid,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.nonReservedSymbol, Bool.false],[Lean.ParserDescr]]
[Iff.elim_left.proof_1,[Iff.mp],[]]
[ExceptCpsT.lift,[Bind.bind],[ExceptCpsT]]
[not_le_of_gt,[And.right, le_not_le_of_lt],[Not, LE.le]]
[Function.involutive.left_inverse,[],[Function.left_inverse]]
[LE.le,[],[]]
[WellFounded.noConfusionType,[],[]]
[not_iff,[Decidable.not_iff],[Iff, Not]]
[List.mem_of_mem_erase,[List.erase_subset],[Mem.mem]]
[Nat.dvd_add_iff_right,[Iff.intro, Nat.dvd_add, Exists.elim, Eq.symm, eq_of_heq, Eq.refl, HMul.hMul, HEq.refl, Dvd.dvd, Exists.intro, HSub.hSub, Eq.mpr, Eq, Nat.mul_sub_left_distrib, HAdd.hAdd, Nat.add_sub_cancel_left, rfl],[Iff, Dvd.dvd, HAdd.hAdd]]
[Nat.strong_rec_on,[WellFounded.fix', WellFoundedRelation.wf, Nat.lt_wfRel],[]]
[instReprAtomChar,[ReprAtom.mk],[ReprAtom, Char]]
[Int.subNatNat_of_sub_eq_succ,[],[Eq, Int.subNatNat, Int.negSucc]]
[Nat.to_digits_core_lens_eq,[of_eq_true, eq_self, HAdd.hAdd, List.length, OfNat.ofNat, Classical.em, Eq, HDiv.hDiv, Eq.trans, congr, congrArg, ite_congr, congrFun, eq_true_of_decide, Eq.refl, Bool.true, List.cons, Nat.digitChar, HMod.hMod, Nat.toDigitsCore, if_true, Eq.symm, Eq.mpr, eq_false, if_false],[Eq, List.length, Nat.toDigitsCore, List.cons, HAdd.hAdd, OfNat.ofNat]]
[List.instListDecidableLe,[inferInstanceAs, Decidable, Not, LT.lt],[Decidable, LE.le]]
[Nat.mul_div_cancel_left,[Eq.mpr, Eq.refl, Eq, HDiv.hDiv, HMul.hMul, Nat.mul_comm, Nat.mul_div_cancel, rfl],[Eq, HDiv.hDiv, HMul.hMul]]
[UInt64.instSemiringUInt64.proof_3,[congrArg, UInt64.mk, Semiring.nsmul_zero', UInt64.val],[Eq, UInt64.mk, Semiring.nsmul, OfNat.ofNat, UInt64.val]]
[instDecidableLt,[UInt32.decLt],[Decidable, LT.lt]]
[StateT.run_seqLeft,[],[Eq, StateT.run, SeqLeft.seqLeft, Bind.bind, Prod.snd, Pure.pure, Prod.mk, Prod.fst]]
[List.decidablePairwise,[Decidable, List.pairwise, List.decidablePairwise.proof_1, Decidable.isTrue, List.pairwise.nil, List.cons, PProd.fst, List.decidableBall, Decidable.isFalse, List.decidablePairwise.proof_2, List.decidablePairwise.proof_3, List.decidablePairwise.proof_4],[Decidable, List.pairwise]]
[StateT.set,[Pure.pure, Prod.mk, PUnit.unit],[StateT, PUnit]]
[DivInvMonoid.toInv,[],[Inv]]
[liftCoeM,[Bind.bind, liftM, Pure.pure, coe],[]]
[instInhabitedEIO,[inferInstanceAs, Inhabited, EStateM, IO.RealWorld],[Inhabited, EIO]]
[coeHead,[CoeHead.coe],[]]
[CoeHead.noConfusionType,[],[]]
[UInt32.instSemiringUInt32.proof_2,[of_eq_true, Eq.trans, forall_congr, congrFun, congrArg, Eq, HAdd.hAdd, UInt32.zero_def, UInt32.add_def, UInt32.mk, OfNat.ofNat, zero_add, UInt32.val, UInt32.mk_val_eq, eq_self, propext, forall_const, UInt32],[Eq, HAdd.hAdd, OfNat.ofNat]]
[StateCpsT.runK_bind_pure,[rfl],[Eq, StateCpsT.runK, Bind.bind, Pure.pure]]
[EStateM.throw,[EStateM.Result.error],[EStateM]]
[Mathlib.Tactic.Lint.SimpLemmaInfo.lhs,[],[Lean.Expr]]
[Int.negSucc_ofNat_eq,[rfl],[Eq, Int.negSucc, Neg.neg, HAdd.hAdd, Int.ofNat, OfNat.ofNat]]
[PSigma.revLex.proof_1,[WellFounded.intro, Acc, PSigma.RevLex, PSigma.revLexAccessible, WellFounded.apply],[WellFounded, PSigma.RevLex]]
[Subtype.coind_injective,[congrArg, Subtype.val],[Function.injective, Subtype.coind]]
[iff_self,[propext, Iff.intro, trivial, id],[Eq, Iff, True]]
[LawfulApplicative.noConfusionType,[],[]]
[ByteArray.getOp,[ByteArray.get!],[UInt8]]
[Subtype.val_prop,[Subtype.property],[Mem.mem, Subtype.val]]
[Char.val_eq_of_eq,[Eq.symm, eq_of_heq, Eq.refl, HEq.refl, Eq, Char.val, rfl],[Eq, Char.val]]
[Equivalence.refl,[],[]]
[instDivUInt16,[Div.mk, UInt16.div],[Div, UInt16]]
[max_lt,[Or.elim, le_or_gt, Eq.mpr, Eq.refl, LT.lt, max, max_eq_right, max_eq_left_of_lt],[LT.lt, max]]
[UInt64.land,[UInt64.mk, Fin.land, UInt64.val],[UInt64]]
[«term_\_»,[Lean.ParserDescr.trailingNode, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.symbol, Lean.ParserDescr.cat],[Lean.TrailingParserDescr]]
[Mathlib.Prelude.Rename.getRenameMap,[Lean.SimplePersistentEnvExtension.getState, Mathlib.Prelude.Rename.renameExtension],[Mathlib.Prelude.Rename.RenameMap]]
[List.length_map,[of_eq_true, Eq.trans, congr, congrArg, Eq, List.length, List.map_nil, List.length_nil, eq_true_of_decide, Eq.refl, Bool.true, List.map_cons, List.length_cons, List.map, Nat.succ, eq_self],[Eq, List.length, List.map]]
[eq_true_of_decide,[propext, Iff.intro, trivial, of_decide_eq_true],[Eq, True]]
[instLTUInt64,[LT.mk, UInt64.lt],[LT, UInt64]]
[xor_false,[funext, of_eq_true, Eq.trans, forall_congr, congr, congrArg, Eq, Or, false_and, Not, And, eq_true_of_decide, Eq.refl, Bool.true, and_true, false_or, id_eq, eq_self, propext, implies_true_iff],[Eq, xor, False, id]]
[List.inj_on,[Eq],[]]
[List.decidablePairwise.proof_4,[Eq.symm, eq_of_heq, Eq.refl, List.cons, HEq.refl, False],[False]]
[Mathlib.Tactic.Lint.nolint,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.nonReservedSymbol, Bool.false, Lean.ParserDescr.unary, Lean.ParserDescr.const],[Lean.ParserDescr]]
[UInt16.eq_of_val_eq,[Eq, congrArg, UInt16.mk],[Eq]]
[ExceptT.bind_pure_comp,[rfl],[Eq, Bind.bind, Function.comp, Pure.pure, Functor.map]]
[instToFormat,[Std.ToFormat.mk, Function.comp, Std.Format.text, ToString.toString],[Std.ToFormat]]
[SeqLeft.noConfusionType,[],[]]
[OptionT,[Option],[]]
[Fin.overflowingAdd,[Prod.mk, Decidable.decide, LE.le, HAdd.hAdd, Fin.val],[Prod, Bool, Fin]]
[decidable_of_decidable_of_iff,[dite, Decidable.isTrue, Iff.mp, Decidable.isFalse, decidable_of_decidable_of_iff.proof_1],[Decidable]]
[Mathlib.Tactic.Ext.mkAndN,[Unit.unit, List.cons, Lean.Expr, Lean.mkConst, Lean.Name.mkStr, Lean.Name.anonymous, List.nil, Lean.mkAnd, PProd.fst],[Lean.Expr]]
[UInt8.size,[OfNat.ofNat],[Nat]]
[Prod.swap_bijective,[And.intro, Prod.swap_injective, Prod.swap_surjective],[Function.bijective, Prod.swap]]
[not_exists,[exists_imp_distrib],[Iff, Not, Exists]]
[imp_congr_ctx,[Iff.trans, imp_congr_left, imp_congr_right],[Iff]]
[IsMulLeftCancel.noConfusionType,[],[]]
[«term_>>>_»,[Lean.ParserDescr.trailingNode, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.symbol, Lean.ParserDescr.cat],[Lean.TrailingParserDescr]]
[Function.«term_∘₂_»,[Lean.ParserDescr.trailingNode, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.symbol, Lean.ParserDescr.cat],[Lean.TrailingParserDescr]]
[List.toFloatArray.loop,[FloatArray, PProd.fst, FloatArray.push],[FloatArray]]
[bind_congr,[of_eq_true, Eq.trans, congrFun, congrArg, Eq, Bind.bind, funext, eq_self],[Eq, Bind.bind]]
[Equiv.invFun,[],[]]
[runST,[Unit, Unit.unit],[]]
[Function.sometimes_spec,[Eq.mpr, Eq.refl, Function.sometimes, Function.sometimes_eq],[Function.sometimes]]
[Array.forInUnsafe,[OfNat.ofNat, Array.forInUnsafe.loop],[]]
[Mathlib.Tactic.Ext.tacticApplyExtLemma,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.nonReservedSymbol, Bool.false],[Lean.ParserDescr]]
[Nat.pred_inj,[Eq, Eq.mpr, Eq.refl, HAdd.hAdd, OfNat.ofNat, rfl, absurd, Nat.lt_irrefl],[Eq]]
[noConfusionEnum,[dite, Eq, cast, noConfusionEnum.proof_1, False.elim, noConfusionEnum.proof_2],[noConfusionTypeEnum]]
[monadLift_self,[rfl],[Eq, MonadLiftT.monadLift]]
[StateT.seqLeft_eq,[StateT.ext, of_eq_true, Eq.trans, congr, congrArg, Eq, StateT.run_seqLeft, StateT.run_seq, Functor.map, Function.const, Bind.bind, StateT.run_map, map_eq_pure_bind, Prod.mk, Prod.fst, Prod.snd, StateT.run, funext, LawfulMonad.bind_assoc, Pure.pure, LawfulMonad.pure_bind, congrFun, Function.const_apply, eq_self],[Eq, SeqLeft.seqLeft, Seq.seq, Functor.map, Function.const]]
[Nat.add_le_add,[Nat.le_trans, Nat.add_le_add_right, Nat.add_le_add_left],[LE.le, HAdd.hAdd]]
[ulift.noConfusionType,[],[]]
[MonadWithReader.noConfusionType,[],[]]
[BEq.noConfusionType,[],[]]
[Array.back,[Array.get!, HSub.hSub, Array.size, OfNat.ofNat],[]]
[Nat.two_step_induction,[Unit.unit, PProd.fst, PProd.snd],[]]
[Classical.skolem,[Iff.intro, Classical.axiomOfChoice, Exists, Exists.intro],[Iff, Exists]]
[instComplementUSize,[Complement.mk, USize.complement],[Complement, USize]]
[ExceptCpsT.run_bind_lift,[rfl],[Eq, ExceptCpsT.run, Bind.bind, ExceptCpsT.lift]]
[Int.subNatNat_add,[],[Eq, Int.subNatNat, HAdd.hAdd, Int.ofNat]]
[instMonadFinallyBaseIO,[inferInstanceAs, MonadFinally, EIO, Empty],[MonadFinally, BaseIO]]
[sorry,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.nonReservedSymbol, Bool.false],[Lean.ParserDescr]]
[instDecidableEqUInt64,[UInt64.decEq],[DecidableEq, UInt64]]
[String.nextWhile,[String.bsize],[String.Pos]]
[List.or_exists_of_exists_mem_cons,[Or, Exists, And, Mem.mem, Eq.mpr, Eq.refl, Eq.symm, Or.inl, Or.inr, Exists.intro, And.intro],[Or, Exists, And, Mem.mem]]
[modify,[MonadState.modifyGet, Prod.mk, PUnit.unit],[PUnit]]
[Function.surjective.of_comp,[Exists, Eq, Exists.intro],[Function.surjective]]
[Nat.forRevM,[Nat.forRevM.loop],[Unit]]
[instReprAtomBool,[ReprAtom.mk],[ReprAtom, Bool]]
[List.get.proof_1,[Nat.le_of_succ_le_succ, List.length_cons],[LE.le, Nat.succ, List.length]]
[List.card_insert_of_not_mem,[of_eq_true, Eq.trans, congrFun, congrArg, Eq, List.card, List.insert_of_not_mem, Not, eq_false, eq_true_of_decide, Eq.refl, Bool.true, List.card_cons_of_not_mem, HAdd.hAdd, OfNat.ofNat, eq_self],[Eq, List.card, List.insert, HAdd.hAdd, OfNat.ofNat]]
[ite_not,[dite_not],[Eq, ite, Not]]
[exists_unique_congr,[exists_congr, and_congr, forall_congr', imp_congr_left],[Iff, ExistsUnique]]
[USize.modn,[USize.mk, HMod.hMod, USize.val],[USize]]
[Function.involutive.bijective,[And.intro, Function.involutive.injective, Function.involutive.surjective],[Function.bijective]]
[String.pushn,[Nat.repeat, String.push],[String]]
[trans_rel_right,[Eq.symm],[]]
[StateT.monadControl,[MonadControl.mk, Prod, Bind.bind, MonadState.get, liftM, StateT.run, StateT, MonadStateOf.set, Pure.pure],[MonadControl, StateT]]
[instInhabitedUInt64,[Inhabited.mk, UInt64.ofNatCore, OfNat.ofNat, instInhabitedUInt64.proof_1],[Inhabited, UInt64]]
[List.filterMap,[Unit.unit, List, List.nil, PProd.fst, List.cons],[List]]
[Acc.ndrecOn,[],[]]
[UInt8.instSemiringUInt8.proof_1,[of_eq_true, Eq.trans, forall_congr, congrFun, congrArg, Eq, HAdd.hAdd, UInt8.zero_def, UInt8.add_def, UInt8.mk, OfNat.ofNat, add_zero, UInt8.val, UInt8.mk_val_eq, eq_self, propext, forall_const, UInt8],[Eq, HAdd.hAdd, OfNat.ofNat]]
[Array.toSubarray.proof_1,[Nat.le_refl, Array.size],[LE.le, Array.size]]
[UInt32.instRingUInt32.proof_4,[congrArg, UInt32.mk, SubNegMonoid.gsmul_neg', UInt32.val],[Eq, UInt32.mk, Ring.gsmul, Int.negSucc, UInt32.val]]
[Prod.id_prod,[funext, Eq, Prod.mk, Prod.fst, Prod.snd, id, rfl],[Eq, Prod.mk, Prod.fst, Prod.snd, id]]
[EStateM.instReprResult,[Repr.mk, Std.Format, Repr.addAppParen, HAppend.hAppend, Std.Format.text, reprArg],[Repr, EStateM.Result]]
[Nat.right_distrib,[],[Eq, HMul.hMul, HAdd.hAdd]]
[forall_imp,[],[]]
[Classical.propDecidable,[Classical.choice, Classical.propDecidable.proof_1],[Decidable]]
[eq_max,[le_antisymm, max, le_max_left, le_max_right, max_le],[Eq, max]]
[Nat.instAndOpNat,[AndOp.mk, Nat.land],[AndOp, Nat]]
[Int.mul_negSucc_ofNat_negSucc_ofNat,[rfl],[Eq, HMul.hMul, Int.negSucc, Int.ofNat, Nat.succ]]
[StateT.run',[Functor.map, Prod.fst],[]]
[Mathlib.Tactic.Lint.NamedLinter.mk.inj,[And.intro],[And, Eq]]
[ToStream.noConfusionType,[],[]]
[instSTWorld,[STWorld.mk],[STWorld]]
[WellFounded.induction,[WellFounded.recursion],[]]
[String.foldrAux,[String.foldrAux.loop],[]]
[guardHyp,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.nonReservedSymbol, Bool.false, Lean.ParserDescr.const, Lean.ParserDescr.unary, Lean.ParserDescr.symbol, Lean.ParserDescr.cat],[Lean.ParserDescr]]
[instDecidableXor,[dite, Decidable.isFalse, instDecidableXor.proof_1, Decidable.isTrue, instDecidableXor.proof_2, instDecidableXor.proof_3, instDecidableXor.proof_4],[Decidable, xor]]
[PSigma.lex,[PSigma.lex.proof_1],[WellFounded, PSigma.Lex]]
[List.decidablePairwise.proof_3,[Iff.mpr, List.pairwise_cons, And.intro],[List.pairwise, List.cons]]
[ReaderT.read,[Pure.pure],[ReaderT]]
[Equiv.refl.proof_2,[rfl],[Eq, id]]
[ByteSliceT.size,[HSub.hSub, ByteArray.size, ByteSliceT.arr, ByteSliceT.off],[Nat]]
[iff_of_true,[Iff.intro],[Iff]]
[EStateM.instMonadStateOfEStateM,[MonadStateOf.mk, EStateM.get, EStateM.set, EStateM.modifyGet],[MonadStateOf, EStateM]]
[Option.some.injEq,[Eq.propIntro, Eq.refl, Option.some, Eq.symm, eq_of_heq, HEq.refl],[Eq, Option.some]]
[MonadReaderOf.noConfusionType,[],[]]
[ExceptT.lift_pure,[of_eq_true, Eq.trans, congrFun, congrArg, Eq, ExceptT.mk, LawfulApplicative.map_pure, Except.ok, Pure.pure, eq_self],[Eq, ExceptT.lift, Pure.pure]]
[Eq.propIntro,[propext, Iff.intro],[Eq]]
[true_eq_false_of_false,[False.elim],[Eq, True, False]]
[Char.toNat,[UInt32.toNat, Char.val],[Nat]]
[or_iff_right_of_imp,[Iff.intro, id, Or.inr],[Iff, Or]]
[Nat.min,[ite, LE.le],[Nat]]
[Prod.snd,[],[]]
[lt_irrefl,[False, le_not_le_of_lt],[Not, LT.lt]]
[List.eraseReps,[Unit.unit, List, List.nil, List.eraseRepsAux],[List]]
[NonScalar.noConfusionType,[],[]]
[List.map_subset,[Eq.mpr, Eq.trans, implies_congr, propext, List.mem_map, exists_imp_distrib, forall_congr, and_imp, Exists.intro, And.intro],[Subset.subset, List.map]]
[Nat.coprime_one_right,[Nat.gcd_one_right],[Nat.coprime, OfNat.ofNat]]
[Array.swap,[Array.set, Array.swap.proof_1],[Array]]
[SubNegMonoid.toAddMonoid,[],[AddMonoid]]
[Nat.coprime.gcd_both,[Nat.coprime.gcd_right, Nat.coprime.gcd_left],[Nat.coprime, Nat.gcd]]
[Subtype.restrict,[Subtype.val],[Subtype.val]]
[List.eraseDupsAux,[List, List.reverse, Unit.unit, List.elem, PProd.fst, List.cons],[List]]
[UInt8.isUpper,[and, Decidable.decide, GE.ge, OfNat.ofNat, LE.le],[Bool]]
[or_self_right,[Iff.intro, Or.elim, id, Or.inr, Function.comp, Or.inl],[Iff, Or]]
[Sum.inhabitedRight,[Inhabited.mk, Sum.inr, arbitrary],[Inhabited, Sum]]
[ulift.down,[],[]]
[instInhabitedForInStep,[Inhabited.mk, ForInStep.done, arbitrary],[Inhabited, ForInStep]]
[Array.instBEqArray,[BEq.mk, Array.isEqv, BEq.beq],[BEq, Array]]
[Nat.lt_succ_of_lt,[Nat.le_succ_of_le],[LT.lt, Nat.succ]]
[UInt16.instCommRingUInt16,[CommRing.mk, UInt16.instCommRingUInt16.proof_1],[CommRing, UInt16]]
[List.nodupDecidable,[List.decidablePairwise],[Decidable, List.nodup]]
[Prod.ext_iff,[Eq.mpr, Eq.refl, Iff, Eq, And, Prod.fst, Prod.snd, Eq.symm, Prod.mk.eta, Prod.mk, propext, Prod.mk.inj_iff, Iff.rfl],[Iff, Eq, And, Prod.fst, Prod.snd]]
[Nat.shiftLeft,[Nat, PProd.fst, HMul.hMul, OfNat.ofNat],[Nat]]
[StateCpsT.instMonadLiftStateCpsT,[MonadLift.mk, StateCpsT.lift],[MonadLift, StateCpsT]]
[coe,[CoeT.coe],[]]
[Option.noConfusionType,[],[]]
[UInt16.instCommRingUInt16.proof_1,[UInt16.eq_of_val_eq, Eq.mpr, congr, congrArg, Eq, UInt16.val, UInt16.mul_def, CommSemiring.mul_comm],[Eq, HMul.hMul]]
[List.nil_eq_append_iff,[Eq.mpr, Eq.refl, Iff, Eq, List.nil, HAppend.hAppend, And, propext, eq_comm, List.append_eq_nil, Iff.rfl],[Iff, Eq, List.nil, HAppend.hAppend, And]]
[Char.isValidChar_of_isValidChar_Nat,[isValidChar, UInt32.ofNat', Char.isValidUInt32, Or.inl, Or.inr, And.intro],[isValidChar, UInt32.ofNat', Char.isValidUInt32]]
[Id,[],[]]
[instToStreamRangeRange,[ToStream.mk],[ToStream, Std.Range]]
[List.forall_mem_singleton,[Eq.mpr, congrFun, congrArg, Iff, Eq.trans, forall_congr, implies_congr, propext, List.mem_singleton, Eq.refl, forall_eq, Iff.rfl],[Iff]]
[Nat.eq_zero_or_eq_succ_pred,[of_eq_true, Eq.trans, congr, congrArg, Or, congrFun, Eq, Nat.zero_eq, OfNat.ofNat, eq_true_of_decide, Eq.refl, Bool.true, eq_false', Eq.symm, Nat.succ, Nat.pred_succ, eq_self],[Or, Eq, OfNat.ofNat, Nat.succ, Nat.pred]]
[ExceptCpsT.run_pure,[rfl],[Eq, ExceptCpsT.run, Pure.pure, Except.ok]]
[Set.image,[setOf, Exists, And, Mem.mem, Eq],[Set]]
[Tactic.TryThis.delabToRefinableSyntax,[Bind.bind, readThe, Lean.Core.Context, liftM, Lean.PrettyPrinter.delab, Lean.Core.Context.currNamespace, Lean.Core.Context.openDecls, EmptyCollection.emptyCollection, Tactic.TryThis.replaceMVarsByUnderscores],[Lean.Elab.Term.TermElabM, Lean.Syntax]]
[Nat.mul_zero,[rfl],[Eq, HMul.hMul, OfNat.ofNat]]
[instStreamRangeNat,[Stream.mk, ite, LT.lt, Std.Range.start, Std.Range.stop, Option.some, Prod.mk, Std.Range.mk, HAdd.hAdd, Std.Range.step, Option.none],[Stream, Std.Range, Nat]]
[noConfusionEnum.proof_2,[congrArg],[False]]
[ByteArray.forIn.loop.proof_2,[Nat.le_of_lt, Nat.lt_of_lt_of_le, Nat.lt_succ_self],[LE.le, ByteArray.size]]
[Function.bijective.exists_unique,[Iff.mp, Function.bijective_iff_exists_unique],[ExistsUnique, Eq]]
[min,[ite, LE.le],[]]
[Array.reverse,[OfNat.ofNat, Array.reverse.rev],[Array]]
[Fin.ofNat,[Fin.mk, HMod.hMod, Nat.succ, Fin.ofNat.proof_1],[Fin, Nat.succ]]
[ULift.down_up,[rfl],[Eq, ULift.down, ULift.up]]
[List.append_ne_nil_of_ne_nil_right,[of_eq_true, Eq.trans, implies_congr_ctx, ne_eq, List.nil, HAppend.hAppend, congrArg, Not, propext, List.append_eq_nil, And, Eq, eq_false, and_false, eq_true_of_decide, Eq.refl, Bool.true, implies_true],[Ne, HAppend.hAppend, List.nil]]
[List.and,[List.all, id],[Bool]]
[InvImage.accessible,[InvImage.accessible.proof_1],[Acc, InvImage]]
[Nat.div_zero,[Eq.mpr, Eq.refl, Eq, HDiv.hDiv, OfNat.ofNat, Nat.div_eq, of_eq_true, Eq.trans, congrFun, congrArg, ite_congr, And, eq_false_of_decide, Bool.false, LE.le, false_and, HAdd.hAdd, Nat.sub_zero, ite_false, eq_true_of_decide, Bool.true],[Eq, HDiv.hDiv, OfNat.ofNat]]
[List.foldrM,[Pure.pure, Bind.bind, PProd.fst],[]]
[Function.inv_fun_eq_of_injective_of_right_inverse,[funext, Function.inv_fun, Eq.mpr, Eq.refl, Eq, Function.inv_fun_eq, Exists.intro],[Eq, Function.inv_fun]]
[Seq.seq,[],[]]
[UInt32.neg_def,[rfl],[Eq, Neg.neg, UInt32.mk, UInt32.val]]
[decide_eq_false,[Eq, Decidable.decide, Bool.false, absurd, rfl],[Eq, Decidable.decide, Bool.false]]
[SizeOf.sizeOf,[],[Nat]]
[List.toString,[Unit.unit, String, HAppend.hAppend, List.toStringAux, Bool.true, List.cons],[String]]
[UInt16.sub,[UInt16.mk, HSub.hSub, UInt16.val],[UInt16]]
[String.csize,[UInt32.toNat, Char.utf8Size],[Nat]]
[lt_min,[Or.elim, le_or_gt, Eq.mpr, Eq.refl, LT.lt, min, min_eq_left, min_eq_right_of_lt],[LT.lt, min]]
[Nat.prod_dvd_and_dvd_of_dvd_prod.proof_1,[Eq.symm],[Eq, Nat.zero, Nat.gcd]]
[EStateM.Result.error.sizeOf_spec,[Eq.refl, HAdd.hAdd, OfNat.ofNat, SizeOf.sizeOf],[Eq, SizeOf.sizeOf, EStateM.Result.error, HAdd.hAdd, OfNat.ofNat]]
[Ring.gsmul_zero',[],[Eq, Ring.gsmul, OfNat.ofNat]]
[UInt32.shiftLeft,[UInt32.mk, HShiftLeft.hShiftLeft, UInt32.val, UInt32.modn, OfNat.ofNat],[UInt32]]
[MonadReader.noConfusionType,[],[]]
[let_body_congr,[],[Eq]]
[List.reverse_reverse,[Eq.mpr, Eq.refl, Eq, List.reverseAux, List.nil, List.reverseAux_reverseAux_nil, rfl],[Eq, List.reverse]]
[FloatArray.getOp,[FloatArray.get!],[Float]]
[Function.surjective.exists,[Iff.intro, Exists, Exists.intro, Eq.symm],[Iff, Exists]]
[Int.natAbs_mul_self,[Eq, Int.ofNat, HMul.hMul, Int.natAbs, rfl],[Eq, Int.ofNat, HMul.hMul, Int.natAbs]]
[Preorder.toLE,[],[LE]]
[MonadWithReader.withReader,[],[]]
[CoeT.noConfusionType,[],[]]
[UInt64.le,[LE.le, UInt64.val],[]]
[min_eq_left,[Eq.symm, eq_min, le_refl],[Eq, min]]
[imp_false,[Iff.rfl],[Iff, False, Not]]
[List.findM?,[Unit.unit, Option, Pure.pure, Option.none, Bind.bind, Option.some, PProd.fst],[Option]]
[Quot.indBeta,[rfl],[Eq, Quot.ind, Quot.mk]]
[Tactic.Ring.horner_add_horner_gt,[Eq.mpr, Eq.refl, Eq, HAdd.hAdd, Tactic.Ring.horner, Eq.symm, OfNat.ofNat, of_eq_true, Eq.trans, congr, congrArg, add_comm, HMul.hMul, HPow.hPow, add_assoc, congrFun, add_zero, add_mul, mul_assoc, pow_add, eq_self],[Eq, HAdd.hAdd, Tactic.Ring.horner]]
[Nat.coprime.gcd_mul_left_cancel_right,[Eq.mpr, Eq.refl, Eq, Nat.gcd, HMul.hMul, Nat.gcd_comm, Nat.coprime.gcd_mul_left_cancel, rfl],[Eq, Nat.gcd, HMul.hMul]]
[UInt8.val_eq_of_eq,[Eq, UInt8.val, congrArg],[Eq, UInt8.val]]
[Nat.le_refl,[Nat.le.refl],[LE.le]]
[UInt32.toUInt8,[Nat.toUInt8, UInt32.toNat],[UInt8]]
[andM,[Bind.bind, Unit.unit, ToBool.toBool, Pure.pure],[]]
[List.rotateRight,[ite, LE.le, OfNat.ofNat, HAppend.hAppend],[List]]
[«term_::_»,[Lean.ParserDescr.trailingNode, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.symbol, Lean.ParserDescr.cat],[Lean.TrailingParserDescr]]
[Function.surj_inv,[Classical.choose],[]]
[List.map_nil,[rfl],[Eq, List.map, List.nil]]
[String.instLTString,[LT.mk, LT.lt, String.data],[LT, String]]
[List.mem_inter_iff,[of_eq_true, Eq.trans, congr, congrArg, Iff, propext, List.mem_filter, List.nil, Decidable.decide, Mem.mem, congrFun, And, List.mem_nil_iff, Eq, Bool.true, false_and, eq_true_of_decide, Eq.refl, List.cons, List.mem_cons_iff, decide_eq_true_iff, iff_self, Or],[Iff, Mem.mem, List.inter, And]]
[SizeOf.noConfusionType,[],[]]
[LawfulFunctor.id_map,[],[Eq, Functor.map, id]]
[Nat.add_left_cancel,[Eq.mpr, implies_congr, congr, congrArg, Eq, Eq.trans, congrFun, HAdd.hAdd, Nat.zero_eq, Nat.zero_add, Eq.refl, Nat.succ_add, Nat.succ.injEq],[Eq]]
[Function.right_inverse_inv_fun,[Function.inv_fun_eq],[Function.right_inverse, Function.inv_fun]]
[List.disjoint_append_left,[of_eq_true, Eq.trans, congrFun, congrArg, Iff, forall_congr, implies_congr, propext, List.mem_append, Eq.refl, False, or_imp_distrib, forall_and_distrib, And, iff_self],[Iff, List.disjoint, HAppend.hAppend, And]]
[instToStringUInt64,[ToString.mk, ToString.toString, UInt64.toNat],[ToString, UInt64]]
[UInt16.sub_def,[rfl],[Eq, HSub.hSub, UInt16.mk, UInt16.val]]
[Nat.div.proof_1,[WellFoundedRelation.wf, measure, id],[WellFounded, WellFoundedRelation.rel, measure, id]]
[Int.neg_ofNat_zero,[rfl],[Eq, Neg.neg, Int.ofNat, OfNat.ofNat]]
[List.not_mem_of_not_mem_cons,[absurd, Or.inr],[Not, Mem.mem]]
[Function.decidable_eq_pfun.proof_1,[Iff.symm, Function.funext_iff],[Iff, Eq]]
[Functor.map_equiv.proof_1,[of_eq_true, Eq.trans, congrFun, congrArg, Eq, Functor.map_map, Equiv.toFun, Equiv.symm, Functor.map, Equiv.symm_comp_self, LawfulFunctor.id_map, eq_self],[Eq, Functor.map, Equiv.toFun, Equiv.symm]]
[Nat.to_digits_core_lens_eq_aux,[Classical.em, Eq, HDiv.hDiv, OfNat.ofNat, of_eq_true, Eq.trans, congr, congrArg, List.length, ite_congr, congrFun, eq_true_of_decide, Eq.refl, Bool.true, List.cons, Nat.digitChar, HMod.hMod, Nat.toDigitsCore, if_true, HAdd.hAdd, eq_self, Eq.symm, Eq.mpr, eq_false, if_false, Eq.mp, implies_congr, trivial],[Eq, List.length, Nat.toDigitsCore]]
[System.FilePath.extension,[Option.bind, System.FilePath.fileName, Unit.unit, dite, Eq, Eq.symm, Option, String, String.revPosOf, Char.ofNat, Option.none, Option.some, String.extract, HAdd.hAdd, OfNat.ofNat, String.bsize],[Option, String]]
[instToStringBool,[ToString.mk, cond],[ToString, Bool]]
[Nat.gcd_rec,[Unit.unit, Eq, Nat.gcd, HMod.hMod, of_eq_true, Eq.trans, congrFun, congrArg, Nat.gcd_succ, HAdd.hAdd, OfNat.ofNat, eq_self, Nat.succ],[Eq, Nat.gcd, HMod.hMod]]
[Ordering.isLE,[Unit.unit, Bool, Bool.true, Bool.false],[Bool]]
[MonoidWithZero.toZero,[],[Zero]]
[add_comm,[AddCommSemigroup.add_comm],[Eq, HAdd.hAdd]]
[Array.empty,[Array.mkEmpty, OfNat.ofNat],[Array]]
[HEq.ndrecOn,[],[]]
[Array.forInUnsafe.loop,[ite, LT.lt, Bind.bind, Pure.pure, Array.forInUnsafe.loop, HAdd.hAdd, OfNat.ofNat],[]]
[Quotient.exists_rep,[Quot.exists_rep],[Exists, Eq, Quotient.mk]]
[Nat.forM,[Nat.forM.loop],[Unit]]
[ByteSlice.noConfusionType,[],[]]
[Append.append,[],[]]
[PSigma.lexAccessible,[PSigma.lexAccessible.proof_1],[Acc, PSigma.Lex, PSigma.mk]]
[FloatSpec.decLt,[],[DecidableRel, FloatSpec.lt]]
[List.tail_eq_of_cons_eq,[],[Eq]]
[Nat.le_add_left,[Nat.le_add_right, Nat.add_comm],[LE.le, HAdd.hAdd]]
[Nat.sub_sub_self,[Iff.mpr, Nat.sub_eq_iff_eq_add, Nat.sub_le, Eq.symm, Nat.add_sub_of_le],[Eq, HSub.hSub]]
[Nat.dvd_zero,[Exists.intro, OfNat.ofNat, of_eq_true, Eq.trans, congrArg, Eq, Nat.mul_zero, eq_true_of_decide, Eq.refl, Bool.true],[Dvd.dvd, OfNat.ofNat]]
[Subarray.forInUnsafe,[USize.ofNat, Subarray.start, Subarray.forInUnsafe.loop],[]]
[OfNat.noConfusionType,[],[]]
[UInt8.eq_of_val_eq,[Eq, congrArg, UInt8.mk],[Eq]]
[UInt64.mul_def,[rfl],[Eq, HMul.hMul, UInt64.mk, UInt64.val]]
[Unit.ext,[rfl],[Eq]]
[ExceptCpsT,[],[]]
[UInt64.instCommRingUInt64.proof_1,[UInt64.eq_of_val_eq, Eq.mpr, congr, congrArg, Eq, UInt64.val, UInt64.mul_def, CommSemiring.mul_comm],[Eq, HMul.hMul]]
[List.redLength,[Unit.unit, Nat, OfNat.ofNat, Nat.succ, PProd.fst],[Nat]]
[OfNat.ofNat,[],[]]
[Nat.coprime_iff_gcd_eq_one,[Iff.rfl],[Iff, Nat.coprime, Eq, Nat.gcd, OfNat.ofNat]]
[ReaderT.run_monadLift,[rfl],[Eq, ReaderT.run, MonadLiftT.monadLift]]
[Sdiff.sdiff,[],[]]
[List.tail!,[Unit.unit, List, panicWithPosWithDecl, OfNat.ofNat],[List]]
[exists_eq',[Exists.intro, rfl],[Exists, Eq]]
[List.join,[Unit.unit, List, List.nil, HAppend.hAppend, PProd.fst],[List]]
[OrOp.or,[],[]]
[WellFounded.fixF,[],[]]
[Substring.front,[Substring.get, OfNat.ofNat],[Char]]
[ST.Ref.mk.inj,[],[Eq]]
[Array.allM,[Bind.bind, Array.anyM, Pure.pure, not, OfNat.ofNat, Array.size],[Bool]]
[USize.instSemiringUSize.proof_5,[of_eq_true, Eq.trans, forall_congr, congr, congrArg, Eq, congrFun, HMul.hMul, USize.zero_def, USize.mul_def, USize.mk, OfNat.ofNat, MonoidWithZero.zero_mul, USize.val, eq_self, propext, forall_const, USize],[Eq, HMul.hMul, OfNat.ofNat]]
[panicWithPosWithDecl,[panic, HAppend.hAppend, ToString.toString],[]]
[PUnit.eq_punit,[PUnit.subsingleton, PUnit.unit],[Eq, PUnit.unit]]
[Bool.noConfusionType,[],[]]
[Mathlib.Tactic.Lint.SimpLemmaInfo.mk.inj,[And.intro],[And, Eq]]
[dite_not,[Decidable.em, of_eq_true, Eq.trans, congr, congrArg, Eq, dite_congr, Not, eq_true, eq_false_of_decide, Eq.refl, Bool.false, Eq.mpr_prop, Eq.mpr_not, dite_false, not_not_intro, dite_true, eq_self, not_false, Eq.symm, eq_false, eq_true_of_decide, Bool.true, True.intro],[Eq, dite, Not, not_not_intro]]
[instAddCommMonoid_1.proof_1,[AddCommSemigroup.add_comm],[Eq, HAdd.hAdd]]
[Nat.add_mod,[Eq.mpr, Eq.refl, Eq, HMod.hMod, HAdd.hAdd, Nat.add_mod_mod, Nat.mod_add_mod, rfl],[Eq, HMod.hMod, HAdd.hAdd]]
[List.hasDecEq.proof_5,[absurd],[False]]
[UInt32.val,[],[Fin, UInt32.size]]
[Fin.instShiftRightFin,[ShiftRight.mk, Fin.shiftRight],[ShiftRight, Fin]]
[instToStringByteSlice,[ToString.mk, Id.run, Bind.bind, ForIn.forIn, Pure.pure, PUnit.unit, ForInStep.yield],[ToString, ByteSlice]]
[Nat.gcd_dvd_gcd_mul_left_right,[Nat.gcd_dvd_gcd_of_dvd_right, Nat.dvd_mul_left],[Dvd.dvd, Nat.gcd, HMul.hMul]]
[Nat.add_sub_add_right,[Eq, HSub.hSub, HAdd.hAdd, Eq.mpr, Eq.refl, OfNat.ofNat, Nat.add_zero, rfl, Nat.add_succ, Nat.succ, Nat.succ_sub_succ, PProd.fst],[Eq, HSub.hSub, HAdd.hAdd]]
[instToStringProd,[ToString.mk, String, HAppend.hAppend, ToString.toString],[ToString, Prod]]
[Mathlib.Tactic.Lint.Linter.errorsFound,[],[Lean.MessageData]]
[instOrdUInt8,[Ord.mk, compareOfLessAndEq],[Ord, UInt8]]
[List.mem_nil,[Iff.rfl],[Iff, Mem.mem, List.nil, False]]
[«term_^^^_»,[Lean.ParserDescr.trailingNode, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.symbol, Lean.ParserDescr.cat],[Lean.TrailingParserDescr]]
[Float.mk.sizeOf_spec,[Eq.refl, HAdd.hAdd, OfNat.ofNat, SizeOf.sizeOf],[Eq, SizeOf.sizeOf, Float.mk, HAdd.hAdd, OfNat.ofNat]]
[Nat.find_min,[And.right, Subtype.property, Nat.find_x],[Not]]
[or,[Unit.unit, Bool, Bool.true],[Bool]]
[Id.map_eq,[rfl],[Eq, Functor.map]]
[Array.uget,[Array.get, Fin.mk, USize.toNat],[]]
[Nat.sub_one,[rfl],[Eq, HSub.hSub, OfNat.ofNat, Nat.pred]]
[Mathlib.Tactic.Lint.withSimpLemmaInfos,[Lean.Meta.withReducible, Bind.bind, Lean.Meta.mkSorry, Bool.true, Bool.false, Array.mapM, Lean.Meta.MetaM, Lean.Meta.forallTelescopeReducing, Pure.pure, Lean.Expr.eq?, Option.none, Mathlib.Tactic.Lint.isConditionalHyps, Array.toList, Mathlib.Tactic.Lint.SimpLemmaInfo.mk, Lean.throwError, HAppend.hAppend, Lean.ToMessageData.toMessageData, List.toArray],[Lean.Meta.MetaM, Array]]
[Fin.mod_eq_val,[Nat.mod_eq_of_lt, Fin.isLt],[Eq, HMod.hMod, Fin.val]]
[OptionM,[OptionT, Id],[]]
[UInt8.instSemiringUInt8.proof_3,[congrArg, UInt8.mk, Semiring.nsmul_zero', UInt8.val],[Eq, UInt8.mk, Semiring.nsmul, OfNat.ofNat, UInt8.val]]
[List.getLast!.proof_1,[],[List.noConfusionType, False, List.cons, List.nil]]
[Function.bijective.of_comp_iff,[and_congr, Function.injective.of_comp_iff', Function.surjective.of_comp_iff, Function.bijective.surjective],[Iff, Function.bijective, Function.comp]]
[List.disjoint_of_disjoint_append_left_left,[And.left, Iff.mp, List.disjoint_append_left],[List.disjoint]]
[Char.le,[LE.le, Char.val],[]]
[StateCpsT.lift,[Bind.bind],[StateCpsT]]
[Int.rem,[Int, Int.ofNat, HMod.hMod, Nat.succ, Neg.neg],[Int]]
[Nat.gcd_mul_right,[Eq.mpr, Eq.refl, Eq, Nat.gcd, HMul.hMul, Nat.mul_comm, Nat.gcd_mul_left, rfl],[Eq, Nat.gcd, HMul.hMul]]
[Array.findSomeM?,[Bind.bind, ForIn.forIn, MProd.mk, Option.none, PUnit.unit, ForInStep, MProd, Option, PUnit, Pure.pure, ForInStep.done, Option.some, ForInStep.yield, Unit.unit, MProd.fst],[Option]]
[Nat.toDigitsCore,[List, Char, ite, Eq, OfNat.ofNat, List.cons, PProd.fst],[List, Char]]
[Semiring.nsmul_succ',[],[Eq, Semiring.nsmul, Nat.succ, HAdd.hAdd]]
[And.imp,[And.intro, And.left, And.right],[And]]
[Int.ofNat_mul_negOfNat,[Unit.unit, Eq, HMul.hMul, Int.ofNat, Int.negOfNat, rfl],[Eq, HMul.hMul, Int.ofNat, Int.negOfNat]]
[boolToProp,[Coe.mk, Eq, Bool.true],[Coe, Bool]]
[Int.add_zero,[Eq, HAdd.hAdd, OfNat.ofNat, rfl],[Eq, HAdd.hAdd, OfNat.ofNat]]
[or_iff_left_of_imp,[Iff.intro, id, Or.inl],[Iff, Or]]
[UInt64.instRingUInt64.proof_2,[congrArg, UInt64.mk, Ring.gsmul_zero', UInt64.val],[Eq, UInt64.mk, Ring.gsmul, OfNat.ofNat, UInt64.val]]
[DivInvMonoid.gpow_succ',[],[Eq, DivInvMonoid.gpow, Int.ofNat, Nat.succ, HMul.hMul]]
[USize.ofNat32.proof_1,[Unit.unit, Eq.symm, eq_of_heq, Eq.refl, OfNat.ofNat, HEq.refl, LT.lt, USize.size, usize_size_eq, Nat.lt_trans, of_decide_eq_true, Bool.true],[LT.lt, USize.size]]
[instDecidableEqBool,[Unit.unit, Decidable, Eq, Decidable.isTrue, rfl, Decidable.isFalse, instDecidableEqBool.proof_1, instDecidableEqBool.proof_2],[DecidableEq, Bool]]
[Function.surjective_id,[Exists.intro, rfl],[Function.surjective, id]]
[unexpandUnit,[Bind.bind, Lean.MonadRef.mkInfoFromRefPos, Lean.MonadQuotation.getCurrMacroScope, Lean.MonadQuotation.getMainModule, Pure.pure, Lean.Syntax.node, Lean.SourceInfo.none, Lean.Name.mkStr, Lean.Name.anonymous, List.toArray, List.cons, Lean.Syntax.atom, List.nil],[Lean.PrettyPrinter.Unexpander]]
[Nat.lt_ge_by_cases.proof_1,[Iff.mp, not_lt],[LE.le]]
[Quot.recOn,[Quot.rec],[]]
[Nat.mul_div_le,[Unit.unit, Eq.symm, eq_of_heq, Eq.refl, OfNat.ofNat, HEq.refl, LE.le, HMul.hMul, HDiv.hDiv, Nat.eq_zero_or_pos, Eq.mpr, Nat.zero_mul, Nat.zero_le, Nat.mul_comm, propext, Nat.le_div_iff_mul_le, Nat.le_refl],[LE.le, HMul.hMul, HDiv.hDiv]]
[Tactic.Ring.horner_mul_horner,[Eq.mpr, Eq.refl, Eq, HMul.hMul, Tactic.Ring.horner, Eq.symm, HAdd.hAdd, OfNat.ofNat, of_eq_true, Eq.trans, congr, congrArg, congrFun, mul_comm, HPow.hPow, mul_add, mul_left_comm, add_mul, mul_assoc, add_zero, eq_self],[Eq, HMul.hMul, Tactic.Ring.horner]]
[Sigma.fst,[],[]]
[«term¬_»,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.symbol, Lean.ParserDescr.cat],[Lean.ParserDescr]]
[String.Iterator.noConfusionType,[],[]]
[instOfNat,[OfNat.mk, Zero.zero],[OfNat]]
[isValidChar,[Or, LT.lt, OfNat.ofNat, And],[]]
[String.getOp,[String.get],[Char]]
[coeTC,[CoeTC.coe],[]]
[Function.curry_uncurry,[rfl],[Eq, Function.curry, Function.uncurry]]
[StateRefT'.instMonadFunctorStateRefT',[inferInstanceAs, MonadFunctor, ReaderT, ST.Ref],[MonadFunctor, StateRefT']]
[System.FilePath.isAbsolute,[or, List.contains, System.FilePath.pathSeparators, String.front, System.FilePath.toString, and, System.Platform.isWindows, Decidable.decide, GE.ge, String.bsize, OfNat.ofNat, BEq.beq, String.getOp, Char.ofNat],[Bool]]
[Function.comp.left_id,[rfl],[Eq, Function.comp, id]]
[and_or_distrib_right,[Iff.trans, Or.comm, or_and_distrib_left, and_congr],[Iff, Or, And]]
[List.eq_or_ne_mem_of_mem,[Classical.em, Eq, Or.inl, Eq.symm, Or.inr, And.intro, Or.resolve_left, Eq.refl],[Or, Eq, And, Ne, Mem.mem]]
[Nat.prod_dvd_and_dvd_of_dvd_prod.proof_2,[Eq.refl, Nat.gcd],[Eq, Nat.gcd]]
[xor_comm,[of_eq_true, Eq.trans, congrArg, Eq, Or, And, Not, propext, or_comm, eq_self],[Eq, xor]]
[List.erasep_cons,[rfl],[Eq, List.erasep, List.cons, ite]]
[ite_true,[rfl],[Eq, ite, True]]
[Fin.checked_mul_spec,[Iff.intro, Decidable.em, LE.le, HMul.hMul, Fin.val, False.elim, Eq.mp, Eq.trans, congrFun, congrArg, Eq, Unit.unit, Bool, Option, Fin, Prod.mk, Iff.mpr, decide_eq_true_iff, Option.none, Option.some, Bool.true, Bool.false, eq_false', Eq.symm, Nat.lt_of_not_le, Eq.refl, of_eq_true, decide_eq_false, Nat.not_le_of_lt, eq_true_of_decide],[Iff, Eq, Option.isSome, Fin.checkedMul, Bool.true, LT.lt, HMul.hMul, Fin.val]]
[ST.Prim.Ref.modifyUnsafe,[Bind.bind, ST.Prim.Ref.take, ST.Prim.Ref.set],[ST, Unit]]
[instMulNat,[Mul.mk, Nat.mul],[Mul, Nat]]
[Subarray.popFront.proof_1,[Nat.le_of_lt_succ, Nat.add_lt_add_right, OfNat.ofNat],[LE.le, HAdd.hAdd, Subarray.start, OfNat.ofNat, Subarray.stop]]
[PProd.noConfusionType,[],[]]
[add_left_cancel,[IsAddLeftCancel.add_left_cancel],[Eq]]
[String.quote,[ite, Eq, String.isEmpty, Bool.true, HAppend.hAppend, String.foldl, Char.quoteCore],[String]]
[OptionM.run,[],[Option]]
[MonadFunctorT.noConfusionType,[],[]]
[Substring.posOf,[String.Pos, HSub.hSub, String.posOfAux],[String.Pos]]
[stdRange,[Prod.mk, OfNat.ofNat],[Prod, Nat]]
[Array.forIn.loop.proof_1,[Nat.lt_of_le_of_lt, Nat.sub_le, HSub.hSub, Array.size, OfNat.ofNat, Nat.sub_lt, Nat.zero_lt_of_lt, Nat.lt_of_lt_of_le, Nat.lt_succ_self, of_decide_eq_true, Eq.refl, Bool.true],[LT.lt, HSub.hSub, Array.size, OfNat.ofNat]]
[Array.size_pop,[List.length_dropLast, Array.data],[Eq, Array.size, Array.pop, HSub.hSub, OfNat.ofNat]]
[Prod.lex_def,[Iff.intro, Eq.symm, eq_of_heq, Eq.refl, HEq.refl, Or, Prod.fst, And, Eq, Prod.snd, of_eq_true, Eq.trans, congrFun, congrArg, eq_true, true_or, congr, eq_self, eq_true_of_decide, Bool.true, or_true, Prod.Lex, Prod.Lex.left, Prod.Lex.right],[Iff, Prod.Lex, Or, Prod.fst, And, Eq, Prod.snd]]
[not_exists_of_forall_not,[Iff.mpr, exists_imp_distrib],[Not, Exists]]
[USize.noConfusionType,[],[]]
[Tactic.Ring.horner_mul_const,[of_eq_true, Eq.trans, congr, congrArg, Eq, add_mul, HMul.hMul, HPow.hPow, congrFun, HAdd.hAdd, mul_right_comm, Eq.symm, eq_self],[Eq, HMul.hMul, Tactic.Ring.horner]]
[StateCpsT.runK_get,[rfl],[Eq, StateCpsT.runK, MonadState.get]]
[Setoid.iseqv,[],[Equivalence, Setoid.r]]
[Int.natAbs,[Nat, Nat.succ],[Nat]]
[List.eraseDups,[List.eraseDupsAux, List.nil],[List]]
[«term#[_,]»,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.symbol, Lean.ParserDescr.sepBy, Lean.ParserDescr.cat, Bool.false],[Lean.ParserDescr]]
[Classical.strongIndefiniteDescription.proof_2,[absurd],[Classical.choice]]
[Nat.instShiftRightNat,[ShiftRight.mk, Nat.shiftRight],[ShiftRight, Nat]]
[Unit.unit,[PUnit.unit],[Unit]]
[instInhabitedTrue,[Inhabited.mk, True.intro],[Inhabited, True]]
[Nat.gcd_assoc,[Nat.dvd_antisymm, Nat.dvd_gcd, Nat.dvd_trans, Nat.gcd_dvd_left, Nat.gcd, Nat.gcd_dvd_right],[Eq, Nat.gcd]]
[List.getD,[Option.getD, List.get?],[]]
[Sum.noConfusionType,[],[]]
[Function.update_comp_eq_of_injective',[Iff.mpr, Function.eq_update_iff, And.intro, Function.update_same, Function.update_noteq, Function.injective.ne],[Eq, Function.update]]
[FloatArray.isEmpty,[BEq.beq, FloatArray.size, OfNat.ofNat],[Bool]]
[Mathlib.ExtendedBinder.«command__Binder_predicate_____=>_»,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.unary, Lean.ParserDescr.parser, Lean.ParserDescr.const, Lean.ParserDescr.symbol, Lean.ParserDescr.cat],[Lean.ParserDescr]]
[StateCpsT.runK_bind_set,[rfl],[Eq, StateCpsT.runK, Bind.bind, MonadStateOf.set, PUnit.unit]]
[Nat.instNumericNat,[Numeric.mk, id],[Numeric, Nat]]
[List.append_bind,[rfl, of_eq_true, Eq.trans, congr, congrArg, Eq, congrFun, List.bind, List.cons_append, List.cons_bind, HAppend.hAppend, List.append_assoc, eq_self],[Eq, List.bind, HAppend.hAppend]]
[List.length_pos_iff_ne_nil,[Iff.intro, List.ne_nil_of_length_pos, List.length_pos_of_ne_nil],[Iff, LT.lt, OfNat.ofNat, List.length, Ne, List.nil]]
[IsMulRightCancel.noConfusionType,[],[]]
[Nat.lcm_zero_right,[Nat.lcm_zero_left, Nat.lcm_comm, OfNat.ofNat],[Eq, Nat.lcm, OfNat.ofNat]]
[List.card_union_disjoint,[Eq.mpr, Eq.refl, Eq, List.card, List.union, HAdd.hAdd, List.card_eq_of_equiv, List.union_equiv_append, HAppend.hAppend, List.card_append_disjoint, rfl],[Eq, List.card, List.union, HAdd.hAdd]]
[String.Iterator.toEnd,[String.Iterator, String.Iterator.mk, String.bsize],[String.Iterator]]
[List.decidableMem.proof_3,[not_or_intro],[Not, Or, Eq, List.mem]]
[MProd.mk.injEq,[Eq.propIntro, And.intro, Eq.refl, MProd.mk, Eq.symm, eq_of_heq, HEq.refl],[Eq, MProd.mk, And]]
[ExceptCpsT.runCatch_pure,[rfl],[Eq, ExceptCpsT.runCatch, Pure.pure]]
[Or.assoc,[Iff.intro, Or.imp_right, Or.inl, Or.inr, Or.imp_left],[Iff, Or]]
[Fin.elim0,[absurd, Nat.not_lt_zero],[]]
[coeOfDep,[CoeT.mk, coeD],[CoeT]]
[and_iff_right,[Iff.intro, And.right, And.intro],[Iff, And]]
[PSigma.mkSkipLeft.proof_1,[PSigma.RevLex.right],[PSigma.RevLex, emptyRelation, PSigma.mk]]
[Int.decEq.proof_6,[],[Int.noConfusionType, False, Int.negSucc, Int.ofNat]]
[Array.binSearch,[ite, LT.lt, Array.size, Array.binSearchAux, id, Option.none],[Option]]
[USize.instAddSemigroupUSize,[AddSemigroup.mk, USize.instAddSemigroupUSize.proof_1],[AddSemigroup, USize]]
[Substring.prevn,[String.Pos, PProd.fst, Substring.prev],[String.Pos]]
[PartialOrder.noConfusionType,[],[]]
[HOr.hOr,[],[]]
[List.drop_eq_nil_of_le',[Eq, List.drop, List.nil, rfl, Eq.symm, Eq.refl, OfNat.ofNat, HEq.refl],[Eq, List.drop, List.nil]]
[precArg,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.nonReservedSymbol, Bool.false],[Lean.ParserDescr]]
[Bool.ff_ne_tt,[],[False]]
[USize.eq_of_val_eq,[Eq, congrArg, USize.mk],[Eq]]
[non_contradictory,[Not],[]]
[instAddCommMonoid_1,[AddCommMonoid.mk, instAddCommMonoid_1.proof_1],[AddCommMonoid]]
[String.trimRight,[Substring.toString, Substring.trimRight, String.toSubstring],[String]]
[instMonadControlT,[MonadControlT.mk, MonadControlT.stM, MonadControl.stM, MonadControl.liftWith, MonadControlT.liftWith, Function.comp, MonadControl.restoreM, MonadControlT.restoreM],[MonadControlT]]
[USize.mul,[USize.mk, HMul.hMul, USize.val],[USize]]
[Decidable.of_not_not,[Decidable.byContradiction, absurd],[]]
[List.takeWhile,[Unit.unit, List, List.nil, List.cons, PProd.fst],[List]]
[SubNegMonoid.gsmul_succ',[],[Eq, SubNegMonoid.gsmul, Int.ofNat, Nat.succ, HAdd.hAdd]]
[ReaderT.instLawfulMonadReaderT.proof_1,[LawfulMonad.mk, ReaderT.ext, Eq.mpr, congr, congrArg, Eq, Eq.trans, ReaderT.run_bind, Pure.pure, Bind.bind, ReaderT.run, funext, ReaderT.run_pure, ReaderT.run_map, LawfulMonad.bind_pure_comp, rfl, of_eq_true, congrFun, LawfulMonad.pure_bind, eq_self, LawfulMonad.bind_assoc],[LawfulMonad, ReaderT]]
[List.toFloatArray,[FloatArray.empty, List.toFloatArray.loop],[FloatArray]]
[List.map,[Unit.unit, List, List.nil, List.cons, PProd.fst],[List]]
[instToStreamListList,[ToStream.mk],[ToStream, List]]
[USize.mk.sizeOf_spec,[Eq.refl, HAdd.hAdd, OfNat.ofNat, SizeOf.sizeOf],[Eq, SizeOf.sizeOf, USize.mk, HAdd.hAdd, OfNat.ofNat]]
[Nat.succ_pred_eq_of_pos,[Eq.refl, Nat.zero, HEq.refl, Eq, Nat.succ, Nat.pred, rfl],[Eq, Nat.succ, Nat.pred]]
[Array.toPersistentArray,[Array.foldl, Std.PersistentArray.push, Std.PersistentArray.empty, OfNat.ofNat, Array.size],[Std.PersistentArray]]
[List.eq_or_mem_of_mem_insert,[Iff.mp, List.mem_insert_iff],[Or, Eq, Mem.mem]]
[Fin.instInhabitedFinHAdd,[Inhabited.mk, OfNat.ofNat],[Inhabited, Fin]]
[instSubUInt16,[Sub.mk, UInt16.sub],[Sub, UInt16]]
[List.reverseAux_eq_append,[of_eq_true, Eq.trans, congrArg, Eq, List.nil_append, eq_self, Eq.mpr, Eq.refl, List.reverseAux, List.cons, HAppend.hAppend, List.nil, List.append_assoc, rfl],[Eq, List.reverseAux, HAppend.hAppend, List.nil]]
[Subtype.coe_eta,[Subtype.ext, rfl],[Eq, Subtype.mk, Subtype.val]]
[Tactic.Ring.horner_add_horner_eq,[Eq.mpr, Eq.refl, Eq, HAdd.hAdd, Tactic.Ring.horner, Eq.symm, of_eq_true, Eq.trans, congr, congrArg, add_comm, HMul.hMul, HPow.hPow, add_assoc, congrFun, add_mul, eq_self],[Eq, HAdd.hAdd, Tactic.Ring.horner]]
[Mathlib.Tactic.Lint.LintVerbosity.high.sizeOf_spec,[Eq.refl, OfNat.ofNat],[Eq, SizeOf.sizeOf, Mathlib.Tactic.Lint.LintVerbosity.high, OfNat.ofNat]]
[Array.back?,[Array.get?, HSub.hSub, Array.size, OfNat.ofNat],[Option]]
[Mathlib.Tactic.Conv.convRHS,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.nonReservedSymbol, Bool.false, Lean.ParserDescr.unary, Lean.ParserDescr.symbol, Lean.ParserDescr.const, Lean.ParserDescr.cat, Lean.Parser.Tactic.Conv.convSeq],[Lean.ParserDescr]]
[Nat.mul_one,[Nat.zero_add],[Eq, HMul.hMul, OfNat.ofNat]]
[instReprList_1,[Repr.mk, Std.Format, List.cons, Std.Format.text, Std.Format.bracketFill, Std.Format.joinSep, HAppend.hAppend, Std.Format.line],[Repr, List]]
[instDecidableArrow.proof_3,[absurd],[]]
[sizeOfWFRel,[measure, SizeOf.sizeOf],[WellFoundedRelation]]
[Set.union,[setOf, Or, Mem.mem],[Set]]
[System.FilePath.normalize,[ite, Eq, and, BEq.beq, List.length, System.FilePath.pathSeparators, OfNat.ofNat, not, Bool.true, System.FilePath.mk, String.map, List.contains, System.FilePath.pathSeparator, Char.toLower, System.FilePath.toString],[System.FilePath]]
[Quotient.lift₂.proof_2,[Quotient.ind, Setoid.refl],[Eq, Quotient.lift, Setoid.refl]]
[EStateM.run',[Option, EStateM.run, Option.some, Option.none],[Option]]
[Equiv.trans,[Equiv.mk, Function.comp, Equiv.toFun, Equiv.symm, Equiv.trans.proof_1, Equiv.trans.proof_2],[Equiv]]
[StateT.lift,[Bind.bind, Pure.pure, Prod.mk],[StateT]]
[AndOp.and,[],[]]
[Nat.succ_sub_succ,[Nat.succ_sub_succ_eq_sub],[Eq, HSub.hSub, Nat.succ]]
[Fin.checkedSub,[Option, Fin, Fin.underflowingSub, Option.none, Option.some],[Option, Fin]]
[ulift.up.injEq,[Eq.propIntro, Eq.refl, ulift.up, Eq.symm, eq_of_heq, HEq.refl],[Eq, ulift.up]]
[WellFounded.fixFEq.proof_1,[rfl],[Eq, WellFounded.fixF, Acc.inv]]
[opt_param_eq,[optParam_eq],[Eq, optParam]]
[Function.surjective.forall₂,[Iff.trans, Function.surjective.forall, forall_congr'],[Iff]]
[USize.add_def,[rfl],[Eq, HAdd.hAdd, USize.mk, USize.val]]
[Thunk.mk.sizeOf_spec,[Eq.refl, OfNat.ofNat],[Eq, SizeOf.sizeOf, Thunk.mk, OfNat.ofNat]]
[Nat.mul_mod_left,[Eq.mpr, Eq.refl, Eq, HMod.hMod, HMul.hMul, OfNat.ofNat, Nat.mul_comm, Nat.mul_mod_right, rfl],[Eq, HMod.hMod, HMul.hMul, OfNat.ofNat]]
[or_congr_left,[or_congr, Iff.rfl],[Iff, Or]]
[Nat.lt_of_add_lt_add_left,[Nat.lt_of_le_of_ne, Nat.le_of_add_le_add_left, Nat.le_of_lt, Nat.lt_irrefl, HAdd.hAdd, Eq.mp, Eq.refl, LT.lt],[LT.lt]]
[FloatArray.get!,[Float, Array.get!],[Float]]
[Nat.le_lt_antisymm,[Nat.lt_irrefl, Nat.lt_of_le_of_lt],[False]]
[Array.data,[],[List]]
[Nat.div_le_of_le_mul,[LE.le, HDiv.hDiv, of_eq_true, Eq.trans, congrFun, congrArg, Nat.div_zero, eq_true, Nat.zero_le],[LE.le, HDiv.hDiv]]
[instNumericFin,[Numeric.mk, Fin.ofNat', Fin.size_positive'],[Numeric, Fin]]
[List.instEmptyCollectionList,[EmptyCollection.mk, List.nil],[EmptyCollection, List]]
[UInt64.instSemiringUInt64.proof_5,[of_eq_true, Eq.trans, forall_congr, congr, congrArg, Eq, congrFun, HMul.hMul, UInt64.zero_def, UInt64.mul_def, UInt64.mk, OfNat.ofNat, MonoidWithZero.zero_mul, UInt64.val, eq_true_of_decide, Eq.refl, Bool.true, propext, forall_const, UInt64],[Eq, HMul.hMul, OfNat.ofNat]]
[Array.foldrMUnsafe,[ite, LE.le, Array.size, LT.lt, USize.ofNat, Pure.pure, Array.foldrMUnsafe.fold],[]]
[neg_add_self,[add_left_neg],[Eq, HAdd.hAdd, Neg.neg, OfNat.ofNat]]
[Array.get,[List.get, Array.data, Fin.val, Array.get.proof_1],[]]
[Fin.eq_of_val_eq,[Eq.symm, eq_of_heq, Eq.refl, Fin.val, Fin.mk, HEq.refl, Eq, rfl],[Eq]]
[ReaderT.run_read,[rfl],[Eq, ReaderT.run, ReaderT.read, Pure.pure]]
[Nat.add_mod_left,[Eq.mpr, Eq.refl, Eq, HMod.hMod, HAdd.hAdd, Nat.add_comm, Nat.add_mod_right, rfl],[Eq, HMod.hMod, HAdd.hAdd]]
[MonadStateOf.get,[],[]]
[Prod.rprod.proof_1,[Subrelation.wf, WellFoundedRelation.wf, Prod.lex, Prod.RProdSubLex],[WellFounded, Prod.RProd, WellFoundedRelation.rel]]
[Nat.prod_dvd_and_dvd_of_dvd_prod.proof_4,[Eq.symm],[Eq, Nat.succ, Nat.gcd]]
[UInt64.instSemiringUInt64.proof_9,[rfl],[Eq, OfNat.ofNat]]
[List.instMemList,[Mem.mk, List.mem],[Mem, List]]
[Function.extend,[dite, Exists, Eq, Classical.choose],[]]
[False.elim,[],[]]
[decide_eq_true,[Eq, Decidable.decide, Bool.true, rfl, absurd],[Eq, Decidable.decide, Bool.true]]
[instMonadExcept,[MonadExcept.mk, throwThe, tryCatchThe],[MonadExcept]]
[CommRing.mul_comm,[],[Eq, HMul.hMul]]
[StateT.run'_eq,[rfl],[Eq, StateT.run', Functor.map, Prod.fst, StateT.run]]
[OptionT.instMonadExceptOfUnitOptionT,[MonadExceptOf.mk, OptionT.fail, OptionT.tryCatch],[MonadExceptOf, Unit, OptionT]]
[seq_eq_bind_map,[Eq.mpr, Eq.refl, Eq, Seq.seq, Bind.bind, Functor.map, Eq.symm, LawfulMonad.bind_map, rfl],[Eq, Seq.seq, Bind.bind, Functor.map]]
[StateCpsT.runK_bind_modify,[rfl],[Eq, StateCpsT.runK, Bind.bind, modify, PUnit.unit]]
[Prod.swap_swap,[Eq, Prod.swap, rfl],[Eq, Prod.swap]]
[Acc.inv,[Acc.inv.proof_1],[Acc]]
[Decidable.by_contradiction,[Decidable.byContradiction],[]]
[StateCpsT.run'_eq,[rfl],[Eq, StateCpsT.run', StateCpsT.runK, Pure.pure]]
[UInt8.land,[UInt8.mk, Fin.land, UInt8.val],[UInt8]]
[and_congr_right,[Iff.intro, And, And.intro, Iff.mp, Iff.mpr],[Iff, And]]
[Set.univ,[setOf, True],[Set]]
[Nat.add_left_comm,[Eq.mpr, Eq.refl, Eq, HAdd.hAdd, Eq.symm, Nat.add_assoc, Nat.add_comm, rfl],[Eq, HAdd.hAdd]]
[Nat.succ_le_succ,[Unit.unit, Eq.symm, eq_of_heq, Eq.refl, HEq.refl, LE.le, Nat.succ, Nat.le.refl, Nat.le.step, PProd.fst],[LE.le, Nat.succ]]
[List.toPersistentArrayAux,[Std.PersistentArray, PProd.fst, Std.PersistentArray.push],[Std.PersistentArray]]
[instAddCommGroup.proof_2,[Semiring.zero_add],[Eq, HAdd.hAdd, OfNat.ofNat]]
[Nat.pow,[Unit.unit, Nat, OfNat.ofNat, Nat.mul, PProd.fst],[Nat]]
[Tactic.Ring.HornerExpr.instCoeHornerExprExpr,[Coe.mk, Tactic.Ring.HornerExpr.e],[Coe, Tactic.Ring.HornerExpr, Lean.Expr]]
[FloatArray.foldlM.loop,[dite, LT.lt, Unit.unit, Pure.pure, Bind.bind, FloatArray.get, Fin.mk, FloatArray.foldlM.loop.proof_1, PProd.fst, HAdd.hAdd, OfNat.ofNat],[]]
[HAppend.noConfusionType,[],[]]
[Quotient.exact,[Quot.inductionOn, Setoid.refl],[HasEquiv.Equiv]]
[Decidable.or_iff_not_and_not,[Eq.mpr, Eq.refl, Iff, Or, Not, And, Eq.symm, propext, not_or_distrib, Decidable.not_not, Iff.rfl],[Iff, Or, Not, And]]
[Char.isLower,[and, Decidable.decide, GE.ge, Char.val, OfNat.ofNat, LE.le],[Bool]]
[EStateM.Result.error.inj,[And.intro],[And, Eq]]
[Tactic.Ring.subst_into_add,[Eq.mpr, Eq.refl, Eq, HAdd.hAdd, rfl],[Eq, HAdd.hAdd]]
[Nat.find_x.proof_2,[Or.elim, lt_or_eq_of_le, Eq.mpr, Eq.refl, Not],[Not]]
[USize.le,[LE.le, USize.val],[]]
[Mathlib.Eval.evalExpr,[Lean.withoutModifyingEnv, Bind.bind, liftM, Lean.Core.mkFreshUserName, Lean.Name.mkStr, Lean.Name.anonymous, Lean.Meta.inferType, Lean.Meta.isDefEq, ite, Eq, Bool.true, Pure.pure, PUnit.unit, Lean.throwError, HAppend.hAppend, Lean.ToMessageData.toMessageData],[Lean.Meta.MetaM]]
[String.posOf,[String.posOfAux, String.bsize, OfNat.ofNat],[String.Pos]]
[StateCpsT.run,[StateCpsT.runK, Pure.pure, Prod.mk],[Prod]]
[Nat.sub_sub,[Eq, HSub.hSub, HAdd.hAdd, Eq.mpr, Eq.refl, OfNat.ofNat, Nat.add_zero, Nat.sub_zero, rfl, Nat.succ, Nat.add_succ, Nat.sub_succ, Nat.pred, PProd.fst],[Eq, HSub.hSub, HAdd.hAdd]]
[Array.isPrefixOf,[dite, LE.le, Array.size, Array.isPrefixOfAux, OfNat.ofNat, Bool.false],[Bool]]
[instOfNatFloat,[OfNat.mk, Float.ofNat],[OfNat, Float]]
[ST.Prim.Ref.modify,[Bind.bind, ST.Prim.Ref.get, ST.Prim.Ref.set],[ST, Unit]]
[Mathlib.Tactic.Conv.traceLHS,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.nonReservedSymbol, Bool.false],[Lean.ParserDescr]]
[Int.subNatNat_add_add,[Int.subNatNat_elim, Eq, Int.subNatNat, HAdd.hAdd, Eq.mpr, Eq.refl, Int.ofNat, Nat.add_assoc, Nat.add_comm, Eq.symm, Int.subNatNat_add_left, OfNat.ofNat, Int.negSucc, Int.subNatNat_add_right],[Eq, Int.subNatNat, HAdd.hAdd]]
[instCommRingFin,[CommRing.mk, instCommRingFin.proof_1],[CommRing, Fin]]
[MonadFunctor.noConfusionType,[],[]]
[Nat.sub_lt_self,[Nat.sub_lt, Nat.lt_of_lt_of_le],[LT.lt, HSub.hSub]]
[Nat.div_le_self,[LE.le, HDiv.hDiv, Eq.mpr, congrFun, congrArg, Nat.div_zero, Nat.zero_le, Nat.div_le_of_le_mul],[LE.le, HDiv.hDiv]]
[nonempty_of_exists,[Nonempty, Nonempty.intro],[Nonempty]]
[DoResultPR.return.sizeOf_spec,[Eq.refl, HAdd.hAdd, OfNat.ofNat, SizeOf.sizeOf],[Eq, SizeOf.sizeOf, DoResultPR.return, HAdd.hAdd, OfNat.ofNat]]
[Nat.lt_eq,[rfl],[Eq, Nat.lt, LT.lt]]
[Array.get!,[Array.getD, arbitrary],[]]
[Sum.inr.injEq,[Eq.propIntro, Eq.refl, Sum.inr, Eq.symm, eq_of_heq, HEq.refl],[Eq, Sum.inr]]
[instXorUInt8,[Xor.mk, UInt8.xor],[Xor, UInt8]]
[ExceptCpsT.runK,[],[]]
[List.length_repeat,[of_eq_true, Eq.trans, congr, congrArg, Eq, List.length_nil, Nat.zero_eq, eq_true_of_decide, Eq.refl, Bool.true, Eq.mpr, congrFun, List.length_cons, List.repeat, Nat.succ, Nat.succ.injEq, List.length],[Eq, List.length, List.repeat]]
[Tactic.Ring.HornerExpr.ibelow,[True, And],[]]
[Nat.mul_lt_mul',[Nat.lt_of_le_of_lt, Nat.mul_le_mul_of_nonneg_right, Nat.mul_lt_mul_of_pos_left],[LT.lt, HMul.hMul]]
[WellFounded.recursion,[WellFounded.apply],[]]
[List.head_eq_of_cons_eq,[],[Eq]]
[Neg.neg,[],[]]
[Int.subNatNat_add_right,[],[Eq, Int.subNatNat, HAdd.hAdd, OfNat.ofNat, Int.negSucc]]
[exists_eq,[Exists.intro, rfl],[Exists, Eq]]
[Decidable.not_iff_not,[Eq.mpr, Eq.refl, Iff, Not, propext, iff_def, And, iff_def', and_congr, Decidable.not_imp_not],[Iff, Not]]
[List.Perm.swap',[],[List.Perm, List.cons]]
[Int.ofNat.inj,[],[Eq]]
[Nat.not_lt_of_le,[Nat.not_le_of_gt],[Not, LT.lt]]
[«term_<_»,[Lean.ParserDescr.trailingNode, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.symbol, Lean.ParserDescr.cat],[Lean.TrailingParserDescr]]
[Bool.or_false,[rfl, Eq.symm, Eq.refl],[Eq, or, Bool.false]]
[Subarray.anyM,[Array.anyM, Subarray.as, Subarray.start, Subarray.stop],[Bool]]
[Nat.sub_eq_zero_iff_le,[Iff.intro, Nat.le_of_sub_eq_zero, Nat.sub_eq_zero_of_le],[Iff, Eq, HSub.hSub, OfNat.ofNat, LE.le]]
[Prod.ext',[Iff.mpr, Prod.ext_iff, And.intro],[Eq]]
[cast_eq,[rfl],[Eq, cast]]
[List.mem_cons_eq,[rfl],[Eq, Mem.mem, List.cons, Or]]
[Quotient.mk,[Quot.mk, Setoid.r],[Quotient]]
[Function.update_eq_iff,[Iff.trans, Function.funext_iff, Function.forall_update_iff, Eq],[Iff, Eq, Function.update, And]]
[instReprBool,[Repr.mk, Std.Format, Std.Format.text],[Repr, Bool]]
[«term_<*_»,[Lean.ParserDescr.trailingNode, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.symbol, Lean.ParserDescr.cat],[Lean.TrailingParserDescr]]
[unsafeCast,[cast, unsafeCast.proof_1, PUnit],[]]
[instDecidableLt_1,[UInt8.decLt],[Decidable, LT.lt]]
[ForIn.forIn,[],[]]
[Monoid.toOne,[],[One]]
[Nat.coprime.symm,[Eq.trans, Nat.gcd_comm],[Nat.coprime]]
[MonadReader.read,[],[]]
[instSubNat,[Sub.mk, Nat.sub],[Sub, Nat]]
[List.hasDecEq.proof_2,[],[List.noConfusionType, False, List.cons, List.nil]]
[instDivFloat,[Div.mk, Float.div],[Div, Float]]
[UInt8.isLower,[and, Decidable.decide, GE.ge, OfNat.ofNat, LE.le],[Bool]]
[System.FilePath.components,[String.splitOn, System.FilePath.toString, System.FilePath.normalize, Bool.false, Char.toString, System.FilePath.pathSeparator],[List, String]]
[UInt32.instRingUInt32.proof_5,[UInt32.eq_of_val_eq, of_eq_true, Eq.trans, congr, congrArg, Eq, UInt32.val, congrFun, HAdd.hAdd, UInt32.neg_def, UInt32.add_def, UInt32.mk, Neg.neg, add_left_neg, UInt32.zero_def, eq_true_of_decide, Eq.refl, Bool.true],[Eq, HAdd.hAdd, Neg.neg, OfNat.ofNat]]
[Nat.coprime.coprime_mul_right,[Nat.coprime.coprime_dvd_left, Nat.dvd_mul_right],[Nat.coprime]]
[List.erasep_of_forall_not,[rfl, of_eq_true, Eq.trans, congrFun, congrArg, Eq, List.erasep_cons_of_neg, Not, eq_false, Or.inl, eq_true_of_decide, Eq.refl, Bool.true, List.cons, List.forall_mem_of_forall_mem_cons, eq_self],[Eq, List.erasep]]
[StateRefT'.lift,[],[StateRefT']]
[Subarray.as,[],[Array]]
[MonadFinally.tryFinally',[],[Prod]]
[right_commutative,[Eq],[]]
[Function.surjective.exists₂,[Iff.trans, Function.surjective.exists, exists_congr],[Iff, Exists]]
[instToStreamSubarraySubarray,[ToStream.mk],[ToStream, Subarray]]
[Nat.lcm_one_left,[],[Eq, Nat.lcm, OfNat.ofNat]]
[UInt16.instSemiringUInt16.proof_3,[congrArg, UInt16.mk, Semiring.nsmul_zero', UInt16.val],[Eq, UInt16.mk, Semiring.nsmul, OfNat.ofNat, UInt16.val]]
[UInt32.instRingUInt32.proof_1,[congrArg, UInt32.mk, Ring.sub_eq_add_neg, UInt32.val],[Eq, UInt32.mk]]
[mul_inv_self,[mul_right_inv],[Eq, HMul.hMul, Inv.inv, OfNat.ofNat]]
[or_comm,[Or.comm],[Iff, Or]]
[Prod.Lex.decidable,[decidable_of_decidable_of_iff, inferInstance, Prod.Lex.decidable.proof_1],[DecidableRel, Prod.Lex]]
[stdSplit,[StdGen.mk, Prod, StdGen, Prod.mk],[Prod, StdGen]]
[Nat.lt_of_succ_lt_succ,[Nat.le_of_succ_le_succ],[LT.lt]]
[And.rotate,[Eq.mpr, congrArg, Iff, And, Eq.trans, propext, and_comm, And.left_comm, Iff.rfl],[Iff, And]]
[or_self,[propext, Iff.intro, Or.inl],[Eq, Or]]
[instReprUSize,[Repr.mk, repr, USize.toNat],[Repr, USize]]
[Array.insertionSort.traverse,[Unit.unit, Array, dite, LT.lt, Array.size, PProd.fst, Array.insertionSort.swapLoop, HAdd.hAdd, OfNat.ofNat],[Array]]
[not,[Unit.unit, Bool, Bool.false, Bool.true],[Bool]]
[Fin.size_positive',[Fin.size_positive, Inhabited.default],[LT.lt, OfNat.ofNat]]
[Squash.lift.proof_1,[Subsingleton.elim],[Eq]]
[Function.surjective.of_comp_iff,[Iff.intro, Function.surjective.of_comp, Function.surjective.comp],[Iff, Function.surjective, Function.comp]]
[Array.mk.sizeOf_spec,[Eq.refl, HAdd.hAdd, OfNat.ofNat, SizeOf.sizeOf],[Eq, SizeOf.sizeOf, Array.mk, HAdd.hAdd, OfNat.ofNat]]
[System.FilePath.pathSeparator,[ite, Eq, System.Platform.isWindows, Bool.true, Char.ofNat],[Char]]
[Tactic.Find.«tactic#find_»,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.nonReservedSymbol, Bool.false, Lean.ParserDescr.cat],[Lean.ParserDescr]]
[Function.partial_inv,[dite, Exists, Eq, Option.some, Classical.choose, Option.none],[Option]]
[Classical.em,[],[Or, Not]]
[Nat.lt_of_le_of_lt,[Nat.le_trans, Nat.succ_le_succ],[LT.lt]]
[Tactic.Find.«command#find_»,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.symbol, Lean.ParserDescr.cat],[Lean.ParserDescr]]
[Char.mk.sizeOf_spec,[Eq.refl, HAdd.hAdd, OfNat.ofNat, SizeOf.sizeOf],[Eq, SizeOf.sizeOf, Char.mk, HAdd.hAdd, OfNat.ofNat]]
[UInt64.lor,[UInt64.mk, Fin.lor, UInt64.val],[UInt64]]
[unexpandPSigma,[ite, Eq, Lean.Syntax.isOfKind, Lean.Name.mkStr, Lean.Name.anonymous, Bool.true, Lean.Syntax.matchesNull, OfNat.ofNat, cond, Bind.bind, Lean.MonadRef.mkInfoFromRefPos, Lean.MonadQuotation.getCurrMacroScope, Lean.MonadQuotation.getMainModule, Pure.pure, Lean.Syntax.node, Lean.SourceInfo.none, List.toArray, List.cons, Lean.Syntax.atom, List.nil, MonadExcept.throw, Unit.unit],[Lean.PrettyPrinter.Unexpander]]
[USize.instRingUSize,[Ring.mk, USize.instRingUSize.proof_1, USize.mk, Ring.gsmul, USize.val, USize.instRingUSize.proof_2, USize.instRingUSize.proof_3, USize.instRingUSize.proof_4, USize.instRingUSize.proof_5],[Ring, USize]]
[pow_add,[of_eq_true, Eq.trans, congr, congrArg, Eq, HPow.hPow, HAdd.hAdd, Nat.zero_eq, Nat.add_zero, HMul.hMul, pow_zero, mul_one, eq_self, Eq.mpr, Eq.refl, Nat.succ, Nat.add_succ, pow_succ', Eq.symm, mul_assoc, pow_mul_comm, rfl],[Eq, HPow.hPow, HAdd.hAdd, HMul.hMul]]
[ne_of_lt,[absurd, lt_irrefl],[Ne]]
[Sub.sub,[],[]]
[Subrelation.wf,[Subrelation.wf.proof_1],[WellFounded]]
[Array.size,[List.length, Array.data],[Nat]]
[UInt16.mk.sizeOf_spec,[Eq.refl, HAdd.hAdd, OfNat.ofNat, SizeOf.sizeOf],[Eq, SizeOf.sizeOf, UInt16.mk, HAdd.hAdd, OfNat.ofNat]]
[StateT.run_set,[rfl],[Eq, StateT.run, MonadStateOf.set, Pure.pure, Prod.mk, PUnit.unit]]
[Thunk.bind,[Thunk.mk, Thunk.get],[Thunk]]
[ofNat_one,[rfl],[Eq, Numeric.ofNat, OfNat.ofNat]]
[ByteArray.get!,[UInt8, Array.get!],[UInt8]]
[List.length_cons,[rfl],[Eq, List.length, List.cons, Nat.succ]]
[Subsingleton.helim.proof_1,[heq_of_eq, Subsingleton.elim],[HEq]]
[Function.comp.assoc,[rfl],[Eq, Function.comp]]
[CoeDep.noConfusionType,[],[]]
[List.singleton_disjoint,[of_eq_true, Eq.trans, congrFun, congrArg, Iff, forall_congr, implies_congr, propext, List.mem_singleton, Eq.refl, False, forall_eq, Not, Mem.mem, iff_self],[Iff, List.disjoint, List.cons, List.nil, Not, Mem.mem]]
[Function.bicompr,[],[]]
[Function.update_apply,[],[Eq, Function.update, ite]]
[List.map_eq_mapTR,[funext, of_eq_true, Eq.trans, congrArg, Eq, List.map, List.mapTRAux_eq, List.nil, congrFun, HAppend.hAppend, List.reverse_nil, List.nil_append, eq_self],[Eq, List.map, List.mapTR]]
[Mathlib.Tactic.Lint.Linter.isFast,[],[Bool]]
[Decidable.not_and_iff_or_not,[Iff.intro, Decidable.isFalse, Decidable.isTrue, Or, Not, absurd, And.intro, Or.inr, Or.inl, False],[Iff, Not, And, Or]]
[Bool.and_false,[rfl, Eq.symm, Eq.refl],[Eq, and, Bool.false]]
[Nat.succ_sub_one,[rfl],[Eq, HSub.hSub, Nat.succ, OfNat.ofNat]]
[pow_succ,[Eq.mpr, Eq.refl, Eq, HPow.hPow, Nat.succ, HMul.hMul, pow_succ', pow_mul_comm, rfl],[Eq, HPow.hPow, Nat.succ, HMul.hMul]]
[Function.right_inverse,[Function.left_inverse],[]]
[MonadExcept.instOrElse,[OrElse.mk, MonadExcept.orElse],[OrElse]]
[AndThen.andThen,[],[]]
[instLENat,[LE.mk, Nat.le],[LE, Nat]]
[instAndOpUInt64,[AndOp.mk, UInt64.land],[AndOp, UInt64]]
[Fin.instAndOpFin,[AndOp.mk, Fin.land],[AndOp, Fin]]
[Int.negSucc.inj,[],[Eq]]
[le_max_right,[dite, LT.lt, Eq.mpr, congrArg, LE.le, if_pos, le_of_lt, of_eq_true, Eq.trans, if_neg, eq_true, le_refl],[LE.le, max]]
[Function.left_inverse.injective,[rfl],[Function.injective]]
[Fin.instOrOpFin,[OrOp.mk, Fin.lor],[OrOp, Fin]]
[Fin.sub,[Fin, Fin.mk, HMod.hMod, HAdd.hAdd, HSub.hSub, Fin.sub.proof_1],[Fin]]
[EStateM.instInhabitedResult,[Inhabited.mk, EStateM.Result.error, arbitrary],[Inhabited, EStateM.Result]]
[UInt8.complement,[HSub.hSub, OfNat.ofNat, HAdd.hAdd],[UInt8]]
[String.mk.sizeOf_spec,[Eq.refl, HAdd.hAdd, OfNat.ofNat, SizeOf.sizeOf],[Eq, SizeOf.sizeOf, String.mk, HAdd.hAdd, OfNat.ofNat]]
[Nat.dvd_lcm_left,[Exists.intro, HDiv.hDiv, Nat.gcd, Eq.mpr, Eq.refl, Eq, Nat.lcm, HMul.hMul, Eq.symm, Nat.mul_div_assoc, Nat.gcd_dvd_right, rfl],[Dvd.dvd, Nat.lcm]]
[StateRefT',[ReaderT, ST.Ref],[]]
[System.Platform.isEmscripten,[System.Platform.getIsEmscripten, Unit.unit],[Bool]]
[Subarray.instForInSubarray,[ForIn.mk, Subarray.forIn],[ForIn, Subarray]]
[ByteArray.instForInByteArrayUInt8,[ForIn.mk, ByteArray.forIn],[ForIn, ByteArray, UInt8]]
[List.erasep_nil,[rfl],[Eq, List.erasep, List.nil]]
[UInt8.instSemiringUInt8.proof_13,[UInt8.eq_of_val_eq, Eq.mpr, congrArg, Eq, Fin.ofNat', HAdd.hAdd, OfNat.ofNat, Fin.size_positive', UInt8.val, Eq.trans, UInt8.mk, UInt8.one_def, UInt8.add_def],[Eq, Numeric.ofNat, HAdd.hAdd, OfNat.ofNat]]
[Bool.and_self,[rfl, Eq.symm, Eq.refl],[Eq, and]]
[Char.isAlphanum,[or, Char.isAlpha, Char.isDigit],[Bool]]
[Subtype.trans,[Setoid.trans],[HasEquiv.Equiv]]
[add_neg_self,[add_right_neg],[Eq, HAdd.hAdd, Neg.neg, OfNat.ofNat]]
[Array.anyM.loop.proof_1,[Nat.lt_of_lt_of_le],[LT.lt, Array.size]]
[UInt32.isValidChar,[Nat.isValidChar, UInt32.toNat],[]]
[FloatArray.foldlMUnsafe,[ite, LT.lt, LE.le, FloatArray.size, USize.ofNat, Pure.pure, FloatArray.foldlMUnsafe.fold],[]]
[Nat.min_comm,[Decidable.em, LE.le, Eq.mpr, congr, congrArg, Eq, Eq.trans, ite_congr, eq_true, Eq.refl, ite_true, Nat.le_antisymm, Eq.symm, of_eq_true, eq_false, ite_false, eq_self, not_or_intro, Nat.le_or_le],[Eq, Nat.min]]
[Equiv.mk.inj,[And.intro],[And, Eq]]
[instToFormatOption,[Std.ToFormat.mk, Option.format],[Std.ToFormat, Option]]
[Function.bicompl,[],[]]
[Mathlib.Tactic.Lint.lintCore,[Bind.bind, Lean.MonadEnv.getEnv, Lean.MonadOptions.getOptions, Array.mapM, Array.filterM, Mathlib.Tactic.Lint.shouldBeLinted, Mathlib.Tactic.Lint.NamedLinter.name, OfNat.ofNat, Array.size, liftM, BaseIO.asTask, EIO.toBaseIO, Lean.Core.CoreM.run', Lean.Meta.MetaM.run', Mathlib.Tactic.Lint.Linter.test, Mathlib.Tactic.Lint.NamedLinter.toLinter, Lean.Meta.Context.mk, Lean.Meta.State.mk, Lean.Core.Context.mk, Lean.Core.State.mk, BaseIO, Option, Lean.MessageData, Pure.pure, Option.some, HAppend.hAppend, Lean.ToMessageData.toMessageData, Lean.Exception.toMessageData, Task.Priority.default, Prod.mk, Lean.Core.CoreM, Prod, Mathlib.Tactic.Lint.NamedLinter, Std.HashMap, Lean.Name, ForIn.forIn, ForInStep, Option.none, Task.get, PUnit.unit, ForInStep.yield],[Lean.Core.CoreM, Array, Prod, Mathlib.Tactic.Lint.NamedLinter, Std.HashMap, Lean.Name, Lean.MessageData]]
[String.isInt,[ite, Eq, String.get, OfNat.ofNat, Char.ofNat, Substring.isNat, Substring.drop, String.toSubstring, String.isNat],[Bool]]
[List.append_subset_iff,[Iff.intro, Eq.mpr, congr, congrArg, And, propext, List.subset_def, And.intro, Eq.mp, List.mem_append_left, List.mem_append_right, Subset.subset, HAppend.hAppend, List.append_subset_of_subset_of_subset],[Iff, Subset.subset, HAppend.hAppend, And]]
[HPow.noConfusionType,[],[]]
[decidable_of_iff,[decidable_of_decidable_of_iff],[Decidable]]
[List.decidableBexi.proof_2,[Exists.intro, And.intro, List.mem_cons_self],[Exists, And, Mem.mem, List.cons]]
[Applicative.toPure,[],[Pure]]
[not.decidable_imp_symm,[Decidable.not_imp_symm],[]]
[Nat.mul_le_mul_left,[LE.le, HMul.hMul, Nat.le.dest],[LE.le, HMul.hMul]]
[Array.mapIdxM.map,[Array, Pure.pure],[Array]]
[instSubsingletonStateM.proof_1,[Subsingleton.intro, funext, Eq, Eq.mpr, Eq.refl, Prod.mk, Subsingleton.elim, rfl],[Subsingleton, StateM]]
[Nat.allM,[Nat.allM.loop],[Bool]]
[String.length,[Nat, List.length],[Nat]]
[UInt32.instAddCommSemigroupUInt32,[AddCommSemigroup.mk, UInt32.instAddCommSemigroupUInt32.proof_1],[AddCommSemigroup, UInt32]]
[PUnit.subsingleton,[rfl, Eq.symm, Eq.refl],[Eq]]
[Iff.elim_right.proof_1,[Iff.mpr],[]]
[GroupWithZero.mul_inv_cancel,[],[Eq, HMul.hMul, Inv.inv, OfNat.ofNat]]
[Option.some.sizeOf_spec,[Eq.refl, HAdd.hAdd, OfNat.ofNat, SizeOf.sizeOf],[Eq, SizeOf.sizeOf, Option.some, HAdd.hAdd, OfNat.ofNat]]
[withPtrEqDecEq.proof_3,[ofBoolUsing_eq_false],[Not, Eq]]
[List.mem_bind_of_mem,[Iff.mpr, List.mem_bind, Exists.intro, And.intro],[Mem.mem, List.bind]]
[instCommMonoid_1.proof_1,[Semiring.mul_one],[Eq, HMul.hMul, OfNat.ofNat]]
[MonadReaderOf.read,[],[]]
[workOnGoal,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.nonReservedSymbol, Bool.false, Lean.ParserDescr.const, Lean.ParserDescr.unary, Lean.ParserDescr.parser],[Lean.ParserDescr]]
[instNegFin.proof_1,[Nat.mod_lt, HSub.hSub, Fin.val, lt_of_le_of_lt, Nat.zero_le, Fin.isLt],[LT.lt, HMod.hMod, HSub.hSub, Fin.val]]
[Nat.pred,[Unit.unit, Nat, OfNat.ofNat],[Nat]]
[USize.modn_lt,[LT.lt, USize.toNat, HMod.hMod, Fin.modn_lt],[LT.lt, USize.toNat, HMod.hMod]]
[instSemiringFin.proof_10,[Eq.mpr, Eq.refl, Eq, HMul.hMul, OfNat.ofNat, instSemiringFin.proof_4, instSemiringFin.proof_5],[Eq, HMul.hMul, OfNat.ofNat]]
[Array.anyM.proof_1,[Nat.le_refl, Array.size],[LE.le, Array.size]]
[String.toAsciiByteArray.loop,[WellFounded.fix, String.toAsciiByteArray.loop.proof_1, dite, Eq, String.atEnd, Bool.true, String.next, String.toAsciiByteArray.loop.proof_2, ByteArray.push, Char.toUInt8],[ByteArray]]
[Nat.toUInt8,[UInt8.ofNat],[UInt8]]
[Prod.swap_inj,[Function.injective.eq_iff, Prod.swap_injective],[Iff, Eq, Prod.swap]]
[Group.noConfusionType,[],[]]
[decide_eq_false_iff_not,[Iff.intro, of_decide_eq_false, decide_eq_false],[Iff, Eq, Decidable.decide, Bool.false, Not]]
[rfl.proof_1,[Eq.refl],[Eq]]
[Nat.dvd_lcm_right,[Nat.dvd_lcm_left, Nat.lcm_comm],[Dvd.dvd, Nat.lcm]]
[instStreamSubstringChar,[Stream.mk, ite, LT.lt, Substring.startPos, Substring.stopPos, Option.some, Prod.mk, String.get, Substring.str, Substring.mk, String.next, Option.none],[Stream, Substring, Char]]
[and.swap,[And, And.intro],[And]]
[ReprTuple.noConfusionType,[],[]]
[CoeHTCT.noConfusionType,[],[]]
[Equiv.mk.sizeOf_spec,[Eq.refl, OfNat.ofNat],[Eq, SizeOf.sizeOf, Equiv.mk, OfNat.ofNat]]
[Nat.lt.step,[Nat.lt.step.proof_1],[LT.lt, Nat.succ]]
[pow_succ',[Monoid.npow_succ'],[Eq, HPow.hPow, Nat.succ, HMul.hMul]]
[Subarray.forM,[Array.forM, Subarray.as, Subarray.start, Subarray.stop],[PUnit]]
[ReaderT.run_seqRight,[Eq.mpr, Eq.refl, Eq, ReaderT.run, SeqRight.seqRight, seqRight_eq_bind, rfl],[Eq, ReaderT.run, SeqRight.seqRight]]
[Nat.gcd_dvd_gcd_mul_right,[Nat.gcd_dvd_gcd_of_dvd_left, Nat.dvd_mul_right],[Dvd.dvd, Nat.gcd, HMul.hMul]]
[«term∅»,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.symbol],[Lean.ParserDescr]]
[not_not,[Decidable.not_not],[Iff, Not]]
[Array.instEmptyCollectionArray,[EmptyCollection.mk, Array.empty],[EmptyCollection, Array]]
[instReprAtomUInt8,[ReprAtom.mk],[ReprAtom, UInt8]]
[Nat.lt_or_eq_or_le_succ,[Decidable.byCases, Or.inr],[Or, LE.le, Eq, Nat.succ]]
[String.decapitalize,[String.set, OfNat.ofNat, Char.toLower, String.get],[String]]
[Array.singleton,[Array.mkArray, OfNat.ofNat],[Array]]
[«term_<*>_»,[Lean.ParserDescr.trailingNode, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.symbol, Lean.ParserDescr.cat],[Lean.TrailingParserDescr]]
[Nat.sub_one_sub_lt,[Eq.mpr, Eq.refl, LT.lt, HSub.hSub, OfNat.ofNat, Nat.sub_sub, Nat.sub_lt, Nat.lt_of_lt_of_le, Nat.zero_lt_succ, HAdd.hAdd, Nat.add_comm],[LT.lt, HSub.hSub, OfNat.ofNat]]
[Sub.noConfusionType,[],[]]
[Nat.to_digits_core_length,[of_eq_true, eq_true, Nat.zero_le, False.elim, Nat.lt_irrefl, OfNat.ofNat, Eq.symm, Classical.em, LT.lt, Eq.refl],[LE.le, List.length, Nat.toDigitsCore, List.nil]]
[Array.pop,[Array.mk, List.dropLast, Array.data],[Array]]
[Nat.mul_div_left,[Eq.mpr, Eq.refl, Eq, HDiv.hDiv, HMul.hMul, Nat.mul_comm, Nat.mul_div_right, rfl],[Eq, HDiv.hDiv, HMul.hMul]]
[Nat.mod_eq_of_lt,[],[Eq, HMod.hMod]]
[ReaderT.run_monadMap,[rfl],[Eq, ReaderT.run, MonadFunctorT.monadMap]]
[Int.div,[Int, Int.ofNat, HDiv.hDiv, Neg.neg, Nat.succ],[Int]]
[false_ne_true,[trivial, Eq.symm],[Ne, False, True]]
[Classical.typeDecidable.proof_1,[absurd, Nonempty.intro],[False]]
[ToString.toString,[],[String]]
[Exists.choose,[Classical.choose],[]]
[Function.injective_iff_has_left_inverse,[Iff.intro, Function.injective.has_left_inverse, Function.has_left_inverse.injective],[Iff, Function.injective, Function.has_left_inverse]]
[AddMonoid.nsmul,[],[]]
[Nat.instTransLtArrowNatArrowNatPropLtArrowNatArrowNatPropLtArrowNatArrowNatProp,[Trans.mk, Nat.instTransLtArrowNatArrowNatPropLtArrowNatArrowNatPropLtArrowNatArrowNatProp.proof_1],[Trans, LT.lt]]
[NonScalar.mk.sizeOf_spec,[Eq.refl, HAdd.hAdd, OfNat.ofNat, SizeOf.sizeOf],[Eq, SizeOf.sizeOf, NonScalar.mk, HAdd.hAdd, OfNat.ofNat]]
[max_comm,[eq_max, le_max_right, le_max_left, max_le],[Eq, max]]
[Thunk.map,[Thunk.mk, Thunk.get],[Thunk]]
[Function.inv_fun_surjective,[Function.left_inverse.surjective, Function.left_inverse_inv_fun],[Function.surjective, Function.inv_fun]]
[OptionT.run,[],[Option]]
[Nat.add_sub_add_left,[Eq.mpr, Eq.refl, Eq, HSub.hSub, HAdd.hAdd, Nat.add_comm, Nat.add_sub_add_right, rfl],[Eq, HSub.hSub, HAdd.hAdd]]
[Quotient.inductionOn₃,[Quotient.ind],[]]
[Function.«term↿_»,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.symbol, Lean.ParserDescr.cat],[Lean.ParserDescr]]
[Decidable.not_not,[Iff.intro, Decidable.by_contradiction, not_not_intro],[Iff, Not]]
[fixCore2,[bfix2, USize.size],[]]
[lt_of_not_ge,[lt_of_le_not_le, Or.resolve_right, le_total],[LT.lt]]
[HShiftLeft.hShiftLeft,[],[]]
[LawfulMonad.bind_map,[],[Eq, Bind.bind, Functor.map, Seq.seq]]
[ulift.up_down,[Eq, ulift.up, ulift.down, rfl],[Eq, ulift.up, ulift.down]]
[UInt8.isAlpha,[or, UInt8.isUpper, UInt8.isLower],[Bool]]
[Iff.symm,[Iff.intro, Iff.mpr, Iff.mp],[Iff]]
[Mathlib.Tactic.Lint.NamedLinter.declName,[],[Lean.Name]]
[Nat.foldM,[Nat.foldM.loop],[]]
[List.isSuffixOf,[List.isPrefixOf, List.reverse],[Bool]]
[imp_congr_left,[Iff.intro, Iff.mpr, Iff.mp],[Iff]]
[Set.powerset,[setOf, Subset.subset],[Set]]
[Function.involutive_iff_iter_2_eq_id,[Iff.symm, Function.funext_iff],[Iff, Function.involutive, Eq, Nat.iterate, OfNat.ofNat, id]]
[List.hasDecidableLt.proof_1,[Eq.refl, List.nil, HEq.refl, False],[False]]
[String.any,[String.anyAux, String.bsize, OfNat.ofNat],[Bool]]
[StateCpsT.run',[StateCpsT.runK, Pure.pure],[]]
[PLift.noConfusionType,[],[]]
[Mathlib.ExtendedBinder.«binderTerm<_»,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.symbol, Lean.ParserDescr.cat],[Lean.ParserDescr]]
[Array.swapAt!,[dite, LT.lt, Array.size, Array.swapAt, Fin.mk],[Prod, Array]]
[Array.findRev?,[Id.run, Array.findRevM?],[Option]]
[List.join_nil,[rfl],[Eq, List.join, List.nil]]
[Nat.lt.base.proof_1,[Nat.le_refl, Nat.succ],[LE.le, Nat.succ]]
[Applicative.noConfusionType,[],[]]
[Array.toListLitAux.proof_2,[Nat.lt_of_lt_of_eq, Nat.lt_of_lt_of_le, Nat.lt_succ_self],[LT.lt]]
[decidable_of_decidable_of_iff.proof_1,[Iff.mp, not_iff_not_of_iff],[Not]]
[of_iff_true,[Iff.mpr, True.intro],[]]
[«prio(_)»,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.nonReservedSymbol, Bool.false, Lean.ParserDescr.cat, Lean.ParserDescr.symbol],[Lean.ParserDescr]]
[FloatArray.uget,[Float, Array.uget],[Float]]
[Sum.inhabitedLeft,[Inhabited.mk, Sum.inl, arbitrary],[Inhabited, Sum]]
[Mathlib.Tactic.Lint.«command#list_linters»,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.symbol],[Lean.ParserDescr]]
[List.nodup,[List.pairwise, Ne],[]]
[bind_pure,[],[Eq, Bind.bind, Pure.pure]]
[ST.Ref.take,[liftM, ST.Prim.Ref.take],[]]
[«term_⁻¹»,[Lean.ParserDescr.trailingNode, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.symbol],[Lean.TrailingParserDescr]]
[iff_mpr_iff_true_intro,[rfl],[Eq, Iff.mpr, iff_true_intro, True.intro]]
[coeD,[CoeDep.coe],[]]
[And.right_comm,[Eq.mpr, congr, congrArg, Iff, Eq.trans, propext, and_comm, And, And.left_comm, Iff.rfl],[Iff, And]]
[USize.instSemiringUSize.proof_12,[Eq.mpr, congr, congrArg, Eq, Eq.trans, congrFun, HMul.hMul, USize.add_def, USize.mul_def, USize.mk, HAdd.hAdd, USize.val, USize.eq_of_val_eq, Semiring.add_mul],[Eq, HMul.hMul, HAdd.hAdd]]
[unexpandExists,[ite, Eq, Lean.Syntax.isOfKind, Lean.Name.mkStr, Lean.Name.anonymous, Bool.true, Lean.Syntax.matchesNull, OfNat.ofNat, cond, Bind.bind, Lean.MonadRef.mkInfoFromRefPos, Lean.MonadQuotation.getCurrMacroScope, Lean.MonadQuotation.getMainModule, Pure.pure, Lean.Syntax.node, Lean.SourceInfo.none, List.toArray, List.cons, Lean.Syntax.atom, Array.append, List.nil, MonadExcept.throw, Unit.unit],[Lean.PrettyPrinter.Unexpander]]
[Fin.checked_sub_spec,[Iff.intro, Decidable.em, LT.lt, Fin.val, False.elim, Eq.mp, Eq.trans, congrFun, congrArg, Eq, Unit.unit, Bool, Option, Fin, Prod.mk, Iff.mpr, decide_eq_true_iff, HSub.hSub, Option.none, Option.some, Bool.true, Bool.false, eq_false', Eq.symm, Nat.le_of_not_lt, Eq.refl, of_eq_true, decide_eq_false, Nat.not_lt_of_le, eq_true_of_decide],[Iff, Eq, Option.isSome, Fin.checkedSub, Bool.true, LE.le, Fin.val]]
[Nat.zero_add,[Unit.unit, Eq, HAdd.hAdd, OfNat.ofNat, rfl, congrArg, Nat.succ, PProd.fst],[Eq, HAdd.hAdd, OfNat.ofNat]]
[GroupWithZero.toMonoidWithZero,[MonoidWithZero.mk, GroupWithZero.zero_mul, GroupWithZero.mul_zero],[MonoidWithZero]]
[«term_<$>_»,[Lean.ParserDescr.trailingNode, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.symbol, Lean.ParserDescr.cat],[Lean.TrailingParserDescr]]
[Mathlib.Tactic.Lint.LintVerbosity.ofNat_toCtorIdx,[Eq.refl, Mathlib.Tactic.Lint.LintVerbosity.low, Mathlib.Tactic.Lint.LintVerbosity.medium, Mathlib.Tactic.Lint.LintVerbosity.high],[Eq, Mathlib.Tactic.Lint.LintVerbosity.ofNat, Mathlib.Tactic.Lint.LintVerbosity.toCtorIdx]]
[right_identity,[Eq],[]]
[Decidable.not_imp_not,[Iff.intro, Decidable.by_contradiction, mt],[Iff, Not]]
[neg_neg,[neg_eq_of_add_eq_zero, add_left_neg],[Eq, Neg.neg]]
[Option.format,[Unit.unit, Std.Format, Std.Format.text, HAppend.hAppend, Std.ToFormat.format],[Std.Format]]
[mul_inv_cancel_right,[Eq.mpr, Eq.refl, Eq, HMul.hMul, Inv.inv, mul_assoc, mul_right_inv, OfNat.ofNat, mul_one, rfl],[Eq, HMul.hMul, Inv.inv]]
[List.cons_subset_cons,[Or.elim, List.eq_or_mem_of_mem_cons, Or.inl, Or.inr],[Subset.subset, List.cons]]
[List.repeat,[Unit.unit, List, List.nil, List.cons, PProd.fst],[List]]
[hexDigitRepr,[String.singleton, Nat.digitChar],[String]]
[DoResultPR.pure.sizeOf_spec,[Eq.refl, HAdd.hAdd, OfNat.ofNat, SizeOf.sizeOf],[Eq, SizeOf.sizeOf, DoResultPR.pure, HAdd.hAdd, OfNat.ofNat]]
[CommSemiring.noConfusionType,[],[]]
[WellFounded.fix_eq,[WellFounded.fixFEq, WellFounded.apply],[Eq, WellFounded.fix]]
[ST.Ref.ptrEq,[liftM, ST.Prim.Ref.ptrEq],[Bool]]
[Nat.le_antisymm,[Eq.symm, eq_of_heq, Eq.refl, HEq.refl, Eq, rfl, absurd, Nat.lt_of_le_of_lt, Nat.lt_irrefl],[Eq]]
[instSemiringFin.proof_8,[Eq.mpr, congr, congrArg, Eq, Fin.nsmuls_eq, Nat.succ, HAdd.hAdd, Eq.trans, Fin.mk, HMod.hMod, HMul.hMul, Fin.val, Nat.mod_lt, Fin.size_positive', Fin.add_def, Fin.mk.injEq, Fin.size_positive, Nat.add_mod_mod, Nat.succ_mul, Nat.add_comm],[Eq, HMul.hMul, Fin.ofNat', Fin.size_positive, Nat.succ, HAdd.hAdd]]
[List.leftpad,[HAppend.hAppend, List.repeat, HSub.hSub, List.length],[List]]
[Fin.coeToNat,[Coe.mk, Fin.val],[Coe, Fin, Nat]]
[UInt64.instSemiringUInt64.proof_8,[of_eq_true, Eq.trans, forall_congr, congrFun, congrArg, Eq, HMul.hMul, UInt64.one_def, UInt64.mul_def, UInt64.mk, OfNat.ofNat, mul_one, UInt64.val, UInt64.mk_val_eq, eq_self, propext, forall_const, UInt64],[Eq, HMul.hMul, OfNat.ofNat]]
[UInt8.one_def,[rfl],[Eq, OfNat.ofNat, UInt8.mk]]
[bfix4,[PProd.fst],[]]
[Subtype.instSetoidSubtype,[Setoid.mk, HasEquiv.Equiv, Subtype.equivalence],[Setoid, Subtype]]
[List.mem_cons_self,[Or.inl, rfl],[Mem.mem, List.cons]]
[Equiv.refl.proof_1,[rfl],[Eq, id]]
[Nat.le_of_mod_lt,[Decidable.byContradiction],[LE.le]]
[System.FilePath.instDivFilePath,[Div.mk, System.FilePath.join],[Div, System.FilePath]]
[mkStdGen,[StdGen.mk, HAdd.hAdd, OfNat.ofNat],[StdGen]]
[instToFormatArray,[Std.ToFormat.mk, HAppend.hAppend, Std.Format.text, Std.ToFormat.format, Array.toList],[Std.ToFormat, Array]]
[decide_false_eq_false,[Eq, Decidable.decide, False, Bool.false, rfl, False.elim],[Eq, Decidable.decide, False, Bool.false]]
[List.product,[List.bind, List.map, Prod.mk],[List, Prod]]
[SizeOfRef,[Measure, SizeOf.sizeOf],[]]
[ByteArray.isEmpty,[BEq.beq, ByteArray.size, OfNat.ofNat],[Bool]]
[Set.insertUnexpander,[ite, Eq, Lean.Syntax.isOfKind, Lean.Name.mkStr, Lean.Name.anonymous, Bool.true, Lean.Syntax.matchesIdent, Lean.Syntax.matchesNull, OfNat.ofNat, Bind.bind, Lean.MonadRef.mkInfoFromRefPos, Lean.MonadQuotation.getCurrMacroScope, Lean.MonadQuotation.getMainModule, Pure.pure, Lean.Syntax.node, Lean.SourceInfo.none, List.toArray, List.cons, Lean.Syntax.atom, Array.append, List.nil, Lean.Syntax.SepArray.elemsAndSeps, MonadExcept.throw, Unit.unit],[Lean.PrettyPrinter.Unexpander]]
[Char.toString,[String.singleton],[String]]
[left_comm,[],[left_commutative]]
[MProd.snd,[],[]]
[add_right_cancel_iff,[Iff.intro, add_right_cancel, rfl],[Iff, Eq, HAdd.hAdd]]
[max_eq_right,[Eq.mpr, Eq.refl, Eq, max, Eq.symm, max_comm, max_eq_left],[Eq, max]]
[iff_false_intro,[Iff.intro, False.elim],[Iff, False]]
[Subtype.instDecidableEqSubtype.proof_1,[rfl],[Eq, Subtype.mk]]
[USize.mod,[USize.mk, HMod.hMod, USize.val],[USize]]
[StateT.map,[Bind.bind, Prod, Pure.pure, Prod.mk],[StateT]]
[Classical.epsilon,[Subtype.val, Classical.strongIndefiniteDescription],[]]
[Prod.mk.inj_left,[And.right, Prod.mk.inj],[Function.injective, Prod.mk]]
[Nat.gcd_eq_zero_iff,[Iff.intro, And.intro, Nat.eq_zero_of_gcd_eq_zero_left, Nat.eq_zero_of_gcd_eq_zero_right, Eq.mpr, Eq.refl, Eq, Nat.gcd, OfNat.ofNat, And.left, And.right, Nat.gcd_zero_right],[Iff, Eq, Nat.gcd, OfNat.ofNat, And]]
[List.getLast!,[Unit.unit, panicWithPosWithDecl, OfNat.ofNat, List.getLast, List.cons, List.getLast!.proof_1],[]]
[instInhabitedPNonScalar,[Inhabited.mk, PNonScalar.mk, arbitrary],[Inhabited, PNonScalar]]
[Subtype.eta,[rfl, Eq.symm, Eq.refl],[Eq, Subtype.mk, Subtype.val]]
[instOrdBool,[Ord.mk, Bool.false, Unit.unit, Bool.true, Ordering, Ordering.lt, Ordering.gt, Ordering.eq],[Ord, Bool]]
[MonadLift.monadLift,[],[]]
[USize.instRingUSize.proof_5,[USize.eq_of_val_eq, of_eq_true, Eq.trans, congr, congrArg, Eq, USize.val, congrFun, HAdd.hAdd, USize.neg_def, USize.add_def, USize.mk, Neg.neg, add_left_neg, USize.zero_def, eq_self, OfNat.ofNat],[Eq, HAdd.hAdd, Neg.neg, OfNat.ofNat]]
[Subtype.coe_mk,[rfl],[Eq, Subtype.val, Subtype.mk]]
[UInt8.lt,[LT.lt, UInt8.val],[]]
[Tactic.LibrarySearch.«termLibrarySearch%»,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.symbol],[Lean.ParserDescr]]
[String.splitOn,[ite, Eq, BEq.beq, Bool.true, List.cons, List.nil, String.splitOnAux, OfNat.ofNat],[List, String]]
[WellFounded.apply,[WellFounded.apply.proof_1],[Acc]]
[List.length',[Unit.unit, Nat, OfNat.ofNat, Nat.succ, PProd.fst],[Nat]]
[Nat.add_left_cancel_iff,[Iff.intro, Nat.add_left_cancel, Unit.unit, Eq.symm, eq_of_heq, Eq.refl, HEq.refl, Eq, HAdd.hAdd, rfl],[Iff, Eq, HAdd.hAdd]]
[Hashable.noConfusionType,[],[]]
[Nat.pow_le_pow_of_le_right,[LE.le, HPow.hPow, Nat.succ, Nat.lt_or_eq_or_le_succ, Nat.le_refl, Eq.symm],[LE.le, HPow.hPow]]
[MonadLiftT.noConfusionType,[],[]]
[ReaderT.adapt,[],[ReaderT]]
[cond,[Unit.unit],[]]
[Nat.sub_lt_sub_left,[Eq.refl, Nat.zero, HEq.refl, LT.lt, HSub.hSub, Eq.mpr, HAdd.hAdd, OfNat.ofNat, Nat.add_sub_add_right, Nat.lt_succ_of_le, Nat.sub_le, PProd.fst, Nat.lt_of_succ_lt_succ],[LT.lt, HSub.hSub]]
[Setoid.symm,[Equivalence.symm, Setoid.iseqv],[HasEquiv.Equiv]]
[instHShiftLeft,[HShiftLeft.mk, ShiftLeft.shiftLeft],[HShiftLeft]]
[Nat.mul_sub_right_distrib,[Eq, HMul.hMul, HSub.hSub, of_eq_true, Eq.trans, congr, congrArg, congrFun, Nat.sub_zero, Nat.zero_mul, eq_self, Eq.mpr, Eq.refl, HAdd.hAdd, OfNat.ofNat, Nat.sub_succ, Nat.pred, Nat.mul_pred_left, PProd.fst, Nat.succ_mul, Nat.sub_sub, rfl],[Eq, HMul.hMul, HSub.hSub]]
[Quot.liftOn,[Quot.lift],[]]
[Nat.le_of_mul_le_mul_left,[Iff.mp, not_lt, Iff.mpr, not_le, Nat.mul_lt_mul_of_pos_left],[LE.le]]
[and_true,[propext, Iff.intro, And.left, And.intro, trivial],[Eq, And, True]]
[Nat.sub_induction,[PProd.fst],[]]
[UInt64.instSemiringUInt64.proof_12,[Eq.mpr, congr, congrArg, Eq, Eq.trans, congrFun, HMul.hMul, UInt64.add_def, UInt64.mul_def, UInt64.mk, HAdd.hAdd, UInt64.val, UInt64.eq_of_val_eq, Semiring.add_mul],[Eq, HMul.hMul, HAdd.hAdd]]
[false_of_true_iff_false,[Iff.mp, trivial],[False]]
[Task.Priority.dedicated,[OfNat.ofNat],[Task.Priority]]
[List.decidableBexi.proof_3,[False],[False]]
[instToStringString,[ToString.mk],[ToString, String]]
[String.toFileMap,[Lean.FileMap.ofString],[Lean.FileMap]]
[PSigma.lexNdep,[PSigma.Lex],[]]
[Inhabited.default,[],[]]
[UInt8.ofNat,[UInt8.mk, Fin.ofNat],[UInt8]]
[ReaderT.instMonadReaderT,[Monad.mk],[Monad, ReaderT]]
[Mathlib.Tactic.Lint.LintVerbosity.ofNat,[cond, Nat.ble, Nat.beq, Mathlib.Tactic.Lint.LintVerbosity.medium, Mathlib.Tactic.Lint.LintVerbosity.high, Mathlib.Tactic.Lint.LintVerbosity.low],[Mathlib.Tactic.Lint.LintVerbosity]]
[Int.neg,[Int, Int.negOfNat, Int.ofNat, Nat.succ],[Int]]
[Array.instToStringArray,[ToString.mk, HAppend.hAppend, ToString.toString, Array.toList],[ToString, Array]]
[instReprExcept,[Repr.mk, Std.Format, Repr.addAppParen, HAppend.hAppend, Std.Format.text, reprArg],[Repr, Except]]
[List.maximum?,[Unit.unit, Option, Option.none, Option.some, List.foldl, max],[Option]]
[String.Iterator.prevn,[String.Iterator, PProd.fst, String.Iterator.prev],[String.Iterator]]
[Prod.eq_iff_fst_eq_snd_eq,[Iff, Eq, And, Prod.fst, Prod.snd, of_eq_true, Eq.trans, congrFun, congrArg, Prod.mk.injEq, iff_self],[Iff, Eq, And, Prod.fst, Prod.snd]]
[Fin.addOverflows?,[Decidable.decide, LE.le, HAdd.hAdd, Fin.val],[Bool]]
[Int.instInhabitedInt,[Inhabited.mk, Int.ofNat, OfNat.ofNat],[Inhabited, Int]]
[Subarray.foldlM,[Array.foldlM, Subarray.as, Subarray.start, Subarray.stop],[]]
[UInt8.lor,[UInt8.mk, Fin.lor, UInt8.val],[UInt8]]
[Nat.repr,[List.asString, Nat.toDigits, OfNat.ofNat],[String]]
[List.zipWith,[List.nil, List.cons, List, PProd.fst],[List]]
[LawfulApplicative.pure_seq,[],[Eq, Seq.seq, Pure.pure, Functor.map]]
[Array.extLit,[Array.ext, Eq.trans, Eq.symm],[Eq]]
[List.cons.inj,[And.intro],[And, Eq]]
[UInt16.lt,[LT.lt, UInt16.val],[]]
[Quot.indep,[PSigma.mk, Quot.mk],[PSigma]]
[String.dropRightWhile,[Substring.toString, Substring.dropRightWhile, String.toSubstring],[String]]
[let_value_eq,[rfl],[Eq]]
[and_iff_right_iff_imp,[Iff.intro, And.left, Iff.mpr, and_iff_right_of_imp],[Iff, And]]
[Tactic.Ring.Cache.univ,[],[Lean.Level]]
[Nat.instTransLtArrowNatArrowNatPropLeArrowNatArrowNatPropLtArrowNatArrowNatProp,[Trans.mk, Nat.instTransLtArrowNatArrowNatPropLeArrowNatArrowNatPropLtArrowNatArrowNatProp.proof_1],[Trans, LT.lt, LE.le]]
[Function.involutive.ite_not,[Eq.mpr, Eq.refl, Eq, ite, Not, apply_ite, ite_not, rfl],[Eq, ite, Not]]
[gsmul_rec,[nsmul_rec, Neg.neg, Nat.succ],[]]
[Nat.dvd_antisymm,[dite, Eq, Nat.zero, Eq.symm, Nat.succ, Nat.eq_zero_of_zero_dvd, Nat.le_antisymm, Nat.le_of_dvd, Nat.succ_pos],[Eq]]
[Int.eq_x_or_neg,[Exists.intro, Int.natAbs, Int.natAbs_eq],[Exists, Or, Eq, Int.ofNat, Neg.neg]]
[String.toLower,[String.map, Char.toLower],[String]]
[Or.comm,[Iff.intro, Or.symm],[Iff, Or]]
[«stx_,+»,[Lean.ParserDescr.trailingNode, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.symbol],[Lean.TrailingParserDescr]]
[instOrdInt,[Ord.mk, compareOfLessAndEq],[Ord, Int]]
[Nat.coprime_one_left,[Nat.gcd_one_left],[Nat.coprime, OfNat.ofNat]]
[OptionT.fail,[OptionT.mk, Pure.pure, Option.none],[OptionT]]
[Prod.swap_right_inverse,[Prod.swap_swap],[Function.right_inverse, Prod.swap]]
[HEq.subst,[HEq.ndrecOn],[]]
[UInt64.instSemiringUInt64.proof_7,[of_eq_true, Eq.trans, forall_congr, congrFun, congrArg, Eq, HMul.hMul, UInt64.one_def, UInt64.mul_def, UInt64.mk, OfNat.ofNat, one_mul, UInt64.val, UInt64.mk_val_eq, eq_self, propext, forall_const, UInt64],[Eq, HMul.hMul, OfNat.ofNat]]
[instAddUInt32,[Add.mk, UInt32.add],[Add, UInt32]]
[List.getLast?.proof_1,[],[List.noConfusionType, False, List.cons, List.nil]]
[Nat.mul_lt_mul_of_pos_right,[Nat.mul_lt_mul_of_pos_left, Nat.mul_comm],[LT.lt, HMul.hMul]]
[Array.extract,[Array.ofSubarray, Array.toSubarray],[Array]]
[System.Platform.numBits_eq,[Subtype.property, System.Platform.getNumBits, Unit.unit],[Or, Eq, System.Platform.numBits, OfNat.ofNat]]
[Nat.le_of_dvd,[LE.le, Eq.mpr, Eq.refl, HMul.hMul, False.elim, Eq.mp, Eq.trans, congrArg, LT.lt, OfNat.ofNat, Nat.mul_zero, eq_false_of_decide, Bool.false, Nat.succ, Nat.mul_one],[LE.le]]
[Or.elim,[],[]]
[Nat.dvd_mod_iff,[Eq.mp, Eq.refl, Iff, Dvd.dvd, HMod.hMod, HAdd.hAdd, HMul.hMul, HDiv.hDiv, Nat.mod_add_div],[Iff, Dvd.dvd, HMod.hMod]]
[Function.right_inverse.id,[funext],[Eq, Function.comp, id]]
[Nat.mul_pos,[],[GT.gt, HMul.hMul, OfNat.ofNat]]
[OrOp.noConfusionType,[],[]]
[le_of_eq,[le_refl],[LE.le]]
[iff_iff_eq,[Iff.intro, propext, iff_of_eq],[Iff, Eq]]
[Bool.toUInt64,[ite, Eq, Bool.true, OfNat.ofNat],[UInt64]]
[UInt64.sub_def,[rfl],[Eq, HSub.hSub, UInt64.mk, UInt64.val]]
[ByteSlice.forIn.loop,[WellFounded.fix, Nat.Up.WF, dite, LT.lt, Bind.bind, ByteArray.get!, Pure.pure, HAdd.hAdd, OfNat.ofNat, Nat.Up.next],[]]
[Nat.pred_lt_pred,[Eq.refl, Nat.zero, HEq.refl, LT.lt, Nat.pred, False.elim, rfl, Nat.lt_of_succ_lt_succ],[LT.lt, Nat.pred]]
[Nat.lt_of_lt_of_le,[Nat.le_trans],[LT.lt]]
[Nat.exists_eq_succ_of_ne_zero,[Exists.intro, Nat.pred, Or.resolve_left, Nat.eq_zero_or_eq_succ_pred],[Exists, Eq, Nat.succ]]
[List.mem_singleton_self,[List.mem_cons_self, List.nil],[Mem.mem, List.cons, List.nil]]
[Nat.eq_zero_of_nonpos,[Unit.unit, Eq, OfNat.ofNat, rfl, absurd, Nat.zero_lt_succ],[Eq, OfNat.ofNat]]
[String.foldl,[String.foldlAux, String.bsize, OfNat.ofNat],[]]
[stdNext,[Prod, Nat, StdGen, Prod.mk, Int.toNat, StdGen.mk],[Prod, Nat, StdGen]]
[Subrelation,[],[]]
[Array.findIdxM?,[Bind.bind, ForIn.forIn, MProd.mk, Option.none, ite, Eq, Bool.true, Pure.pure, ForInStep.done, Option.some, PUnit.unit, Unit.unit, Option, Nat, MProd.fst],[Option, Nat]]
[Nat.le_succ_of_pred_le,[Unit.unit, LE.le, Nat.succ, Nat.zero_le, Nat.succ_le_succ],[LE.le, Nat.succ]]
[UInt16.xor,[UInt16.mk, Fin.xor, UInt16.val],[UInt16]]
[min_self,[of_eq_true, Eq.trans, congrFun, congrArg, Eq, if_t_t, LE.le, eq_self],[Eq, min]]
[Set.diff,[setOf, And, Mem.mem, Not],[Set]]
[StateT.run_pure,[rfl],[Eq, StateT.run, Pure.pure, Prod.mk]]
[Subtype.coind_bijective,[And.intro, Subtype.coind_injective, And.left, Subtype.coind_surjective, And.right],[Function.bijective, Subtype.coind]]
[List.countp,[Unit.unit, Nat, OfNat.ofNat, ite, Nat.succ, PProd.fst],[Nat]]
[associative,[Eq],[]]
[Array.binSearchContains,[ite, LT.lt, Array.size, Array.binSearchAux, Option.isSome, Bool.false],[Bool]]
[GroupWithZero.toZero,[],[Zero]]
[FloatArray.data,[],[Array, Float]]
[Nat.sub,[Nat, Nat.pred, PProd.fst],[Nat]]
[Id.pure_eq,[rfl],[Eq, Pure.pure]]
[add_zero,[AddMonoid.add_zero],[Eq, HAdd.hAdd, OfNat.ofNat]]
[Nat.not_le_of_gt,[False, Nat.lt_or_ge, absurd, Nat.lt_trans, Nat.lt_irrefl],[Not, LE.le]]
[PProd.snd,[],[]]
[Nat.one_ne_zero,[],[Ne, OfNat.ofNat]]
[non_contradictory_em,[],[Not, Or]]
[Alternative.failure,[],[]]
[Nat.mul_self_sub_mul_self_eq,[Eq.mpr, Eq.refl, Eq, HSub.hSub, HMul.hMul, HAdd.hAdd, Nat.mul_sub_left_distrib, Nat.right_distrib, Nat.mul_comm, Nat.add_comm, Nat.add_sub_add_left, rfl],[Eq, HSub.hSub, HMul.hMul, HAdd.hAdd]]
[HShiftRight.hShiftRight,[],[]]
[CommGroup.mul_comm,[],[Eq, HMul.hMul]]
[UInt8.instRingUInt8.proof_1,[congrArg, UInt8.mk, Ring.sub_eq_add_neg, UInt8.val],[Eq, UInt8.mk]]
[instHShiftRight,[HShiftRight.mk, ShiftRight.shiftRight],[HShiftRight]]
[zero_add,[AddMonoid.zero_add],[Eq, HAdd.hAdd, OfNat.ofNat]]
[String.decEq.proof_2,[absurd],[False]]
[nsmul_rec,[OfNat.ofNat, HAdd.hAdd, PProd.fst],[]]
[Nat.lt_of_succ_le,[],[LT.lt]]
[UInt32.instRingUInt32,[Ring.mk, UInt32.instRingUInt32.proof_1, UInt32.mk, Ring.gsmul, UInt32.val, UInt32.instRingUInt32.proof_2, UInt32.instRingUInt32.proof_3, UInt32.instRingUInt32.proof_4, UInt32.instRingUInt32.proof_5],[Ring, UInt32]]
[Nat.one_mul,[Nat.mul_one, Nat.mul_comm, OfNat.ofNat],[Eq, HMul.hMul, OfNat.ofNat]]
[String.push,[String, String.mk, HAppend.hAppend, List.cons, List.nil],[String]]
[instToStringInt,[ToString.mk, String, ToString.toString, HAppend.hAppend, Nat.succ],[ToString, Int]]
[Nat.eq_zero_of_add_eq_zero_right,[Eq, OfNat.ofNat, of_eq_true, Eq.trans, implies_congr, congrFun, congrArg, Nat.zero_add, eq_true_of_decide, Eq.refl, Bool.true, implies_true, False.elim, Nat.succ_ne_zero, HAdd.hAdd, Eq.mp, Nat.succ, Nat.succ_add, Nat.add_one],[Eq, OfNat.ofNat]]
[instNonempty.proof_1,[Nonempty.intro, arbitrary],[Nonempty]]
[instDecidableEqList,[List.hasDecEq],[DecidableEq, List]]
[Nat.sub_mul_mod,[Eq.mpr, Eq.refl, Eq, HMod.hMod, HSub.hSub, HMul.hMul, Nat.zero, Nat.mul_zero, OfNat.ofNat, Nat.sub_zero, rfl],[Eq, HMod.hMod, HSub.hSub, HMul.hMul]]
[Subtype.restrict_injective,[Function.injective.comp, Subtype.coe_injective],[Function.injective, Subtype.restrict]]
[Function.uncurry,[Prod.fst, Prod.snd],[]]
[List.length_concat,[rfl, of_eq_true, Eq.trans, congr, congrArg, Eq, List.length_cons, List.concat, Nat.succ, congrFun, HAdd.hAdd, OfNat.ofNat, eq_self, List.length],[Eq, List.length, List.concat, HAdd.hAdd, OfNat.ofNat]]
[Except.noConfusionType,[],[]]
[«term_>_»,[Lean.ParserDescr.trailingNode, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.symbol, Lean.ParserDescr.cat],[Lean.TrailingParserDescr]]
[UInt32.instSemiringUInt32.proof_1,[of_eq_true, Eq.trans, forall_congr, congrFun, congrArg, Eq, HAdd.hAdd, UInt32.zero_def, UInt32.add_def, UInt32.mk, OfNat.ofNat, add_zero, UInt32.val, UInt32.mk_val_eq, eq_self, propext, forall_const, UInt32],[Eq, HAdd.hAdd, OfNat.ofNat]]
[Nat.add_mul_mod_self_left,[Eq.mpr, Eq.refl, Eq, HMod.hMod, HAdd.hAdd, HMul.hMul, Nat.zero, Nat.mul_zero, OfNat.ofNat, Nat.add_zero, rfl, Nat.succ, Nat.mul_succ, Eq.symm, Nat.add_assoc, Nat.add_mod_right],[Eq, HMod.hMod, HAdd.hAdd, HMul.hMul]]
[fix,[fixCore1, arbitrary],[]]
[Mathlib.Tactic.Lint.NamedLinter.noConfusionType,[],[]]
[Pow.noConfusionType,[],[]]
[UInt8.isAlphanum,[or, UInt8.isAlpha, UInt8.isDigit],[Bool]]
[left_cancelative,[Eq],[]]
[Function.bijective_iff_has_inverse,[Iff.intro, Exists.intro, Function.surj_inv, And.right, And.intro, Function.left_inverse_surj_inv, Function.right_inverse_surj_inv, Function.bijective, Function.left_inverse.injective, Function.right_inverse.surjective],[Iff, Function.bijective, Exists, And, Function.left_inverse, Function.right_inverse]]
[Tactic.Cache.get,[Bind.bind, Pure.pure, Lean.MonadEnv.getEnv, Lean.MonadOptions.getOptions, liftM, EIO.asTask, StateRefT'.run, Prod.fst, Task.Priority.default],[]]
[List.mem_cons_of_mem,[Or.inr],[Mem.mem, List.cons]]
[UInt8.decEq.proof_2,[absurd],[False]]
[IsAddRightCancel.add_right_cancel,[],[Eq]]
[Int.mul_one,[Eq.mpr, Eq.refl, Eq, HMul.hMul, OfNat.ofNat, Int.mul_comm, Int.one_mul, rfl],[Eq, HMul.hMul, OfNat.ofNat]]
[System.FilePath.pathSeparators,[ite, Eq, System.Platform.isWindows, Bool.true, List.cons, Char.ofNat, List.nil],[List, Char]]
[Mathlib.Tactic.Conv.find,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.nonReservedSymbol, Bool.false, Lean.ParserDescr.cat, Lean.ParserDescr.symbol, Lean.Parser.Tactic.Conv.convSeq],[Lean.ParserDescr]]
[instLTProd,[LT.mk, Or, LT.lt, Prod.fst, And, Eq, Prod.snd],[LT, Prod]]
[Char.isUpper,[and, Decidable.decide, GE.ge, Char.val, OfNat.ofNat, LE.le],[Bool]]
[String.instReprRange,[Repr.mk, Std.Format.bracket, HAppend.hAppend, Std.Format.nil, Std.Format.text, repr, String.Range.start, Std.Format.line, String.Range.stop],[Repr, String.Range]]
[Substring.toNat?,[ite, Eq, Substring.isNat, Bool.true, Option.some, Substring.foldl, HAdd.hAdd, HMul.hMul, OfNat.ofNat, HSub.hSub, Char.toNat, Char.ofNat, Option.none],[Option, Nat]]
[PSigma.lexAccessible.proof_1,[Acc.intro, PSigma.mk, Eq.symm, eq_of_heq, Eq.refl, HEq.refl, WellFounded.apply],[Acc, PSigma.Lex, PSigma.mk]]
[instLawfulMonadStateRefT',[instLawfulMonadStateRefT'.proof_1],[LawfulMonad, StateRefT']]
[Equiv.leftInv,[],[Function.left_inverse, Equiv.invFun, Equiv.toFun]]
[AddCommMonoid.add_comm,[],[Eq, HAdd.hAdd]]
[Array.modifyM.proof_1,[Eq.symm, Array.size_set, Fin.mk, arbitrary],[Eq, Array.size, Array.set, Fin.mk, arbitrary]]
[System.SearchPath,[List, System.FilePath],[]]
[Set.singleton,[setOf, Eq],[Set]]
[DoResultPR.noConfusionType,[],[]]
[Nat.le_of_lt_succ,[Nat.le_of_succ_le_succ],[LE.le]]
[Nat.div_lt_self,[],[LT.lt, HDiv.hDiv]]
[Nat.anyAux,[Unit.unit, Bool, Bool.false, or, HSub.hSub, Nat.succ, PProd.fst],[Bool]]
[Nat.zero_div,[Eq.trans, Nat.div_eq, OfNat.ofNat, if_neg, Nat.not_le_of_gt],[Eq, HDiv.hDiv, OfNat.ofNat]]
[Nat.pred_succ,[rfl],[Eq, Nat.pred, Nat.succ]]
[Tactic.Ring.State.mk.inj,[And.intro],[And, Eq]]
[List.hasDecidableLt,[Unit.unit, Decidable, LT.lt, Decidable.isFalse, List.hasDecidableLt.proof_1, Decidable.isTrue, List.lt.nil, List.hasDecidableLt.proof_2, List.cons, List.lt.head, List.hasDecidableLt.proof_3, PProd.fst, List.lt.tail, List.hasDecidableLt.proof_4],[Decidable, LT.lt]]
[UInt8.mul_def,[rfl],[Eq, HMul.hMul, UInt8.mk, UInt8.val]]
[Array.get.proof_1,[Fin.isLt],[LT.lt, Fin.val, Array.size]]
[tacticFunext__,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.nonReservedSymbol, Bool.false, Lean.ParserDescr.unary, Lean.ParserDescr.const, Lean.ParserDescr.cat],[Lean.ParserDescr]]
[UInt64.instSemigroupUInt64,[Semigroup.mk, UInt64.instSemigroupUInt64.proof_1],[Semigroup, UInt64]]
[Prod.lexAccessible,[Prod.lexAccessible.proof_1],[Acc, Prod.Lex, Prod.mk]]
[Fin.one_def,[],[Eq, Fin.val, OfNat.ofNat, HMod.hMod]]
[instReprUInt16,[Repr.mk, repr, UInt16.toNat],[Repr, UInt16]]
[«termΣ_,_»,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.symbol, Lean.explicitBinders, Lean.ParserDescr.cat],[Lean.ParserDescr]]
[instMonadReaderOfReaderT,[MonadReaderOf.mk, ReaderT.read],[MonadReaderOf, ReaderT]]
[Nat.lt_of_not_le,[Or.resolve_right, Nat.lt_or_ge],[LT.lt]]
[Fin.mod_eq_of_lt,[Fin.eq_of_val_eq, Eq.mpr, congrFun, congrArg, Eq, Fin.val, Fin.mod_def, Eq.refl, HMod.hMod, Nat.mod_eq_of_lt, Fin.isLt, rfl],[Eq, HMod.hMod]]
[Nat.eq_of_beq_eq_true,[Eq, rfl],[Eq]]
[Setoid.noConfusionType,[],[]]
[le_of_eq_or_lt,[LE.le, le_of_eq, le_of_lt],[LE.le]]
[Fin.instHModFinNatFin,[HMod.mk, Fin.modn],[HMod, Fin, Nat]]
[Nat.add_right_comm,[Eq.mpr, Eq.refl, Eq, HAdd.hAdd, Nat.add_assoc, Nat.add_comm, Eq.symm, rfl],[Eq, HAdd.hAdd]]
[Prod.mk.inj_iff,[Iff.intro, Prod.mk.inj, Eq.mpr, Eq.refl, Eq, Prod.mk, And.left, And.right, rfl],[Iff, Eq, Prod.mk, And]]
[List.reverse,[List.reverseAux, List.nil],[List]]
[outParam,[],[]]
[UInt32.instNegUInt32,[Neg.mk, UInt32.mk, Neg.neg, UInt32.val],[Neg, UInt32]]
[Prod.mk.injEq,[Eq.propIntro, And.intro, Eq.refl, Prod.mk, Eq.symm, eq_of_heq, HEq.refl],[Eq, Prod.mk, And]]
[Array.mkEmpty,[Array.mk, List.nil],[Array]]
[le_or_lt,[Or.symm, lt_or_le],[Or, LE.le, LT.lt]]
[List.length_set,[rfl, Eq.symm, of_eq_true, Eq.trans, congr, congrArg, Eq, List.length_cons, List.set, Nat.succ, eq_self, List.length, Eq.refl],[Eq, List.length, List.set]]
[Command.initializeSimpsProjections?,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.symbol, Lean.ParserDescr.unary, Lean.ParserDescr.const, Command.simpsProj],[Lean.ParserDescr]]
[min_eq_right_of_lt,[min_eq_right, le_of_lt],[Eq, min]]
[Float.noConfusionType,[],[]]
[String.mkIterator,[String.Iterator.mk, OfNat.ofNat],[String.Iterator]]
[List.pairwise_cons,[Iff.intro],[Iff, List.pairwise, List.cons, And]]
[Semiring.add_mul,[],[Eq, HMul.hMul, HAdd.hAdd]]
[instReprSubtype,[Repr.mk, Repr.reprPrec, Subtype.val],[Repr, Subtype]]
[Nat.add_one,[rfl],[Eq, HAdd.hAdd, OfNat.ofNat, Nat.succ]]
[OptionT.instMonadExceptOfOptionT,[MonadExceptOf.mk, OptionT.mk, throwThe, tryCatchThe],[MonadExceptOf, OptionT]]
[Nat.sub_eq_zero_of_le,[Exists.elim, Nat.le.dest, Eq.mpr, Eq.refl, Eq, HSub.hSub, OfNat.ofNat, Eq.symm, HAdd.hAdd, Nat.sub_self_add, rfl],[Eq, HSub.hSub, OfNat.ofNat]]
[lt_trichotomy,[Or.elim, le_total, Decidable.lt_or_eq_of_le, Or.inl, Or.inr, Eq.symm],[Or, LT.lt, Eq]]
[String.Range.start,[],[String.Pos]]
[USize.mod_def,[rfl],[Eq, HMod.hMod, USize.mk, USize.val]]
[Nat.add_self_ne_one,[Eq.refl, OfNat.ofNat, HEq.refl, False],[Ne, HAdd.hAdd, OfNat.ofNat]]
[Nat.add_mul,[Nat.right_distrib],[Eq, HMul.hMul, HAdd.hAdd]]
[«term_/_»,[Lean.ParserDescr.trailingNode, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.symbol, Lean.ParserDescr.cat],[Lean.TrailingParserDescr]]
[String.startsWith,[BEq.beq, Substring.take, String.toSubstring, String.length],[Bool]]
[termDepIfThenElse,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.unary, Lean.ParserDescr.binary, Lean.ParserDescr.symbol, Lean.ParserDescr.const, Lean.ParserDescr.cat],[Lean.ParserDescr]]
[FloatArray.mkEmpty,[FloatArray.mk, List.toArray, List.nil],[FloatArray]]
[Char.noConfusionType,[],[]]
[UInt16.toNat,[Fin.val, UInt16.val],[Nat]]
[false_and,[propext, Iff.intro, And.left, False.elim],[Eq, And, False]]
[Mathlib.Tactic.Ext.tacticExtOrSkip__,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.nonReservedSymbol, Bool.false, Lean.ParserDescr.unary, Lean.ParserDescr.const, Lean.ParserDescr.cat],[Lean.ParserDescr]]
[Nat.allM.loop,[Unit.unit, Bool, Pure.pure, Bool.true, Bind.bind, HSub.hSub, OfNat.ofNat, PProd.fst, Bool.false],[Bool]]
[Nat.sub_le_sub_right_iff,[Iff.intro, Nat.le_of_le_of_sub_le_sub_right, Nat.sub_le_sub_right],[Iff, LE.le, HSub.hSub]]
[Nat.mod_add_mod,[],[Eq, HMod.hMod, HAdd.hAdd]]
[UInt32.div,[UInt32.mk, HDiv.hDiv, UInt32.val],[UInt32]]
[ByteArray.foldl,[Id.run, ByteArray.foldlM],[]]
[Array.size_swap,[],[Eq, Array.size, Array.swap]]
[Mathlib.Tactic.Lint.getDeclsInMathlib,[Bind.bind, Mathlib.Tactic.Lint.getDeclsInCurrModule, Lean.MonadEnv.getEnv, ForIn.forIn, Lean.Core.CoreM, ForInStep, Array, Lean.Name, ite, Eq, Array.getOp, Bool.true, Pure.pure, PUnit.unit, ForInStep.yield],[Lean.Core.CoreM, Array, Lean.Name]]
[Nat.add_succ,[rfl],[Eq, HAdd.hAdd, Nat.succ]]
[instToStringULift,[ToString.mk, ToString.toString, ULift.down],[ToString, ULift]]
[List.firstM,[Unit.unit, Alternative.failure, HOrElse.hOrElse, PProd.fst],[]]
[List.below,[PUnit, PProd],[]]
[Substring.beq,[and, BEq.beq, Substring.bsize, String.substrEq, Substring.str, Substring.startPos],[Bool]]
[exists_eq_right_right,[Iff.intro, And, And.intro, Exists, Eq, Exists.intro, rfl],[Iff, Exists, And, Eq]]
[instAddCommSemigroupFin,[AddCommSemigroup.mk, instAddCommSemigroupFin.proof_1],[AddCommSemigroup, Fin]]
[and_or_distrib_left,[Iff.intro, Or, And, Or.imp, And.intro, And.imp_right, Or.inl, Or.inr],[Iff, And, Or]]
[«term_∩_»,[Lean.ParserDescr.trailingNode, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.symbol, Lean.ParserDescr.cat],[Lean.TrailingParserDescr]]
[Int.instNegInt,[Neg.mk, Int.neg],[Neg, Int]]
[instDecidableDite,[Decidable, dite],[Decidable, dite]]
[Nat.mul_sub_left_distrib,[Eq.mpr, Eq.refl, Eq, HMul.hMul, HSub.hSub, Nat.mul_comm, Nat.mul_sub_right_distrib, rfl],[Eq, HMul.hMul, HSub.hSub]]
[Nat.instDvdNat,[Dvd.mk, Exists, Eq, HMul.hMul],[Dvd, Nat]]
[List.length'_eq_length,[Unit.unit, Eq, List.length', List.length, rfl, of_eq_true, Eq.trans, congr, congrArg, Nat.succ, PProd.fst, List.length_cons, eq_self],[Eq, List.length', List.length]]
[String.Iterator.hasPrev,[Bool, Decidable.decide, GT.gt, OfNat.ofNat],[Bool]]
[right_distributive,[Eq],[]]
[instAndOpUInt32,[AndOp.mk, UInt32.land],[AndOp, UInt32]]
[Nat.toUSize,[USize.ofNat],[USize]]
[Function.curry,[Prod.mk],[]]
[StateT.run_seq,[],[Eq, StateT.run, Seq.seq, Bind.bind, Functor.map, Prod.mk, Prod.fst, Prod.snd]]
[Nat.lt_of_add_lt_add_right,[Nat.lt_of_add_lt_add_left, Eq.mpr, Eq.refl, LT.lt, HAdd.hAdd, Nat.add_comm],[LT.lt]]
[Fin.val_eq_of_eq,[rfl],[Eq, Fin.val]]
[UInt32.instRingUInt32.proof_3,[congrArg, UInt32.mk, Ring.gsmul_succ', UInt32.val],[Eq, UInt32.mk, Ring.gsmul, Int.ofNat, Nat.succ, UInt32.val]]
[mul_pow,[of_eq_true, Eq.trans, congr, congrArg, Eq, HPow.hPow, HMul.hMul, Nat.zero_eq, pow_zero, mul_one, OfNat.ofNat, eq_self, congrFun, mul_comm, Nat.succ, pow_succ', mul_assoc],[Eq, HPow.hPow, HMul.hMul]]
[UInt16.instSemiringUInt16.proof_4,[congrArg, UInt16.mk, AddMonoid.nsmul_succ', UInt16.val],[Eq, UInt16.mk, Semiring.nsmul, Nat.succ, UInt16.val]]
[instDecidableEqProd.proof_2,[absurd],[False]]
[Decidable.imp_or_distrib,[of_eq_true, Eq.trans, congr, congrArg, Iff, propext, Decidable.imp_iff_not_or, Or.left_comm, Or, or_comm, Not, or_self, iff_self],[Iff, Or]]
[Char.val,[],[UInt32]]
[instHMul,[HMul.mk, Mul.mul],[HMul]]
[ExceptT.run_bind_lift,[of_eq_true, Eq.trans, congrFun, congrArg, Eq, Bind.bind, map_eq_pure_bind, Except.ok, Except, Pure.pure, Except.error, LawfulMonad.bind_assoc, funext, LawfulMonad.pure_bind, eq_self],[Eq, ExceptT.run, Bind.bind, ExceptT.lift]]
[List.decidableBall.proof_1,[False.elim, Iff.mp, List.mem_nil],[]]
[Nat.beq,[Unit.unit, Bool, Bool.true, Bool.false, PProd.fst],[Bool]]
[not_iff_comm,[Decidable.not_iff_comm],[Iff, Not]]
[of_not_not,[by_contra],[]]
[FloatArray.forIn.loop.proof_1,[Nat.lt_of_le_of_lt, Nat.sub_le, HSub.hSub, FloatArray.size, OfNat.ofNat, Nat.sub_lt, Nat.zero_lt_of_lt, Nat.lt_of_lt_of_le, Nat.lt_succ_self, of_decide_eq_true, Eq.refl, Bool.true],[LT.lt, HSub.hSub, FloatArray.size, OfNat.ofNat]]
[ByteSliceT.mk.sizeOf_spec,[Eq.refl, HAdd.hAdd, OfNat.ofNat, SizeOf.sizeOf],[Eq, SizeOf.sizeOf, ByteSliceT.mk, HAdd.hAdd, OfNat.ofNat]]
[Tactic.Ring.horner_add_horner_lt,[Eq.mpr, Eq.refl, Eq, HAdd.hAdd, Tactic.Ring.horner, Eq.symm, OfNat.ofNat, of_eq_true, Eq.trans, congr, congrArg, add_comm, HMul.hMul, HPow.hPow, add_assoc, congrFun, add_zero, add_mul, mul_assoc, pow_add, eq_self],[Eq, HAdd.hAdd, Tactic.Ring.horner]]
[Nat.gcd_dvd_gcd_of_dvd_right,[Nat.dvd_gcd, Nat.gcd_dvd_left, Nat.dvd_trans, Nat.gcd_dvd_right],[Dvd.dvd, Nat.gcd]]
[Id.hasBind,[inferInstance],[Bind, Id]]
[namedPattern,[],[]]
[Function.injective.comp,[],[Function.injective, Function.comp]]
[UInt16.instSemiringUInt16.proof_1,[of_eq_true, Eq.trans, forall_congr, congrFun, congrArg, Eq, HAdd.hAdd, UInt16.zero_def, UInt16.add_def, UInt16.mk, OfNat.ofNat, add_zero, UInt16.val, UInt16.mk_val_eq, eq_self, propext, forall_const, UInt16],[Eq, HAdd.hAdd, OfNat.ofNat]]
[Function.injective2.right,[And.right],[Eq]]
[String.Iterator.forward,[String.Iterator, PProd.fst, String.Iterator.next],[String.Iterator]]
[Nat.lt_succ_self,[Nat.lt.base],[LT.lt, Nat.succ]]
[Nat.add_one_ne_zero,[Nat.succ_ne_zero],[Ne, HAdd.hAdd, OfNat.ofNat]]
[inv_mul_self,[mul_left_inv],[Eq, HMul.hMul, Inv.inv, OfNat.ofNat]]
[Quotient.inductionOn₂,[Quotient.ind],[]]
[USize.instNegUSize,[Neg.mk, USize.mk, Neg.neg, USize.val],[Neg, USize]]
[«term_≥_»,[Lean.ParserDescr.trailingNode, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.symbol, Lean.ParserDescr.cat],[Lean.TrailingParserDescr]]
[Sdiff.noConfusionType,[],[]]
[Monoid.toSemigroup,[],[Semigroup]]
[Nat.toFloat,[Float.ofNat],[Float]]
[Fin.checkedAdd,[Option, Fin, Fin.overflowingAdd, Option.none, Option.some],[Option, Fin]]
[plift.up.sizeOf_spec,[Eq.refl, HAdd.hAdd, OfNat.ofNat, SizeOf.sizeOf],[Eq, SizeOf.sizeOf, plift.up, HAdd.hAdd, OfNat.ofNat]]
[String.utf8ByteSize,[Nat, PProd.fst, HAdd.hAdd, String.csize, OfNat.ofNat],[Nat]]
[FloatArray.foldl,[Id.run, FloatArray.foldlM],[]]
[Task.bind,[Task.pure, Task.get],[Task]]
[UInt64.instSemiringUInt64.proof_2,[of_eq_true, Eq.trans, forall_congr, congrFun, congrArg, Eq, HAdd.hAdd, UInt64.zero_def, UInt64.add_def, UInt64.mk, OfNat.ofNat, zero_add, UInt64.val, UInt64.mk_val_eq, eq_self, propext, forall_const, UInt64],[Eq, HAdd.hAdd, OfNat.ofNat]]
[UInt8.toUInt32,[Nat.toUInt32, UInt8.toNat],[UInt32]]
[monadFunctorRefl,[MonadFunctorT.mk],[MonadFunctorT]]
[Tactic.Ring.horner_atom,[of_eq_true, Eq.trans, congrArg, Eq, congrFun, HAdd.hAdd, HMul.hMul, OfNat.ofNat, pow_one, one_mul, add_zero, eq_self],[Eq, Tactic.Ring.horner, OfNat.ofNat]]
[Semigroup.toMul,[],[Mul]]
[rfl,[rfl.proof_1],[Eq]]
[ByteArray.mk.inj,[],[Eq]]
[Int.add_left_comm,[Eq.mpr, Eq.refl, Eq, HAdd.hAdd, Eq.symm, Int.add_assoc, Int.add_comm, rfl],[Eq, HAdd.hAdd]]
[instInhabitedEST,[inferInstanceAs, Inhabited, EStateM],[Inhabited, EST]]
[Nat.gcd_mul_dvd_mul_gcd,[Dvd.dvd, Nat.gcd, HMul.hMul, Nat.prod_dvd_and_dvd_of_dvd_prod, Nat.gcd_dvd_right],[Dvd.dvd, Nat.gcd, HMul.hMul]]
[HAndThen.hAndThen,[],[]]
[List.decidableBexi.proof_4,[Exists, And, Mem.mem, List.cons],[Exists, And, Mem.mem, List.cons]]
[Nat.dvd_mul_left,[Exists.intro, Nat.mul_comm],[Dvd.dvd, HMul.hMul]]
[List.mem_of_mem_remove,[And.left, Eq.mp, Eq.refl, Mem.mem, List.remove, propext, List.mem_remove_iff],[Mem.mem]]
[let_value_heq,[Eq.mpr, Eq.refl, HEq, HEq.rfl],[HEq]]
[ByteArray.forIn,[ByteArray.size, Nat.le_refl, ByteArray.forIn.loop],[]]
[Fin.shiftLeft,[Fin, Fin.mk, HMod.hMod, HShiftLeft.hShiftLeft, Fin.shiftLeft.proof_1],[Fin]]
[«term_≤_»,[Lean.ParserDescr.trailingNode, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.symbol, Lean.ParserDescr.cat],[Lean.TrailingParserDescr]]
[Nat.gcd_mul_left_left,[Nat.dvd_antisymm, Nat.gcd_dvd_right, HMul.hMul, Nat.dvd_gcd, Nat.dvd_mul_left, Nat.dvd_refl],[Eq, Nat.gcd, HMul.hMul]]
[List.foldlM,[Pure.pure, Bind.bind, PProd.fst],[]]
[MonadControl.restoreM,[],[]]
[Nat.mul_div_mul,[Eq.mpr, Eq.refl, Eq, HDiv.hDiv, HMul.hMul, Eq.symm, Nat.div_div_eq_div_mul, Nat.mul_div_cancel_left, rfl],[Eq, HDiv.hDiv, HMul.hMul]]
[Nat.anyM,[Nat.anyM.loop],[Bool]]
[List.bex_cons,[Iff.intro, Or, Exists, And, Mem.mem, Eq.mp, propext, List.mem_cons_iff, Or.inl, Eq.refl, Eq.symm, Or.inr, Exists.intro, And.intro, Or.elim, List.mem_cons_self, List.cons, List.mem_cons_of_mem],[Iff, Exists, And, Mem.mem, List.cons, Or]]
[iff_iff_not_or_and_or_not,[Decidable.iff_iff_not_or_and_or_not],[Iff, And, Or, Not]]
[self_eq_add_right,[Eq.mpr, Eq.refl, Iff, Eq, HAdd.hAdd, OfNat.ofNat, Eq.symm, propext, add_left_cancel_iff, add_zero, eq_comm, Iff.rfl],[Iff, Eq, HAdd.hAdd, OfNat.ofNat]]
[Function.update_noteq,[dif_neg],[Eq, Function.update]]
[ge_trans,[le_trans],[GE.ge]]
[PSum.inl.inj,[],[Eq]]
[List.length_eq_one,[Iff.intro, Exists, Eq, List.cons, List.nil, Exists.intro, rfl, Eq.mp, Eq.trans, congrFun, congrArg, List.length_cons, Nat.succ, OfNat.ofNat, Nat.succ.injEq, HAdd.hAdd, List.length, Eq.mpr, Eq.refl, of_eq_true, List.length_singleton, eq_true_of_decide, Bool.true],[Iff, Eq, List.length, OfNat.ofNat, Exists, List.cons, List.nil]]
[UInt8.isDigit,[and, Decidable.decide, GE.ge, OfNat.ofNat, LE.le],[Bool]]
[instMonadWithReader,[MonadWithReader.mk, withTheReader],[MonadWithReader]]
[List.noConfusionType,[],[]]
[exists_imp_distrib,[Iff.intro, Exists.intro],[Iff]]
[exists₂_congr,[exists_congr],[Iff, Exists]]
[floatDecLe,[Float.decLe],[Decidable, LE.le]]
[Tactic.Ring.mkAppCS,[Bind.bind, MonadReader.read, Pure.pure, Lean.mkAppN, Lean.mkConst, List.cons, Tactic.Ring.Cache.univ, List.nil, HAppend.hAppend, List.toArray, Tactic.Ring.Cache.α, Tactic.Ring.Cache.cs],[Tactic.Ring.RingM, Lean.Expr]]
[Nat.mul_succ,[rfl],[Eq, HMul.hMul, Nat.succ, HAdd.hAdd]]
[System.FilePath.isCaseInsensitive,[or, System.Platform.isWindows, System.Platform.isOSX],[Bool]]
[congr_arg,[congrArg],[Eq]]
[DivInvMonoid.gpow_zero',[],[Eq, DivInvMonoid.gpow, OfNat.ofNat]]
[Nat.instXorNat,[Xor.mk, Nat.xor],[Xor, Nat]]
[Inhabited.noConfusionType,[],[]]
[Quotient.recOnSubsingleton₂.proof_2,[],[Subsingleton, Quotient.mk]]
[and_iff_right_of_imp,[Iff.intro, And.right, And.intro],[Iff, And]]
[instHashableUSize,[Hashable.mk, USize.toUInt64],[Hashable, USize]]
[Fin.mod.proof_1,[LT.lt, HMod.hMod, Nat.mod_lt],[LT.lt, HMod.hMod]]
[Nat.gcd_zero_left,[rfl],[Eq, Nat.gcd, OfNat.ofNat]]
[instReprId_1,[inferInstanceAs, Repr],[Repr, Id]]
[Tactic.DeclCache.mk,[Bind.bind, Tactic.Cache.mk, Lean.MonadOptions.getOptions, Lean.profileitM, Lean.Exception, Pure.pure, Lean.MonadEnv.getEnv, ForIn.forIn, Lean.Meta.MetaM, ForInStep, PUnit.unit, ForInStep.yield, Prod.mk],[IO, Tactic.DeclCache]]
[EStateM.dummyRestore,[],[]]
[Nat.xor,[Nat.bitwise, bne],[Nat]]
[Subtype.equiv_iff,[Iff.rfl],[Iff, HasEquiv.Equiv, Subtype.val]]
[NonScalar.val,[],[Nat]]
[imp_intro,[],[]]
[Add.noConfusionType,[],[]]
[instHModUInt8NatUInt8,[HMod.mk, UInt8.modn],[HMod, UInt8, Nat]]
[Nat.lor,[Nat.bitwise, or],[Nat]]
[List.not_mem_append,[mt, Iff.mp, List.mem_append, Iff.mpr, not_or, Mem.mem, And.intro],[Not, Mem.mem, HAppend.hAppend]]
[Squash,[Quot, True],[]]
[instSubsingletonForall.proof_1,[Subsingleton.intro, funext, Subsingleton.elim],[Subsingleton]]
[Int.quot,[Int, Int.ofNat, HDiv.hDiv, Neg.neg, Nat.succ],[Int]]
[Nat.sub_self,[Unit.unit, Eq, HSub.hSub, OfNat.ofNat, Eq.mpr, Eq.refl, Nat.sub_zero, rfl, Nat.succ, Nat.succ_sub_succ, PProd.fst],[Eq, HSub.hSub, OfNat.ofNat]]
[List.instSubsetList,[Subset.mk, List.subset],[Subset, List]]
[EStateM.instMonadExceptOfEStateM,[MonadExceptOf.mk, EStateM.throw, EStateM.tryCatch],[MonadExceptOf, EStateM]]
[Nat.succ.inj,[],[Eq]]
[unsafeIO,[unsafeEIO],[Except, IO.Error]]
[Function.update_comm,[funext, Decidable.em, Eq, Eq.mpr, Eq.refl, dite, Eq.symm, dif_pos, Eq.trans, dif_neg, rfl],[Eq, Function.update]]
[List.mem_map_of_mem,[Mem.mem, List.map, List.nil, Eq.refl, Eq.mpr, List.cons, Or.inl, rfl, Eq.symm, Or.inr],[Mem.mem, List.map]]
[Array.anyM,[dite, LE.le, Array.size, Array.anyM.proof_1],[Bool]]
[Prod.map_comp_map,[funext, of_eq_true, Eq.trans, congr, congrArg, Eq, Function.comp_apply, Prod.map, prod_map, Prod.mk, Prod.fst, Prod.snd, Function.comp, eq_self],[Eq, Function.comp, Prod.map]]
[Array.eraseIdx',[Array.eraseIdxSzAux, HAdd.hAdd, Fin.val, OfNat.ofNat, Array.eraseIdx'.proof_1],[Subtype, Eq, Array.size, HSub.hSub, OfNat.ofNat]]
[Array.binInsertM,[ite, Eq, Array.isEmpty, Bool.true, Bind.bind, Unit.unit, Pure.pure, Array.push, Array.get!, OfNat.ofNat, Array.insertAt, not, Array.modifyM, Array.back, HSub.hSub, Array.size],[Array]]
[List.decidableBexi,[Unit.unit, Decidable, Exists, And, Mem.mem, Decidable.isFalse, List.decidableBexi.proof_1, List.cons, Decidable.isTrue, List.decidableBexi.proof_2, PProd.fst, List.decidableBexi.proof_3, List.decidableBexi.proof_4],[Decidable, Exists, And, Mem.mem]]
[instComplementUInt16,[Complement.mk, UInt16.complement],[Complement, UInt16]]
[«term_<&&>_»,[Lean.ParserDescr.trailingNode, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.symbol, Lean.ParserDescr.cat],[Lean.TrailingParserDescr]]
[Set.singletonUnexpander,[ite, Eq, Lean.Syntax.isOfKind, Lean.Name.mkStr, Lean.Name.anonymous, Bool.true, Lean.Syntax.matchesIdent, Lean.Syntax.matchesNull, OfNat.ofNat, Bind.bind, Lean.MonadRef.mkInfoFromRefPos, Lean.MonadQuotation.getCurrMacroScope, Lean.MonadQuotation.getMainModule, Pure.pure, Lean.Syntax.node, Lean.SourceInfo.none, List.toArray, List.cons, Lean.Syntax.atom, List.nil, MonadExcept.throw, Unit.unit],[Lean.PrettyPrinter.Unexpander]]
[AddGroup.add_left_neg,[],[Eq, HAdd.hAdd, Neg.neg, OfNat.ofNat]]
[List.foldl,[PProd.fst],[]]
[ByteSliceT.mk.injEq,[Eq.propIntro, And.intro, Eq.refl, ByteSliceT.mk, Eq.symm, eq_of_heq, HEq.refl],[Eq, ByteSliceT.mk, And]]
[«term_∈_»,[Lean.ParserDescr.trailingNode, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.symbol, Lean.ParserDescr.cat],[Lean.TrailingParserDescr]]
[AddCommGroup.toAddGroup,[],[AddGroup]]
[Nat.lt_add_of_pos_right,[Nat.add_lt_add_left],[LT.lt, HAdd.hAdd]]
[Array.appendCore,[Array.size, OfNat.ofNat, Array.appendCore.loop],[Array]]
[Prod.fst,[],[]]
[instSubsingletonEmpty.proof_1,[Subsingleton.intro, Empty.elim],[Subsingleton, Empty]]
[Array.range,[Nat.fold, flip, Array.push, List.toArray, List.nil],[Array, Nat]]
[instDecidableEq,[Decidable, Eq, Decidable.isTrue, propext, Decidable.isFalse, instDecidableEq.proof_1],[Decidable, Eq]]
[PointedType.val,[],[PointedType.type]]
[instSemiringFin.proof_14,[of_eq_true, Eq.trans, congrArg, Eq, Fin.mk, HMod.hMod, HAdd.hAdd, OfNat.ofNat, Nat.mod_lt, Fin.size_positive', Fin.add_def, Fin.mk.injEq, Fin.val, Fin.size_positive, congrFun, Fin.one_def, Nat.add_mod_mod, Nat.mod_add_mod, eq_self],[Eq, Fin.mk, HMod.hMod, HAdd.hAdd, OfNat.ofNat, Nat.mod_lt, Fin.size_positive']]
[Fin.add.proof_1,[LT.lt, HMod.hMod, Nat.mod_lt],[LT.lt, HMod.hMod, HAdd.hAdd]]
[StateT.modifyGet,[Pure.pure],[StateT]]
[List.insert,[ite, Mem.mem, List.cons],[List]]
[Except.map_id,[funext, Eq.mpr, congr, congrArg, Eq, Except, Except.error, Except.ok, id_eq, rfl, Eq.symm, Eq.refl],[Eq, Except.map, id]]
[UInt8.mk_val_eq,[Eq, UInt8.mk, UInt8.val, rfl],[Eq, UInt8.mk, UInt8.val]]
[List.rotateLeft,[ite, LE.le, OfNat.ofNat, HAppend.hAppend],[List]]
[Equiv.to_fun_as_coe,[rfl],[Eq, Equiv.toFun]]
[And.symm,[And, And.intro],[And]]
[Semigroup.mul_assoc,[],[Eq, HMul.hMul]]
[«term_+_»,[Lean.ParserDescr.trailingNode, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.symbol, Lean.ParserDescr.cat],[Lean.TrailingParserDescr]]
[ExceptCpsT.instMonadExceptOfExceptCpsT,[MonadExceptOf.mk],[MonadExceptOf, ExceptCpsT]]
[optional,[HOrElse.hOrElse, Functor.map, Option.some, Pure.pure, Option.none],[Option]]
[ite_id,[rfl, Eq.symm, Eq.refl],[Eq, ite]]
[bfix1,[PProd.fst],[]]
[noConfusionEnum.proof_1,[Eq.symm, if_pos],[Eq, ite]]
[List.mapTRAux,[List, List.reverse, PProd.fst, List.cons],[List]]
[Function.update_injective,[],[Function.injective, Function.update]]
[UInt32.size,[OfNat.ofNat],[Nat]]
[Option.instFunctorOption,[Functor.mk, Option.map],[Functor, Option]]
[List.hasDecEq.proof_1,[rfl],[Eq, List.nil]]
[instDecidableLt_4,[USize.decLt],[Decidable, LT.lt]]
[USize.complement,[HSub.hSub, OfNat.ofNat, HAdd.hAdd],[USize]]
[tacticRepeat'_,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.nonReservedSymbol, Bool.false, Lean.ParserDescr.parser],[Lean.ParserDescr]]
[List.Perm.refl,[Unit.unit, List.Perm, List.Perm.nil, List.Perm.cons, PProd.fst],[List.Perm]]
[Nat.lcm,[HDiv.hDiv, HMul.hMul, Nat.gcd],[Nat]]
[String.leftpad_prefix,[String.isPrefix, String.repeat, HSub.hSub, String.length, String.leftpad, of_eq_true, eq_true, List.leftpad_prefix],[String.isPrefix, String.repeat, HSub.hSub, String.length, String.leftpad]]
[String.leftpad_suffix,[String.isSuffix, String.leftpad, of_eq_true, eq_true, List.leftpad_suffix],[String.isSuffix, String.leftpad]]
[List.erasep_cons_of_pos,[of_eq_true, Eq.trans, congrFun, congrArg, Eq, List.erasep_cons, ite_congr, eq_true, Eq.refl, List.cons, List.erasep, ite_true, eq_self],[Eq, List.erasep, List.cons]]
[Nat.mod_two_eq_zero_or_one,[Or, Eq, OfNat.ofNat, HMod.hMod, Nat.mod_lt, of_eq_true, eq_true_of_decide, Eq.refl, Bool.true, Or.inl, rfl, Or.inr, absurd, Nat.not_lt_zero, Nat.lt_of_succ_lt_succ],[Or, Eq, HMod.hMod, OfNat.ofNat]]
[Int.instModInt,[Mod.mk, Int.mod],[Mod, Int]]
[Nat.mul_lt_mul_of_pos_left,[Nat.lt_of_lt_of_le, Nat.add_lt_add_left, Nat.mul, Nat.mul_le_mul_left, Nat.succ_le_of_lt, Nat.mul_succ],[LT.lt, HMul.hMul]]
[UInt64.instSemiringUInt64.proof_11,[Eq.mpr, congr, congrArg, Eq, Eq.trans, HMul.hMul, UInt64.add_def, UInt64.mul_def, UInt64.mk, HAdd.hAdd, UInt64.val, UInt64.eq_of_val_eq, Semiring.mul_add],[Eq, HMul.hMul, HAdd.hAdd]]
[instSubUInt8,[Sub.mk, UInt8.sub],[Sub, UInt8]]
[variables,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.symbol, Lean.ParserDescr.unary, Lean.ParserDescr.const],[Lean.ParserDescr]]
[iff_true_intro,[Iff.intro, True.intro],[Iff, True]]
[Nat.coprime.gcd_right,[Nat.coprime.coprime_dvd_right, Nat.gcd_dvd_right],[Nat.coprime, Nat.gcd]]
[Function.extend_comp,[funext, Function.extend_apply],[Eq, Function.comp, Function.extend]]
[Bool.false_or,[rfl, Eq.symm, Eq.refl],[Eq, or, Bool.false]]
[unexpandSorryAx,[ite, Eq, Lean.Syntax.isOfKind, Lean.Name.mkStr, Lean.Name.anonymous, Bool.true, Lean.Syntax.matchesNull, OfNat.ofNat, Bind.bind, Lean.MonadRef.mkInfoFromRefPos, Lean.MonadQuotation.getCurrMacroScope, Lean.MonadQuotation.getMainModule, Pure.pure, Lean.Syntax.node, Lean.SourceInfo.none, List.toArray, List.cons, Lean.Syntax.atom, List.nil, MonadExcept.throw, Unit.unit],[Lean.PrettyPrinter.Unexpander]]
[instToStreamArraySubarray,[ToStream.mk, Array.toSubarray, OfNat.ofNat, Array.size],[ToStream, Array, Subarray]]
[PSigma.lexNdepWf.proof_1,[WellFounded.intro, Acc, PSigma.lexNdep, PSigma.lexAccessible, WellFounded.apply],[WellFounded, PSigma.lexNdep]]
[let_body_eq,[Eq.mpr, Eq.refl, Eq, rfl],[Eq]]
[coeBase,[CoeTC.mk, coeB],[CoeTC]]
[Nat.foldRevM.loop,[Pure.pure, Bind.bind, PProd.fst],[]]
[FloatArray.get,[Float, Array.get],[Float]]
[instMulUSize,[Mul.mk, USize.mul],[Mul, USize]]
[unexpandProdMk,[ite, Eq, Lean.Syntax.isOfKind, Lean.Name.mkStr, Lean.Name.anonymous, Bool.true, Lean.Syntax.matchesNull, OfNat.ofNat, Bind.bind, Lean.MonadRef.mkInfoFromRefPos, Lean.MonadQuotation.getCurrMacroScope, Lean.MonadQuotation.getMainModule, Pure.pure, Lean.Syntax.node, Lean.SourceInfo.none, List.toArray, List.cons, Lean.Syntax.atom, Array.append, List.nil, Lean.Syntax.SepArray.elemsAndSeps, MonadExcept.throw, Unit.unit],[Lean.PrettyPrinter.Unexpander]]
[Int.add_comm,[Eq, HAdd.hAdd, of_eq_true, Eq.trans, congr, congrArg, Int.ofNat_add_ofNat, Int.ofNat, Nat.add_comm, eq_self, rfl, Int.negSucc_ofNat_add_negSucc_ofNat, Int.negSucc, Nat.succ],[Eq, HAdd.hAdd]]
[instMulUInt64,[Mul.mk, UInt64.mul],[Mul, UInt64]]
[Iff.elim_right,[Iff.elim_right.proof_1],[]]
[le_trans,[Preorder.le_trans],[LE.le]]
[«termExists_,_»,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.symbol, Lean.explicitBinders, Lean.ParserDescr.cat],[Lean.ParserDescr]]
[UInt16.instNumericUInt16,[Numeric.mk, UInt16.mk, Numeric.ofNat],[Numeric, UInt16]]
[FloatSpec.le,[],[]]
[List.filter,[List.filterAux, List.nil],[List]]
[instReprList,[Repr.mk, Std.Format, List.cons, Std.Format.text, Std.Format.bracket, Std.Format.joinSep, HAppend.hAppend, Std.Format.line],[Repr, List]]
[neg_eq_of_add_eq_zero,[left_neg_eq_right_neg, neg_add_self],[Eq, Neg.neg]]
[Subtype.eq,[Eq.symm, eq_of_heq, Eq.refl, Subtype.val, Subtype.mk, HEq.refl, Eq, rfl],[Eq]]
[List.decidableMem.proof_1,[Or.inl],[Or, Eq, List.mem]]
[«term_≠_»,[Lean.ParserDescr.trailingNode, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.symbol, Lean.ParserDescr.cat],[Lean.TrailingParserDescr]]
[ULift.noConfusionType,[],[]]
[Option.all,[Unit.unit, Bool, Bool.true],[Bool]]
[List.ne_and_not_mem_of_not_mem_cons,[And.intro, List.ne_of_not_mem_cons, List.not_mem_of_not_mem_cons],[And, Ne, Not, Mem.mem]]
[System.Platform.isOSX,[System.Platform.getIsOSX, Unit.unit],[Bool]]
[eq_or_lt_of_not_lt,[dite, Eq, Or.inl, Or.inr, lt_of_not_ge, lt_of_le_of_ne],[Or, Eq, LT.lt]]
[UInt64.eq_of_val_eq,[Eq, congrArg, UInt64.mk],[Eq]]
[Quot.liftIndepPr1,[Quot.ind, rfl],[Eq, PSigma.fst, Quot.lift, Quot.indep, Quot.indepCoherent]]
[USize.size_positive,[usize_size_gt_zero],[LT.lt, OfNat.ofNat, USize.size]]
[List.length_eq_lenghtTR,[funext, of_eq_true, Eq.trans, congrArg, Eq, List.length, Eq.symm, List.length_add_eq_lengthTRAux, OfNat.ofNat, Nat.add_zero, eq_self],[Eq, List.length, List.lengthTR]]
[Decidable.not_not_iff,[Iff.intro, Decidable.of_not_not, not_not_intro],[Iff, Not]]
[or_iff_right_iff_imp,[Eq.mpr, Eq.refl, Iff, Or, propext, or_comm, or_iff_left_iff_imp, Iff.rfl],[Iff, Or]]
[UInt64.decEq.proof_1,[rfl],[Eq, UInt64.mk]]
[Monoid.npow_succ',[],[Eq, Monoid.npow, Nat.succ, HMul.hMul]]
[Nat.min_eq_left,[of_eq_true, Eq.trans, congrFun, congrArg, Eq, ite_congr, eq_true, Eq.refl, ite_true, eq_self],[Eq, Nat.min]]
[Mathlib.Tactic.Conv.convTry_,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.nonReservedSymbol, Bool.false, Lean.Parser.Tactic.Conv.convSeq],[Lean.ParserDescr]]
[decEq,[],[Decidable, Eq]]
[UInt8.mod,[UInt8.mk, HMod.hMod, UInt8.val],[UInt8]]
[Function.comp_apply,[rfl],[Eq, Function.comp]]
[FloatArray.forInUnsafe.loop,[ite, LT.lt, Bind.bind, Pure.pure, FloatArray.forInUnsafe.loop, HAdd.hAdd, OfNat.ofNat],[]]
[Fin.add_def,[Eq, HAdd.hAdd, Fin.mk, HMod.hMod, Fin.val, Nat.mod_lt, Fin.size_positive, rfl],[Eq, HAdd.hAdd, Fin.mk, HMod.hMod, Fin.val, Nat.mod_lt, Fin.size_positive]]
[String.codepointPosToUtf16PosFrom,[Nat, PProd.fst, String.next, HAdd.hAdd, UInt32.toNat, Char.utf16Size, String.get, OfNat.ofNat],[Nat]]
[List.hasDecEq.proof_3,[],[List.noConfusionType, False, List.nil, List.cons]]
[List.filterRevM,[List.filterAuxM, List.reverse, List.nil],[List]]
[Nat.add_mod_mod,[Eq.mpr, Eq.refl, Eq, HMod.hMod, HAdd.hAdd, Nat.add_comm, Nat.mod_add_mod, rfl],[Eq, HMod.hMod, HAdd.hAdd]]
[MonadFunctor.monadMap,[],[]]
[UInt16.instSemiringUInt16.proof_6,[of_eq_true, Eq.trans, forall_congr, congr, congrArg, Eq, HMul.hMul, UInt16.zero_def, UInt16.mul_def, UInt16.mk, OfNat.ofNat, MonoidWithZero.mul_zero, UInt16.val, eq_true_of_decide, Eq.refl, Bool.true, propext, forall_const, UInt16],[Eq, HMul.hMul, OfNat.ofNat]]
[UInt64.div,[UInt64.mk, HDiv.hDiv, UInt64.val],[UInt64]]
[List.length_eq_zero,[Iff.intro, List.eq_nil_of_length_eq_zero, Eq.mpr, Eq.refl, Eq, List.length, OfNat.ofNat, rfl],[Iff, Eq, List.length, OfNat.ofNat, List.nil]]
[Nat.le_of_add_le_add_right,[Eq.mpr, Eq.refl, LE.le, Nat.add_comm, Nat.le_of_add_le_add_left],[LE.le]]
[StateT.instMonadFunctorStateT,[MonadFunctor.mk, Prod],[MonadFunctor, StateT]]
[System.FilePath.extSeparator,[Char.ofNat],[Char]]
[ReaderT.pure,[Pure.pure],[ReaderT]]
[MonadExcept.throw,[],[]]
[exists_eq_right_right',[Iff.intro, And, And.intro, Eq.symm, Exists, Eq, Exists.intro, rfl],[Iff, Exists, And, Eq]]
[Mathlib.Tactic.Lint.instDecidableEqLintVerbosity.proof_2,[absurd, Eq.refl, Mathlib.Tactic.Lint.LintVerbosity.toCtorIdx],[False]]
[String.str,[String.push],[String]]
[List.iota,[Unit.unit, Nat.succ, List, Nat, List.nil, List.cons, PProd.fst],[List, Nat]]
[Fin.underflowingSub,[Prod.mk, Decidable.decide, LT.lt, Fin.val, HSub.hSub],[Prod, Bool, Fin]]
[add_add_add_comm,[of_eq_true, Eq.trans, congr, congrArg, Eq, add_left_comm, HAdd.hAdd, add_assoc, eq_self],[Eq, HAdd.hAdd]]
[UInt64.decEq,[Decidable, Eq, dite, Decidable.isTrue, UInt64.decEq.proof_1, Decidable.isFalse, UInt64.decEq.proof_2],[Decidable, Eq]]
[«term_<->_»,[Lean.ParserDescr.trailingNode, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.symbol, Lean.ParserDescr.cat],[Lean.TrailingParserDescr]]
[let_val_congr,[rfl],[Eq]]
[gpow_rec,[npow_rec, Inv.inv, Nat.succ],[]]
[MonadExcept.tryCatch,[],[]]
[UInt64.complement,[HSub.hSub, OfNat.ofNat, HAdd.hAdd],[UInt64]]
[instInhabitedArrow,[Inhabited.mk, arbitrary],[Inhabited]]
[instToStringId_1,[inferInstanceAs, ToString],[ToString, Id]]
[Char.utf8Size.proof_5,[of_decide_eq_true, Eq.refl, Bool.true],[LT.lt, OfNat.ofNat, UInt32.size]]
[Nat.mul_div_assoc,[Eq, HDiv.hDiv, HMul.hMul, Nat.eq_zero_or_pos, Eq.mpr, Eq.refl, OfNat.ofNat, Nat.div_zero, Nat.mul_zero, rfl],[Eq, HDiv.hDiv, HMul.hMul]]
[List.forall_mem_nil,[Eq.refl],[]]
[List.spanAux,[Prod, List, Prod.mk, List.reverse, List.nil, Unit.unit, PProd.fst, List.cons],[Prod, List]]
[Array.binInsert,[Id.run, Array.binInsertM],[Array]]
[List.exists_erase_eq,[Eq.symm, eq_of_heq, Eq.refl, HEq.refl, Exists, And, Not, Mem.mem, Eq, HAppend.hAppend, List.cons, List.erase, List.exists_of_erasep, rfl, Eq.mpr, List.erase_eq_erasep, Exists.intro, And.intro],[Exists, And, Not, Mem.mem, Eq, HAppend.hAppend, List.cons, List.erase]]
[instToStringUInt8,[ToString.mk, ToString.toString, UInt8.toNat],[ToString, UInt8]]
[Int.subNatNat_of_le,[Int.subNatNat_of_sub_eq_zero, Nat.sub_eq_zero_of_le],[Eq, Int.subNatNat, Int.ofNat, HSub.hSub]]
[Mathlib.Tactic.Lint.simpNF,[Mathlib.Tactic.Lint.Linter.mk, Bind.bind, Mathlib.Tactic.Lint.isSimpLemma, ite, Eq, Bool.true, Pure.pure, PUnit.unit, Option.none, Function.comp, Lean.MessageData.ofFormat, Std.ToFormat.format],[Mathlib.Tactic.Lint.Linter]]
[instAddCommSemigroup,[AddCommSemigroup.mk, AddCommMonoid.add_comm],[AddCommSemigroup]]
[Nat.min_le_left,[Decidable.em, LE.le, Eq.mpr, congrFun, congrArg, Eq.trans, ite_congr, eq_true, Eq.refl, ite_true, Nat.le_refl, Eq.symm, eq_false, ite_false, Nat.le_of_not_le],[LE.le, Nat.min]]
[Array.modifyOp,[Array.modify],[Array]]
[Nat.coprime_mul_iff_left,[Iff.intro, And.intro, Nat.coprime.coprime_mul_right, Nat.coprime.coprime_mul_left, Nat.coprime, HMul.hMul, Eq.mpr, Eq.refl, propext, Nat.coprime_iff_gcd_eq_one, Eq, Nat.gcd, OfNat.ofNat, Nat.coprime.gcd_mul_left_cancel],[Iff, Nat.coprime, HMul.hMul, And]]
[SeqRight.noConfusionType,[],[]]
[Nat.le_of_not_le,[Or.resolve_left, Nat.le_or_le],[LE.le]]
[iff_iff_and_or_not_and_not,[Decidable.iff_iff_and_or_not_and_not],[Iff, Or, And, Not]]
[Quot.rec,[Quot.liftIndepPr1, PSigma.snd, Quot.lift, Quot.indep, Quot.indepCoherent],[]]
[Option.mapM,[Option.none, Option, Bind.bind, Pure.pure, Option.some],[Option]]
[Substring.toIterator,[String.Iterator, String.Iterator.mk],[String.Iterator]]
[List.instLTList,[LT.mk, List.lt],[LT, List]]
[List.intercalate,[List.join, List.intersperse],[List]]
[Function.is_partial_inv_left,[Iff.mpr, rfl],[Eq, Option.some]]
[List.hasDecEq,[Unit.unit, Decidable, Eq, Decidable.isTrue, List.hasDecEq.proof_1, Decidable.isFalse, List.hasDecEq.proof_2, List.hasDecEq.proof_3, List.cons, decEq, PProd.fst, List.hasDecEq.proof_4, List.hasDecEq.proof_5, List.hasDecEq.proof_6],[Decidable, Eq]]
[Prod.fst_swap,[rfl],[Eq, Prod.fst, Prod.swap, Prod.snd]]
[dec_em',[Or.swap, dec_em],[Or, Not]]
[String.toAsciiByteArray.loop.proof_2,[And.intro, Nat.lt_add_of_pos_right, String.csize_pos, String.get, Nat.lt_of_not_le, mt, decide_eq_true],[And, LT.lt, String.next, String.utf8ByteSize]]
[Classical.axiomOfChoice,[Exists.intro, Classical.choose, Classical.choose_spec],[Exists]]
[Except.toBool,[Bool, Bool.true, Bool.false],[Bool]]
[Nat.dvd_add_iff_left,[Eq.mpr, Eq.refl, Iff, Dvd.dvd, HAdd.hAdd, Nat.add_comm, Nat.dvd_add_iff_right],[Iff, Dvd.dvd, HAdd.hAdd]]
[UInt64.instSemigroupUInt64.proof_1,[congrArg, UInt64.mk, Semigroup.mul_assoc, UInt64.val],[Eq, UInt64.mk]]
[Set.insert,[setOf, Or, Eq, Mem.mem],[Set]]
[instMonadStateOf,[MonadStateOf.mk, liftM, MonadStateOf.get, MonadStateOf.set, MonadLiftT.monadLift, MonadState.modifyGet],[MonadStateOf]]
[List.mem_insert_self,[Iff.mpr, List.mem_insert_iff, Or.inl, rfl],[Mem.mem, List.insert]]
[Array.contains,[Array.any, BEq.beq, OfNat.ofNat, Array.size],[Bool]]
[Div.div,[],[]]
[UInt16.mod_def,[rfl],[Eq, HMod.hMod, UInt16.mk, UInt16.val]]
[«term_<&>_»,[Lean.ParserDescr.trailingNode, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.symbol, Lean.ParserDescr.cat],[Lean.TrailingParserDescr]]
[Function.Equiv,[Eq],[]]
[instCoeTail,[CoeTail.mk, coeFun],[CoeTail]]
[USize.ofNatCore,[USize.mk, Fin.mk],[USize]]
[Function.const_comp,[rfl],[Eq, Function.comp, Function.const]]
[Function.eq_update_iff,[Iff.trans, Function.funext_iff, Function.forall_update_iff, Eq],[Iff, Eq, Function.update, And]]
[Subtype.val_injective,[Subtype.coe_injective],[Function.injective, Subtype.val]]
[List.erase_of_not_mem,[rfl, Eq.mpr, Eq.refl, Eq, List.erase, List.cons, List.erase_cons, ite, if_neg, Ne.symm, And.left, Eq.mp, Not, Or, Mem.mem, propext, not_or, List.mem_cons, And.right],[Eq, List.erase]]
[instMonadReader,[MonadReader.mk, readThe],[MonadReader]]
[observing,[MonadExcept.tryCatch, Bind.bind, Pure.pure, Except.ok, Except.error],[Except]]
[Coe.coe,[],[]]
[addParenHeuristic,[ite, Eq, or, String.isPrefixOf, Bool.true, not, String.any, Char.isWhitespace, HAppend.hAppend],[String]]
[List.instForMList,[ForM.mk, List.forM],[ForM, List]]
[ExceptCpsT.instMonadLiftExceptCpsT,[MonadLift.mk, ExceptCpsT.lift],[MonadLift, ExceptCpsT]]
[plift.up.inj,[],[Eq]]
[instXorUInt32,[Xor.mk, UInt32.xor],[Xor, UInt32]]
[Nat.mul_mod_right,[Eq.mpr, Eq.refl, Eq, HMod.hMod, HMul.hMul, OfNat.ofNat, Eq.symm, Nat.zero_add, HAdd.hAdd, Nat.add_mul_mod_self_left, Nat.zero_mod, rfl],[Eq, HMod.hMod, HMul.hMul, OfNat.ofNat]]
[UInt8.instSemiringUInt8.proof_2,[of_eq_true, Eq.trans, forall_congr, congrFun, congrArg, Eq, HAdd.hAdd, UInt8.zero_def, UInt8.add_def, UInt8.mk, OfNat.ofNat, zero_add, UInt8.val, UInt8.mk_val_eq, eq_self, propext, forall_const, UInt8],[Eq, HAdd.hAdd, OfNat.ofNat]]
[decidableEq_of_decidableLe.proof_1,[le_refl],[False]]
[Int.instCommRingInt.proof_3,[Eq.mpr, Eq.refl, Eq, HPow.hPow, Nat.succ, HMul.hMul, Int.mul_comm, rfl],[Eq, HPow.hPow, Nat.succ, HMul.hMul]]
[instDecidableFalse,[Decidable.isFalse, not_false],[Decidable, False]]
[Nat.sub_eq_sub_min,[dite, GE.ge, Eq.mpr, Eq.refl, Eq, HSub.hSub, min, min_eq_right, rfl, Nat.sub_eq_zero_of_le, le_of_not_ge, OfNat.ofNat, min_eq_left, Nat.sub_self],[Eq, HSub.hSub, min]]
[Int.toNat_sub,[rfl],[Eq, Int.toNat, Int.ofNat, HSub.hSub]]
[Prod.snd_surjective,[Nonempty.elim, Exists.intro, Prod.mk, rfl],[Function.surjective, Prod.snd]]
[instHasEquiv,[HasEquiv.mk, Setoid.r],[HasEquiv]]
[String.instAppendString,[Append.mk, String.append],[Append, String]]
[instSemiringFin.proof_12,[rfl],[Eq, Nat.succ]]
[Prod.snd_eq_iff,[Iff, Eq, Prod.snd, Prod.mk, Prod.fst, of_eq_true, Eq.trans, congrArg, Prod.mk.injEq, congrFun, And, eq_self, true_and, iff_self],[Iff, Eq, Prod.snd, Prod.mk, Prod.fst]]
[true_ne_false,[ne_false_of_self, trivial],[Not, Eq, True, False]]
[PartialOrder.le_antisymm,[],[Eq]]
[ByteArray.mk.sizeOf_spec,[Eq.refl, HAdd.hAdd, OfNat.ofNat, SizeOf.sizeOf],[Eq, SizeOf.sizeOf, ByteArray.mk, HAdd.hAdd, OfNat.ofNat]]
[Option.eq_of_eq_some,[Eq, rfl, Iff.mpr, Iff.mp, congrArg, Option.some],[Eq]]
[Option.instOrElseOption,[OrElse.mk, Option.orElse],[OrElse, Option]]
[Int.repr,[String, Nat.repr, HAppend.hAppend, Nat.succ],[String]]
[Function.inv_fun_on_mem,[And.left, Function.inv_fun_on_pos],[Mem.mem, Function.inv_fun_on]]
[eq_of_heq,[],[Eq]]
[MonadFunctorT.monadMap,[],[]]
[Set.instUnionSet,[Union.mk, Set.union],[Union, Set]]
[StateT.run_modifyGet,[of_eq_true, eq_self, Pure.pure],[Eq, StateT.run, MonadState.modifyGet, Pure.pure, Prod.mk, Prod.fst, Prod.snd]]
[Int.natAbs_eq,[Or, Eq, Int.ofNat, Int.natAbs, Neg.neg, Or.inl, rfl, Or.inr],[Or, Eq, Int.ofNat, Int.natAbs, Neg.neg]]
[CoeTC.noConfusionType,[],[]]
[StateT.instMonadLiftStateT,[MonadLift.mk, StateT.lift],[MonadLift, StateT]]
[seqRight_eq_bind,[Eq.mpr, Eq.refl, Eq, SeqRight.seqRight, Bind.bind, LawfulApplicative.seqRight_eq, of_eq_true, Eq.trans, congrFun, congrArg, Seq.seq, map_eq_pure_bind, id, seq_eq_bind_map, Pure.pure, funext, LawfulMonad.bind_assoc, LawfulMonad.pure_bind, id_eq, bind_pure, eq_self],[Eq, SeqRight.seqRight, Bind.bind]]
[congrFun,[rfl],[Eq]]
[coeTail,[CoeTail.coe],[]]
[EIO.bindTask,[BaseIO.bindTask, EIO.catchExceptions, Pure.pure, Task.pure, Except.error],[BaseIO, Task, Except]]
[not_false,[id],[Not, False]]
[SubNegMonoid.toSub,[],[Sub]]
[List.all,[List.foldr, and, Bool.true],[Bool]]
[Int.distrib_left,[Eq, HMul.hMul, HAdd.hAdd, of_eq_true, Eq.trans, congr, congrArg, Int.ofNat, Int.ofNat_add_ofNat, Int.ofNat_mul_ofNat, Nat.left_distrib, eq_self, Eq.mpr, Int.ofNat_add_negSucc_ofNat, Int.ofNat_mul_subNatNat, Nat.succ, Int.ofNat_mul_negSucc_ofNat, Int.negOfNat_eq_subNatNat_zero, Eq.refl, Int.subNatNat, OfNat.ofNat, Eq.symm, Int.subNatNat_add, rfl, Int.negSucc_ofNat_add_ofNat, Int.add_comm, Int.negSucc_ofNat_add_negSucc_ofNat, Int.negOfNat_add, Int.negOfNat, Nat.succ_add, Int.negSucc, Int.negSucc_ofNat_ofNat, Nat.mul_comm, Nat.right_distrib, Int.negSucc_ofNat_mul_subNatNat, Int.mul_negSucc_ofNat_negSucc_ofNat, Int.ofNat.injEq],[Eq, HMul.hMul, HAdd.hAdd]]
[if_ctx_simp_congr_prop,[if_ctx_congr_prop],[Iff, ite]]
[String.Range.mk.sizeOf_spec,[Eq.refl, HAdd.hAdd, OfNat.ofNat, SizeOf.sizeOf],[Eq, SizeOf.sizeOf, String.Range.mk, HAdd.hAdd, OfNat.ofNat]]
[not_and_of_not_right,[mt, And.right],[Not, And]]
[String.endsWith,[BEq.beq, Substring.takeRight, String.toSubstring, String.length],[Bool]]
[String.Iterator.i,[],[String.Pos]]
[String.csize_pos,[Char.utf8Size_pos],[LT.lt, OfNat.ofNat, String.csize]]
[Char.repr,[Char.quote],[String]]
[Array.findIdx?.loop.proof_1,[absurd, Eq.mp, Eq.refl, LT.lt, Array.size, Eq, HAdd.hAdd, OfNat.ofNat, Nat.zero_add, Nat.lt_irrefl],[False]]
[List.erasep_cons_of_neg,[of_eq_true, Eq.trans, congrFun, congrArg, Eq, List.erasep_cons, ite_congr, eq_false, Eq.refl, List.cons, List.erasep, ite_false, eq_self],[Eq, List.erasep, List.cons]]
[instDecidableLe_5,[LinearOrder.decidable_le],[Decidable, LE.le]]
[UInt64.instSemiringUInt64,[Semiring.mk, UInt64.instSemiringUInt64.proof_1, UInt64.instSemiringUInt64.proof_2, UInt64.mk, Semiring.nsmul, UInt64.val, UInt64.instSemiringUInt64.proof_3, UInt64.instSemiringUInt64.proof_4, UInt64.instSemiringUInt64.proof_5, UInt64.instSemiringUInt64.proof_6, UInt64.instSemiringUInt64.proof_7, UInt64.instSemiringUInt64.proof_8, UInt64.instSemiringUInt64.proof_9, UInt64.instSemiringUInt64.proof_10, UInt64.instSemiringUInt64.proof_11, UInt64.instSemiringUInt64.proof_12, UInt64.instSemiringUInt64.proof_13],[Semiring, UInt64]]
[LT.lt,[],[]]
[not_forall_of_exists_not,[False],[Not]]
[HOrElse.hOrElse,[],[]]
[set.separates_points,[Exists, And, Mem.mem, Ne],[]]
[instCommMonoid_1.proof_2,[Semiring.one_mul],[Eq, HMul.hMul, OfNat.ofNat]]
[RandomGen.split,[],[Prod]]
[List.getLast.proof_2,[],[List.noConfusionType, False, List.cons, List.nil]]
[instMonadLiftBaseIOEIO,[MonadLift.mk, BaseIO.toEIO],[MonadLift, BaseIO, EIO]]
[Subarray.forInUnsafe.loop,[ite, LT.lt, Bind.bind, Pure.pure, Subarray.forInUnsafe.loop, HAdd.hAdd, OfNat.ofNat],[]]
[or_of_or_of_imp_of_imp,[Or.imp],[Or]]
[UInt8.size_positive,[of_decide_eq_true, Eq.refl, Bool.true],[LT.lt, OfNat.ofNat, UInt8.size]]
[UInt32.mk_val_eq,[Eq, UInt32.mk, UInt32.val, rfl],[Eq, UInt32.mk, UInt32.val]]
[Nat.gcd_pos_of_pos_left,[Nat.pos_of_dvd_of_pos, Nat.gcd_dvd_left],[LT.lt, OfNat.ofNat, Nat.gcd]]
[«term_∧_»,[Lean.ParserDescr.trailingNode, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.symbol, Lean.ParserDescr.cat],[Lean.TrailingParserDescr]]
[id_map',[LawfulFunctor.id_map],[Eq, Functor.map]]
[List.head,[absurd, Eq.refl, List.nil],[]]
[UInt32.decLt,[Decidable, LT.lt, inferInstanceAs],[Decidable, LT.lt]]
[OrElse.noConfusionType,[],[]]
[Nat.ibelow,[True, And],[]]
[max_eq_left_of_lt,[max_eq_left, le_of_lt],[Eq, max]]
[Int.sub_eq_add_neg,[rfl],[Eq, HSub.hSub, HAdd.hAdd, Neg.neg]]
[Tactic.Ring.RingM.run,[Bind.bind, Lean.Meta.getLevel, Lean.Level.zero, Lean.Level.max, Lean.Level.imax, Lean.Level.param, Lean.Level.mvar, Lean.Meta.MetaM, Lean.Meta.synthInstance, Lean.mkApp, Lean.mkConst, Lean.Name.mkStr, Lean.Name.anonymous, List.cons, List.nil, Option.none, StateRefT'.run', Tactic.Ring.Cache.mk, Tactic.Ring.State.mk, Lean.throwError, Lean.ToMessageData.toMessageData],[Lean.Meta.MetaM]]
[Array.ext',[Eq.symm, eq_of_heq, Eq.refl, Array.data, Array.mk, HEq.refl, Eq, rfl],[Eq]]
[Decidable.not_imp,[Iff.intro, And.intro, Decidable.of_not_imp, not_of_not_imp, not_imp_of_and_not],[Iff, Not, And]]
[List.mem_filter,[of_eq_true, Eq.trans, congrFun, congrArg, Iff, propext, List.mem_filterAux, List.nil, Or, And, Mem.mem, Eq, Bool.true, List.mem_nil_iff, or_false, iff_self],[Iff, Mem.mem, List.filter, And, Eq, Bool.true]]
[instCoeNatInt,[Coe.mk, Int.ofNat],[Coe, Nat, Int]]
[Nat.succ_ne_self,[False, absurd, Nat.succ_ne_zero, OfNat.ofNat, PProd.fst, id],[Ne, Nat.succ]]
[instDecidableEqQuotient.proof_1,[instSubsingletonDecidable, Eq, Quotient.mk],[Subsingleton, Decidable, Eq, Quotient.mk]]
[Ordering.lt.sizeOf_spec,[Eq.refl, OfNat.ofNat],[Eq, SizeOf.sizeOf, Ordering.lt, OfNat.ofNat]]
[List.cons.injEq,[Eq.propIntro, And.intro, Eq.refl, List.cons, Eq.symm, eq_of_heq, HEq.refl],[Eq, List.cons, And]]
[Nat.gt_of_not_le,[GT.gt, Nat.lt_or_ge, absurd],[GT.gt]]
[Nat.zero_eq,[rfl],[Eq, Nat.zero, OfNat.ofNat]]
[List.reverse_cons,[Eq.mpr, Eq.refl, Eq, List.reverseAux, List.cons, List.nil, HAppend.hAppend, Eq.symm, List.reverseAux_eq_append, rfl],[Eq, List.reverse, List.cons, HAppend.hAppend, List.nil]]
[Fin.isLt,[],[LT.lt, Fin.val]]
[Array.mapMUnsafe,[unsafeCast, OfNat.ofNat, Array.mapMUnsafe.map],[Array]]
[of_decide_eq_false,[Not, absurd, ne_false_of_eq_true, decide_eq_true],[Not]]
[instInhabitedProd,[Inhabited.mk, Prod.mk, arbitrary],[Inhabited, Prod]]
[String.instInhabitedRange,[Inhabited.mk, String.Range.mk, arbitrary],[Inhabited, String.Range]]
[Tactic.Ring.HornerExpr.isZero,[Tactic.Ring.HornerExpr.xadd, Bool, Decidable.decide, Eq, OfNat.ofNat, Bool.false],[Bool]]
[add_left_inj,[Iff.intro, add_right_cancel, rfl],[Iff, Eq, HAdd.hAdd]]
[Subtype.mk.inj,[],[Eq]]
[Pow.pow,[],[]]
[instDecidableEq.proof_1,[Iff.rfl],[False]]
[List.remove_eq_of_not_mem,[Eq, List.remove, of_eq_true, eq_self, List.nil],[Eq, List.remove]]
[List.subset.refl,[],[Subset.subset]]
[fixCore6,[bfix6, USize.size],[]]
[Subarray.h₂,[],[LE.le, Subarray.stop, Array.size, Subarray.as]]
[Array.ext,[congrArg, Array.mk, Eq.symm, Eq.refl, Array.ext.extAux],[Eq]]
[Nat.not_le_of_not_ble_eq_true,[absurd, Nat.ble_eq_true_of_le],[Not, LE.le]]
[false_implies,[propext, Iff.intro, trivial, absurd, of_decide_eq_false, Eq.refl, Decidable.decide, False],[Eq, True]]
[not_iff_false_intro,[iff_false_intro, not_not_intro],[Iff, Not, False]]
[StateRefT'.instMonadStateRefT',[inferInstanceAs, Monad, ReaderT, ST.Ref],[Monad, StateRefT']]
[Group.toDivInvMonoid,[],[DivInvMonoid]]
[Nat.ofNat_eq_Nat,[rfl],[Eq, Numeric.ofNat]]
[Quot.inductionOn,[Quot.ind],[]]
[Nat.log2.proof_1,[],[WellFounded]]
[mul_right_comm,[Eq.mpr, Eq.refl, Eq, HMul.hMul, mul_assoc, mul_comm, rfl],[Eq, HMul.hMul]]
[String.drop,[Substring.toString, Substring.drop, String.toSubstring],[String]]
[USize.decEq.proof_1,[rfl],[Eq, USize.mk]]
[UInt32.shiftRight,[UInt32.mk, HShiftRight.hShiftRight, UInt32.val, UInt32.modn, OfNat.ofNat],[UInt32]]
[List.forIn_cons,[rfl],[Eq, ForIn.forIn, List.cons, Bind.bind, Pure.pure]]
[System.FilePath.mk.inj,[],[Eq]]
[let_eq,[],[Eq]]
[add_right_inj,[Iff.intro, add_left_cancel, congrArg, HAdd.hAdd],[Iff, Eq, HAdd.hAdd]]
[USize.instInhabitedFinSize,[Inhabited.mk, Fin.ofNat', OfNat.ofNat, USize.size_positive],[Inhabited, Fin, USize.size]]
[reprStr,[Std.Format.pretty, Repr.reprPrec, OfNat.ofNat, Std.Format.defWidth],[String]]
[Nat.add_div_left,[Eq.mpr, Eq.refl, Eq, HDiv.hDiv, HAdd.hAdd, Nat.succ, Nat.add_comm, Nat.add_div_right, rfl],[Eq, HDiv.hDiv, HAdd.hAdd, Nat.succ]]
[Nat.case_strong_induction_on,[Nat.strong_induction_on, Unit.unit, Nat.lt_succ_of_le],[]]
[decidableEq_of_decidableLe,[Decidable, Eq, dite, LE.le, Decidable.isTrue, le_antisymm, Decidable.isFalse, decidableEq_of_decidableLe.proof_1, decidableEq_of_decidableLe.proof_2],[DecidableEq]]
[instLEFin,[LE.mk, LE.le, Fin.val],[LE, Fin]]
[compareOfLessAndEq,[ite, LT.lt, Ordering.lt, Eq, Ordering.eq, Ordering.gt],[Ordering]]
[term!_,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.symbol, Lean.ParserDescr.cat],[Lean.ParserDescr]]
[Function.extend_apply,[Eq.mpr, congrFun, congrArg, Eq, Eq.trans, Function.extend_def, dite_congr, eq_true, exists_apply_eq_apply, Eq.refl, Classical.choose, Eq.mpr_prop, dif_pos, of_eq_true, True, congr_arg, Classical.choose_spec],[Eq, Function.extend]]
[String.intercalate.go,[Unit.unit, String, PProd.fst, HAppend.hAppend],[String]]
[List.card_le_card_cons,[Decidable.em, Mem.mem, of_eq_true, Eq.trans, congrArg, LE.le, List.card, List.card_cons_of_mem, eq_true, Nat.le_refl, Eq.symm, List.card_cons_of_not_mem, Not, eq_false, eq_true_of_decide, Eq.refl, Bool.true, Nat.le_succ],[LE.le, List.card, List.cons]]
[Semiring.mul_zero,[],[Eq, HMul.hMul, OfNat.ofNat]]
[EStateM.get,[EStateM.Result.ok],[EStateM]]
[eq_rec_heq,[eqRec_heq],[HEq]]
[Function.update_same,[dif_pos, rfl],[Eq, Function.update]]
[String.front,[String.get, OfNat.ofNat],[Char]]
[instSubsingleton.proof_1,[Subsingleton.intro, proofIrrel],[Subsingleton]]
[Nat.find_x.proof_3,[absurd, Nat.not_lt_zero],[Not]]
[coeDecidableEq,[inferInstanceAs, Decidable, Eq, Bool.true],[Decidable, coe]]
[List.exists_of_mem_bind,[Iff.mp, List.mem_bind],[Exists, And, Mem.mem]]
[instMonadExceptOfExcept,[MonadExceptOf.mk, Except.error, Except.tryCatch],[MonadExceptOf, Except]]
[eq_self_iff_true,[iff_true_intro, rfl],[Iff, Eq, True]]
[System.FilePath.isDir,[Bind.bind, EIO.toBaseIO, System.FilePath.metadata, BaseIO, Bool, Pure.pure, BEq.beq, IO.FS.Metadata.type, IO.FS.FileType.dir, Bool.false],[BaseIO, Bool]]
[Function.right_inverse.left_inverse,[],[Function.left_inverse]]
[Tactic.Cache.mk,[liftM, IO.mkRef, Sum.inl],[IO, Tactic.Cache]]
[«term_×_»,[Lean.ParserDescr.trailingNode, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.symbol, Lean.ParserDescr.cat],[Lean.TrailingParserDescr]]
[Int.coe_nat_inj,[Int.ofNat.inj],[Eq]]
[instDecidableEqSum.proof_5,[],[Sum.noConfusionType, False, Sum.inr, Sum.inl]]
[UInt8.val,[],[Fin, UInt8.size]]
[inline,[],[]]
[Int.instCommRingInt.proof_1,[],[Eq, HMul.hMul, Int.ofNat, Nat.succ, HAdd.hAdd]]
[Nat.gcd.proof_1,[WellFoundedRelation.wf, measure, id],[WellFounded, WellFoundedRelation.rel, measure, id]]
[Array.mk.injEq,[Eq.propIntro, Eq.refl, Array.mk, Eq.symm, eq_of_heq, HEq.refl],[Eq, Array.mk]]
[List.exists_of_erasep,[Exists, And, Not, Eq, List.nil, HAppend.hAppend, List.cons, List.erasep, Eq.refl, Classical.em, Exists.intro, And.intro, List.forall_mem_nil, of_eq_true, Eq.trans, congr, congrArg, List.nil_append, eq_self, List.erasep_cons_of_pos, eq_true, eq_true_of_decide, Bool.true, Eq.symm, False.elim, Eq.mp, Iff.mpr, List.forall_mem_cons, Eq.mpr, List.cons_append, rfl, List.erasep_cons_of_neg, eq_false],[Exists, And, Not, Eq, HAppend.hAppend, List.cons, List.erasep]]
[Nat.pow_zero,[rfl],[Eq, HPow.hPow, OfNat.ofNat]]
[«term_||_»,[Lean.ParserDescr.trailingNode, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.symbol, Lean.ParserDescr.cat],[Lean.TrailingParserDescr]]
[instLEUInt8,[LE.mk, UInt8.le],[LE, UInt8]]
[EStateM.Result.ok.injEq,[Eq.propIntro, And.intro, Eq.refl, EStateM.Result.ok, Eq.symm, eq_of_heq, HEq.refl],[Eq, EStateM.Result.ok, And]]
[Pure.pure,[],[]]
[precLead,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.nonReservedSymbol, Bool.false],[Lean.ParserDescr]]
[EStateM.Backtrackable.noConfusionType,[],[]]
[Decidable.not_iff,[Iff, Not, of_eq_true, Eq.trans, congr, congrArg, eq_true, iff_true, iff_self, eq_false, iff_false, propext, not_not],[Iff, Not]]
[emptyWf,[WellFoundedRelation.mk, emptyRelation, emptyWf.proof_1],[WellFoundedRelation]]
[mul_left_cancel,[IsMulLeftCancel.mul_left_cancel],[Eq]]
[Nat.lt.step.proof_1,[Nat.le_step],[LE.le, Nat.succ]]
[System.Platform.getNumBits.proof_1,[Or.inr, rfl],[Or, Eq, OfNat.ofNat]]
[PSigma.noConfusionType,[],[]]
[Neg.noConfusionType,[],[]]
[GT.gt,[LT.lt],[]]
[List.toPersistentArray,[List.toPersistentArrayAux, Std.PersistentArray.mk],[Std.PersistentArray]]
[ByteArray.findIdx?,[ByteArray.findIdx?.loop],[Option, Nat]]
[instInhabitedUInt32,[Inhabited.mk, UInt32.ofNatCore, OfNat.ofNat, instInhabitedUInt32.proof_1],[Inhabited, UInt32]]
[List.mem_reverse,[of_eq_true, Eq.trans, congrFun, congrArg, Iff, propext, List.mem_reverseAux, List.nil, Or, Mem.mem, List.mem_nil_iff, or_false, iff_self],[Iff, Mem.mem, List.reverse]]
[Ordering.toCtorIdx,[OfNat.ofNat],[Nat]]
[Quot.indepCoherent,[PSigma.eta, Quot.sound],[Eq, Quot.indep]]
[Subtype.map_id,[funext, Eq, Subtype.map, id, rfl],[Eq, Subtype.map, id]]
[HEq.ndrec,[],[]]
[System.instDecidableEqFilePath,[Decidable, Eq, dite, Decidable.isTrue, rfl, Decidable.isFalse],[DecidableEq, System.FilePath]]
[Trans.trans,[],[]]
[Except.toOption,[Option, Option.some, Option.none],[Option]]
[Nat.le.dest,[Exists, Eq, HAdd.hAdd, Exists.intro, OfNat.ofNat, rfl, Nat.succ, Eq.symm, Nat.add_comm, absurd, Nat.not_succ_le_zero],[Exists, Eq, HAdd.hAdd]]
[Substring.trimLeft,[Substring.dropWhile, Char.isWhitespace],[Substring]]
[Classical.exists_true_of_nonempty,[Exists, True, Exists.intro, trivial],[Exists, True]]
[Function.right_inverse_surj_inv,[Function.surj_inv_eq],[Function.right_inverse, Function.surj_inv]]
[List.erase_cons_head,[of_eq_true, Eq.trans, congrFun, congrArg, Eq, List.erase_cons, ite_congr, eq_self, Eq.refl, List.cons, List.erase, ite_true],[Eq, List.erase, List.cons]]
[String.Range.stop,[],[String.Pos]]
[ofNat_zero,[rfl],[Eq, Numeric.ofNat, OfNat.ofNat]]
[LinearOrder.noConfusionType,[],[]]
[Array.anyMUnsafe.any,[ite, Eq, BEq.beq, Bool.true, Pure.pure, Bool.false, Bind.bind, Array.uget, lcProof, Array.anyMUnsafe.any, HAdd.hAdd, OfNat.ofNat],[Bool]]
[Mathlib.Tactic.Conv.convRunConv_,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.nonReservedSymbol, Bool.false, Lean.ParserDescr.const],[Lean.ParserDescr]]
[Tactic.Ring.HornerExpr.below,[PUnit, PProd],[]]
[ByteSliceT.mk.inj,[And.intro],[And, Eq]]
[Function.apply_update,[Decidable.em, Eq, of_eq_true, Eq.trans, congr, congrArg, Function.update_same, eq_self, Eq.symm, Function.update_noteq, ne_eq, Not, eq_false, eq_true_of_decide, Eq.refl, Bool.true],[Eq, Function.update]]
[HMul.noConfusionType,[],[]]
[not_lt_of_ge,[not_le_of_gt],[Not, LT.lt]]
[AddMonoid.noConfusionType,[],[]]
[dite_congr,[Decidable.em, Eq.mpr, Eq.refl, Eq, dite, dif_pos, Eq.symm, dif_neg],[Eq, dite]]
[Zero.zero,[],[]]
[gt_trans,[lt_trans],[GT.gt]]
[UInt16.instSemigroupUInt16,[Semigroup.mk, UInt16.instSemigroupUInt16.proof_1],[Semigroup, UInt16]]
[exists_eq_right,[Iff.trans, exists_congr, And.comm, exists_eq_left],[Iff, Exists, And, Eq]]
[Function.right_inverse_iff_comp,[Iff.intro, Function.right_inverse.comp_eq_id, congr_fun],[Iff, Function.right_inverse, Eq, Function.comp, id]]
[MonadState.get,[],[]]
[Mathlib.Tactic.Lint.constToSimpDeclMap,[Id.run, Bind.bind, ForIn.forIn, Option.none, Id, ForInStep, Std.HashMap, Lean.Name, Lean.Meta.SimpLemma.name?, Lean.Expr.constName?, Lean.Expr.getAppFn, Lean.Meta.SimpLemma.proof, Pure.pure, PUnit.unit, ForInStep.yield],[Std.HashMap, Lean.Name]]
[Nat.zero_lt_one,[Nat.zero_lt_succ, OfNat.ofNat],[LT.lt, OfNat.ofNat]]
[forall_const,[Iff.intro, Nonempty.elim],[Iff]]
[LawfulApplicative.toLawfulFunctor,[],[LawfulFunctor]]
[Int.add_assoc,[Int.ofNat, Int.negSucc, Eq, HAdd.hAdd, Int.add_assoc_aux1, Eq.mpr, Eq.refl, Int.add_comm, Eq.symm, rfl, Int.add_assoc_aux2, of_eq_true, Eq.trans, congr, congrArg, congrFun, Int.negSucc_ofNat_add_negSucc_ofNat, Nat.succ, Nat.add_comm, Nat.add_succ, Nat.add_left_comm, eq_self],[Eq, HAdd.hAdd]]
[gt_irrefl,[lt_irrefl],[Not, GT.gt]]
[FloatArray.foldlM.proof_1,[Nat.le_refl, FloatArray.size],[LE.le, FloatArray.size]]
[UInt32.instInhabitedFinSize,[Inhabited.mk, Fin.ofNat', OfNat.ofNat, UInt32.size_positive],[Inhabited, Fin, UInt32.size]]
[List.subset_append_of_subset_right,[List.subset.trans, List.subset_append_right],[Subset.subset, HAppend.hAppend]]
[Attr.simps?,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.nonReservedSymbol, Bool.false, Lean.ParserDescr.unary, Lean.ParserDescr.symbol, Lean.ParserDescr.cat, Lean.ParserDescr.const],[Lean.ParserDescr]]
[UInt16.toUInt64,[Nat.toUInt64, UInt16.toNat],[UInt64]]
[Nat.mul_left_comm,[Eq.mpr, Eq.refl, Eq, HMul.hMul, Eq.symm, Nat.mul_assoc, Nat.mul_comm, rfl],[Eq, HMul.hMul]]
[Fin.mod_lt,[LT.lt, HMod.hMod],[LT.lt, HMod.hMod]]
[UInt32.zero_def,[rfl],[Eq, OfNat.ofNat, UInt32.mk]]
[Mathlib.ExtendedBinder.«binderTerm≥_»,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.symbol, Lean.ParserDescr.cat],[Lean.ParserDescr]]
[Array.size_set,[List.length_set, Array.data, Fin.val],[Eq, Array.size, Array.set]]
[Array.forIn.loop.proof_2,[Nat.le_of_lt, Nat.lt_of_lt_of_le, Nat.lt_succ_self],[LE.le, Array.size]]
[Fin.mk.injEq,[Eq.propIntro, Eq.refl, Fin.mk, Eq.symm, eq_of_heq, HEq.refl],[Eq, Fin.mk]]
[Array.mapSepElemsM,[OfNat.ofNat, List.toArray, List.nil],[Array, Lean.Syntax]]
[proof_irrel_heq,[],[HEq]]
[withPtrEqDecEq,[Decidable, Eq, Eq.refl, Decidable.isTrue, withPtrEqDecEq.proof_2, Decidable.isFalse, withPtrEqDecEq.proof_3],[Decidable, Eq]]
[Function.has_uncurry_base,[Function.has_uncurry.mk, id],[Function.has_uncurry]]
[Function.has_uncurry.uncurry,[],[]]
[instInhabitedNonScalar,[Inhabited.mk, NonScalar.mk, arbitrary],[Inhabited, NonScalar]]
[String.length_repeat,[of_eq_true, Eq.trans, congrFun, congrArg, Eq, List.length_repeat, eq_self],[Eq, String.length, String.repeat]]
[List.filterMapM.loop,[List, Pure.pure, Bind.bind, Unit.unit, PProd.fst, List.cons],[List]]
[CommRing.noConfusionType,[],[]]
[String.Iterator.mk.sizeOf_spec,[Eq.refl, HAdd.hAdd, OfNat.ofNat, SizeOf.sizeOf],[Eq, SizeOf.sizeOf, String.Iterator.mk, HAdd.hAdd, OfNat.ofNat]]
[instDecidableEqUInt32,[UInt32.decEq],[DecidableEq, UInt32]]
[as_true,[ite, True, False],[]]
[Equiv.instInhabitedEquiv,[Inhabited.mk, Equiv.refl],[Inhabited, Equiv]]
[List.or,[List.any, id],[Bool]]
[List.erase,[List, List.nil, Unit.unit, BEq.beq, List.cons, PProd.fst],[List]]
[ByteSliceT.noConfusionType,[],[]]
[instToStringExcept,[ToString.mk, String, HAppend.hAppend, ToString.toString],[ToString, Except]]
[Decidable.ne_or_eq,[dec_em', Eq],[Or, Ne, Eq]]
[instDivUSize,[Div.mk, USize.div],[Div, USize]]
[Function.injective.ne_iff',[Function.injective.ne_iff],[Iff, Ne]]
[UInt64.instNumericUInt64,[Numeric.mk, UInt64.mk, Numeric.ofNat],[Numeric, UInt64]]
[ByteArray.get,[UInt8, Array.get],[UInt8]]
[WellFounded.apply.proof_1,[],[Acc]]
[String.next,[HAdd.hAdd, String.csize],[String.Pos]]
[«stx_*»,[Lean.ParserDescr.trailingNode, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.symbol],[Lean.TrailingParserDescr]]
[Tactic.Ring.horner_add_const,[of_eq_true, Eq.trans, congr, congrArg, Eq, add_assoc, HMul.hMul, HPow.hPow, HAdd.hAdd, Eq.symm, eq_self],[Eq, HAdd.hAdd, Tactic.Ring.horner]]
[ByteArray.copySlice,[ByteArray.mk, HAppend.hAppend, Array.extract, ByteArray.data, OfNat.ofNat, HAdd.hAdd, Array.size],[ByteArray]]
[Nat.gcd_dvd_gcd_of_dvd_left,[Nat.dvd_gcd, Nat.dvd_trans, Nat.gcd_dvd_left, Nat.gcd_dvd_right],[Dvd.dvd, Nat.gcd]]
[Mathlib.ExtendedBinder.binderPred.quot,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.symbol, Lean.ParserDescr.unary, Lean.ParserDescr.cat],[Lean.ParserDescr]]
[Mathlib.Tactic.Lint.checkAllSimpLemmaInfos,[Bind.bind, Mathlib.Tactic.Lint.withSimpLemmaInfos, Option.mapM, Lean.addMessageContextFull, ite, Eq, Array.isEmpty, Bool.true, Pure.pure, Option.none, Option.some, Lean.MessageData.joinSep, Array.toList, Lean.MessageData.ofFormat, Std.Format.line],[Lean.Meta.MetaM, Option, Lean.MessageData]]
[instDecidableXor.proof_4,[False],[False]]
[Nat.foldRev,[Nat.foldRev.loop],[]]
[Id.finally,[MonadFinally.mk, Pure.pure, Prod.mk],[MonadFinally, Id]]
[instShiftRightUInt32,[ShiftRight.mk, UInt32.shiftRight],[ShiftRight, UInt32]]
[Nat.nat_repr_len_aux,[Eq.mpr, implies_congr, congrArg, LT.lt, Nat.pow_succ, Eq.refl, HDiv.hDiv, HPow.hPow, Iff.mpr, Nat.div_lt_iff_lt_mul],[LT.lt, HDiv.hDiv, HPow.hPow]]
[instLTFloat,[LT.mk, Float.lt],[LT, Float]]
[Mathlib.Prelude.Rename.addNameAlignment,[Lean.MonadEnv.modifyEnv, Lean.PersistentEnvExtension.addEntry, Mathlib.Prelude.Rename.renameExtension, Prod.mk],[Lean.Core.CoreM, Unit]]
[guardTargetStrict,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.nonReservedSymbol, Bool.false, Lean.ParserDescr.symbol, Lean.ParserDescr.cat],[Lean.ParserDescr]]
[Int.instHPowIntNatInt,[HPow.mk, Int.pow],[HPow, Int, Nat]]
[tacticCalc_,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.nonReservedSymbol, Bool.false, Lean.ParserDescr.unary, calcStep],[Lean.ParserDescr]]
[UInt8.toUInt64,[Nat.toUInt64, UInt8.toNat],[UInt64]]
[UInt8.decLt,[Decidable, LT.lt, inferInstanceAs],[Decidable, LT.lt]]
[Decidable.iff_iff_not_or_and_or_not,[Eq.mpr, Eq.refl, Iff, And, Or, Not, propext, iff_iff_implies_and_implies, congr, congrArg, Eq.trans, Decidable.imp_iff_not_or, or_comm, congrFun, Iff.rfl],[Iff, And, Or, Not]]
[eq_false,[propext, Iff.intro, absurd, False.elim],[Eq, False]]
[iff_congr,[Iff.intro, Iff.trans, Iff.symm],[Iff]]
[toLBoolM,[Bind.bind, Pure.pure, Bool.toLBool],[Lean.LBool]]
[Fin.ne_of_val_ne,[absurd, Fin.val_eq_of_eq],[Not, Eq]]
[heq_of_eqRec_eq,[heq_of_eq],[HEq]]
[Prod.mk.inj_right,[And.left, Prod.mk.inj],[Function.injective, Prod.mk]]
[System.FilePath.mk.injEq,[Eq.propIntro, Eq.refl, System.FilePath.mk, Eq.symm, eq_of_heq, HEq.refl],[Eq, System.FilePath.mk]]
[ByteSliceT.arr,[],[ByteArray]]
[List.subset_def,[Iff.rfl],[Iff, Subset.subset, Mem.mem]]
[EStateM.bind,[EStateM.Result, EStateM.Result.error],[EStateM]]
[termℤ,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.symbol],[Lean.ParserDescr]]
[Array.mapMUnsafe.map,[ite, LT.lt, Bind.bind, unsafeCast, Array.mapMUnsafe.map, HAdd.hAdd, OfNat.ofNat, Array.uset, lcProof, Pure.pure],[Array, PNonScalar]]
[instCommMonoid,[CommMonoid.mk, CommGroup.mul_comm],[CommMonoid]]
[Array.forIn.loop,[Pure.pure],[]]
[String.takeWhile,[Substring.toString, Substring.takeWhile, String.toSubstring],[String]]
[command_Lemma___,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.const, Lean.ParserDescr.symbol],[Lean.ParserDescr]]
[coeB,[Coe.coe],[]]
[UInt64.instSemiringUInt64.proof_13,[UInt64.eq_of_val_eq, Eq.mpr, congrArg, Eq, Fin.ofNat', HAdd.hAdd, OfNat.ofNat, Fin.size_positive', UInt64.val, Eq.trans, UInt64.mk, UInt64.one_def, UInt64.add_def],[Eq, Numeric.ofNat, HAdd.hAdd, OfNat.ofNat]]
[WellFoundedRelation.rel,[],[]]
[String.trimLeft,[Substring.toString, Substring.trimLeft, String.toSubstring],[String]]
[if_pos,[Eq, ite, rfl, absurd],[Eq, ite]]
[Tactic.Find.tacticFind,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.nonReservedSymbol, Bool.false],[Lean.ParserDescr]]
[ulift.up.sizeOf_spec,[Eq.refl, HAdd.hAdd, OfNat.ofNat, SizeOf.sizeOf],[Eq, SizeOf.sizeOf, ulift.up, HAdd.hAdd, OfNat.ofNat]]
[List.equiv,[Iff, Mem.mem],[]]
[instSubUSize,[Sub.mk, USize.sub],[Sub, USize]]
[Mathlib.Tactic.Lint.isAutoDecl,[ite, Eq, Lean.Name.hasMacroScopes, Bool.true, Pure.pure, Bind.bind, PUnit.unit],[Lean.Core.CoreM, Bool]]
[Subtype.instDecidableEqSubtype.proof_2,[absurd],[False]]
[Function.partial_inv_left,[Function.is_partial_inv_left, Function.partial_inv_of_injective],[Eq, Function.partial_inv, Option.some]]
[Substring.dropRightWhile,[Substring, Substring.mk],[Substring]]
[Fin.ofNat',[Fin.mk, HMod.hMod, Nat.mod_lt],[Fin]]
[le_not_le_of_lt,[And, LE.le, Not, Iff.mp, lt_iff_le_not_le],[And, LE.le, Not]]
[instDecidableEqSum.proof_6,[],[Sum.noConfusionType, False, Sum.inl, Sum.inr]]
[List.disjoint_nil_right,[Eq.mpr, Eq.refl, List.disjoint, List.nil, propext, List.disjoint_comm, List.disjoint_nil_left],[List.disjoint, List.nil]]
[List.disjoint_of_disjoint_append_left_right,[And.right, Iff.mp, List.disjoint_append_left],[List.disjoint]]
[instMonadExceptOfEST,[inferInstanceAs, MonadExceptOf, EStateM],[MonadExceptOf, EST]]
[ByteSlice.getOp,[ByteArray.get!, ByteSlice.arr, HAdd.hAdd, ByteSlice.off],[UInt8]]
[List.union,[List.foldr, List.insert],[List]]
[Mathlib.Prelude.Rename.RenameMap.insertPair,[Mathlib.Prelude.Rename.RenameMap, Std.HashMap.insert],[Mathlib.Prelude.Rename.RenameMap]]
[instSizeOf,[SizeOf.mk, default.sizeOf],[SizeOf]]
[Nat.sub_eq_iff_eq_add,[Iff.intro, Eq.mpr, Eq.refl, Eq, HAdd.hAdd, Eq.symm, HSub.hSub, Nat.sub_add_cancel, rfl, Nat.add_sub_cancel],[Iff, Eq, HSub.hSub, HAdd.hAdd]]
[String.length_eq_list_length,[of_eq_true, eq_self, List.length],[Eq, String.length, String.mk, List.length]]
[Array.allDiff,[OfNat.ofNat],[Bool]]
[StateRefT'.get,[ST.Ref.get],[StateRefT']]
[«term↑_»,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.symbol, Lean.ParserDescr.cat],[Lean.ParserDescr]]
[Nat.succ_add,[Eq, HAdd.hAdd, Nat.succ, rfl, congrArg, PProd.fst],[Eq, HAdd.hAdd, Nat.succ]]
[Int.sign_mul_natAbs,[Unit.unit, Eq, HMul.hMul, Int.sign, Int.ofNat, Int.natAbs, Int.one_mul, HAdd.hAdd, OfNat.ofNat, rfl, Eq.symm, Int.neg_eq_neg_one_mul, Int.negSucc],[Eq, HMul.hMul, Int.sign, Int.ofNat, Int.natAbs]]
[Int.mul_zero,[Eq, HMul.hMul, OfNat.ofNat, rfl],[Eq, HMul.hMul, OfNat.ofNat]]
[or.right_comm,[Eq.mpr, Eq.refl, Iff, Or, propext, or_assoc, or_comm, Iff.rfl],[Iff, Or]]
[LT.noConfusionType,[],[]]
[List.disjoint_cons_left,[Iff.trans, List.disjoint_append_left, of_eq_true, Eq.trans, congrFun, congrArg, Iff, And, propext, List.singleton_disjoint, List.disjoint, Not, Mem.mem, iff_self],[Iff, List.disjoint, List.cons, And, Not, Mem.mem]]
[Nat.mul_sub_div,[],[Eq, HDiv.hDiv, HSub.hSub, HMul.hMul, Nat.succ]]
[USize.instSemiringUSize.proof_13,[USize.eq_of_val_eq, Eq.mpr, congrArg, Eq, Fin.ofNat', HAdd.hAdd, OfNat.ofNat, Fin.size_positive', USize.val, Eq.trans, USize.mk, USize.one_def, USize.add_def],[Eq, Numeric.ofNat, HAdd.hAdd, OfNat.ofNat]]
[Subtype.existsOfSubtype,[Subtype.existsOfSubtype.proof_1],[Exists]]
[Nat.succ_sub,[Exists.elim, Nat.le.dest, Eq.mpr, Eq.refl, Eq, HSub.hSub, Nat.succ, Eq.symm, HAdd.hAdd, Nat.add_sub_cancel_left, Nat.add_succ, rfl],[Eq, HSub.hSub, Nat.succ]]
[AndOp.noConfusionType,[],[]]
[Array.findIdx?.loop.proof_2,[Eq.mpr, Eq.refl, Eq, HAdd.hAdd, OfNat.ofNat, Array.size, Eq.symm, Nat.add_comm, Nat.add_assoc, rfl],[Eq, HAdd.hAdd, OfNat.ofNat, Array.size]]
[Char.toLower,[ite, And, GE.ge, OfNat.ofNat, LE.le, Char.ofNat, HAdd.hAdd],[Char]]
[Nat.instDivNat,[Div.mk, Nat.div],[Div, Nat]]
[not_and_self,[False],[Not, And]]
[instCommSemigroup,[CommSemigroup.mk, CommMonoid.mul_comm],[CommSemigroup]]
[decidable_eq_inr_neg,[Eq, Decidable.isFalse, absurd, Eq.refl, proof_irrel],[Eq, Decidable.isFalse]]
[iff_self_and,[Eq.mpr, Eq.refl, Iff, And, propext, Iff.comm, and_iff_left_iff_imp, Iff.rfl],[Iff, And]]
[decPropToBool,[CoeDep.mk, Decidable.decide],[CoeDep, Bool]]
[getModify,[MonadState.modifyGet, Prod.mk],[]]
[Mathlib.Tactic.Lint.NamedLinter.toLinter,[],[Mathlib.Tactic.Lint.Linter]]
[bfix2,[PProd.fst],[]]
[PointedType.type,[],[]]
[ByteArray.uget,[UInt8, Array.uget],[UInt8]]
[CoeTail.noConfusionType,[],[]]
[Setoid.r,[],[]]
[Bool.or_self,[rfl, Eq.symm, Eq.refl],[Eq, or]]
[Decidable.le_iff_lt_or_eq,[Iff.intro, Decidable.lt_or_eq_of_le, le_of_lt_or_eq],[Iff, LE.le, Or, LT.lt, Eq]]
[instHashableInt,[Hashable.mk, UInt64, UInt64.ofNat, HMul.hMul, OfNat.ofNat, HAdd.hAdd],[Hashable, Int]]
[instSubsingletonDecidable,[instSubsingletonDecidable.proof_1],[Subsingleton, Decidable]]
[ExceptT.ext,[id],[Eq]]
[as_false,[ite, False, True],[]]
[ofNat_eq_ofNat,[rfl],[Eq, Numeric.ofNat, OfNat.ofNat]]
[ExceptCpsT.instMonadExceptCpsT,[Monad.mk],[Monad, ExceptCpsT]]
[pow_mul,[of_eq_true, Eq.trans, congr, congrArg, Eq, HPow.hPow, HMul.hMul, Nat.zero_eq, Nat.mul_zero, pow_zero, eq_self, OfNat.ofNat, Eq.mpr, Eq.refl, Nat.succ, Nat.mul_succ, HAdd.hAdd, pow_add, pow_succ', pow_mul_comm, rfl],[Eq, HPow.hPow, HMul.hMul]]
[Equiv.refl,[Equiv.mk, id, Equiv.refl.proof_1, Equiv.refl.proof_2],[Equiv]]
[UInt16.mod,[UInt16.mk, HMod.hMod, UInt16.val],[UInt16]]
[Semiring.nsmul,[],[]]
[Option.isNone,[Unit.unit, Bool, Bool.false, Bool.true],[Bool]]
[Semiring.noConfusionType,[],[]]
[Mathlib.Tactic.Lint.formatLinterResults,[Bind.bind, Array.filterMapM, Lean.Core.CoreM, Option, Lean.MessageData, ite, Eq, not, Std.HashMap.isEmpty, Bool.true, Mathlib.Tactic.Lint.groupedByFilename, Mathlib.Tactic.Lint.printWarnings, Mathlib.Tactic.Lint.LintVerbosity.high, Pure.pure, Option.some, HAppend.hAppend, Lean.ToMessageData.toMessageData, Mathlib.Tactic.Lint.Linter.noErrorsFound, Mathlib.Tactic.Lint.NamedLinter.toLinter, Option.none, OfNat.ofNat, Array.size, Array.filterM, Mathlib.Tactic.Lint.isAutoDecl],[Lean.Core.CoreM, Lean.MessageData]]
[Setoid.trans,[Equivalence.trans, Setoid.iseqv],[HasEquiv.Equiv]]
[instAndOpUInt16,[AndOp.mk, UInt16.land],[AndOp, UInt16]]
[List.toByteArray,[ByteArray.empty, List.toByteArray.loop],[ByteArray]]
[UInt64.val_eq_of_lt,[Fin.val_eq_of_lt],[Eq, Fin.val, UInt64.val, UInt64.ofNat]]
[Mathlib.Tactic.Lint.instReprLintVerbosity,[Repr.mk, Unit.unit, Std.Format, Repr.addAppParen, Std.Format.group, Std.Format.nest, ite, GE.ge, OfNat.ofNat, Std.Format.text, Std.Format.FlattenBehavior.allOrNone],[Repr, Mathlib.Tactic.Lint.LintVerbosity]]
[reprArg,[Repr.reprPrec, OfNat.ofNat],[Std.Format]]
[USize.instSemiringUSize.proof_11,[Eq.mpr, congr, congrArg, Eq, Eq.trans, HMul.hMul, USize.add_def, USize.mul_def, USize.mk, HAdd.hAdd, USize.val, USize.eq_of_val_eq, Semiring.mul_add],[Eq, HMul.hMul, HAdd.hAdd]]
[USize.sub_def,[rfl],[Eq, HSub.hSub, USize.mk, USize.val]]
[CoeSort.noConfusionType,[],[]]
[instReprUnit,[Repr.mk, Std.Format.text],[Repr, Unit]]
[Int.neg_zero,[rfl],[Eq, Neg.neg, OfNat.ofNat]]
[Setoid.refl,[Equivalence.refl, Setoid.iseqv],[HasEquiv.Equiv]]
[decidable_of_decidable_of_eq,[decidable_of_decidable_of_iff, Eq.to_iff],[Decidable]]
[Subrelation.accessible.proof_1,[Acc.intro],[Acc]]
[instBEqOption,[BEq.mk, Unit.unit, Option.none, Option.some, Bool, Bool.true, and, BEq.beq, Bool.false],[BEq, Option]]
[Iff.comm,[Iff.intro, Iff.symm],[Iff]]
[implies.trans,[],[implies]]
[System.SearchPath.separator,[ite, Eq, System.Platform.isWindows, Bool.true, Char.ofNat],[Char]]
[imp_and_distrib,[Iff.intro, And.intro, And.left, And.right],[Iff, And]]
[List.mem_erase_of_ne,[Eq.mpr, Eq.refl, Iff, Mem.mem, List.erase, List.erase_eq_erasep, List.mem_erasep_of_neg, Ne.symm],[Iff, Mem.mem, List.erase]]
[Nat.«term_^[_]»,[Lean.ParserDescr.trailingNode, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.symbol, Lean.ParserDescr.cat],[Lean.TrailingParserDescr]]
[ExistsUnique.intro,[Exists.intro, And.intro],[ExistsUnique]]
[Nat.gcd_succ,[rfl],[Eq, Nat.gcd, Nat.succ, HMod.hMod]]
[Fin.instOfNatFinHAdd,[OfNat.mk, Fin.ofNat],[OfNat, Fin]]
[forall₂_congr,[forall_congr'],[Iff]]
[Exists.choose_spec,[Classical.choose_spec],[Exists.choose]]
[Int.negOfNat_eq_subNatNat_zero,[Unit.unit, Eq, Int.negOfNat, Int.subNatNat, OfNat.ofNat, rfl],[Eq, Int.negOfNat, Int.subNatNat, OfNat.ofNat]]
[Subtype.exists,[Iff.intro, Exists, Subtype.mk, Exists.intro],[Iff, Exists, Subtype.mk]]
[List.intersperse,[Unit.unit, List.cons, List, List.nil, PProd.fst],[List]]
[FloatArray.instEmptyCollectionFloatArray,[EmptyCollection.mk, FloatArray.empty],[EmptyCollection, FloatArray]]
[Int.subNatNat_eq_coe,[Int.subNatNat_elim, Eq, HSub.hSub, Int.ofNat, Eq.mpr, congrArg, Eq.trans, congrFun, Int.ofNat_add, Int.sub_eq_add_neg, Int.add_assoc, Neg.neg, Int.add_left_comm, HAdd.hAdd, Int.add_right_neg, rfl, congr, Int.negSucc_ofNat_coe, OfNat.ofNat, Int.neg_add, Eq.symm, Eq.refl, Int.ofNat_sub, Nat.le_refl, Nat.sub_self, Int.ofNat_zero, Int.zero_add],[Eq, Int.subNatNat, HSub.hSub, Int.ofNat]]
[Mathlib.Tactic.Lint.getAllDecls,[Bind.bind, Mathlib.Tactic.Lint.getDeclsInCurrModule, Lean.MonadEnv.getEnv, Pure.pure, HAppend.hAppend, Array.map, Prod.fst, Std.HashMap.toArray, Lean.SMap.map₁, Lean.Environment.constants],[Lean.Core.CoreM, Array, Lean.Name]]
[Nat.add_sub_of_le,[Eq, HAdd.hAdd, HSub.hSub, Eq.mpr, Eq.refl, Eq.symm, Nat.add_sub_cancel_left, rfl],[Eq, HAdd.hAdd, HSub.hSub]]
[Prod.RProdSubLex,[Prod.RProdSubLex.proof_1],[Prod.Lex]]
[Tactic.Ring.Cache.cs,[],[Lean.Expr]]
[instCommMonoid_1.proof_3,[Semiring.npow_zero'],[Eq, Semiring.npow, OfNat.ofNat]]
[modifyThe,[MonadStateOf.modifyGet, Prod.mk, PUnit.unit],[PUnit]]
[USize.instRingUSize.proof_3,[congrArg, USize.mk, Ring.gsmul_succ', USize.val],[Eq, USize.mk, Ring.gsmul, Int.ofNat, Nat.succ, USize.val]]
[Int.instOfNatInt,[OfNat.mk, Int.ofNat],[OfNat, Int]]
[String.Iterator.curr,[Char, String.get],[Char]]
[List.mem_nil_iff,[Iff.rfl],[Iff, Mem.mem, List.nil, False]]
[Function.comp_const_right,[rfl],[Eq, Function.comp, Function.const]]
[instDecidableLe_3,[UInt64.decLe],[Decidable, LE.le]]
[Nat.decidable_dvd.proof_1,[Iff.symm, Nat.dvd_iff_mod_eq_zero],[Iff, Eq, HMod.hMod, OfNat.ofNat, Dvd.dvd]]
[Nat.coprime_zero_left,[of_eq_true, Eq.trans, congrFun, congrArg, Iff, Eq, Nat.gcd_zero_left, OfNat.ofNat, iff_self],[Iff, Nat.coprime, OfNat.ofNat, Eq]]
[Except.ok.injEq,[Eq.propIntro, Eq.refl, Except.ok, Eq.symm, eq_of_heq, HEq.refl],[Eq, Except.ok]]
[heq_of_heq_of_eq,[HEq.trans, heq_of_eq],[HEq]]
[Nat.mul_assoc,[Eq, HMul.hMul, rfl],[Eq, HMul.hMul]]
[coeSortToCoeTail,[CoeTail.mk, CoeSort.coe],[CoeTail]]
[Semiring.nsmul_zero',[],[Eq, Semiring.nsmul, OfNat.ofNat]]
[Or.imp_left,[Or.imp, id],[Or]]
[Function.inv_fun_on_pos,[],[And, Mem.mem, Function.inv_fun_on, Eq]]
[strictAnd,[and],[Bool]]
[Nat.lt_add_of_pos_left,[Eq.mpr, Eq.refl, LT.lt, HAdd.hAdd, Nat.add_comm, Nat.lt_add_of_pos_right],[LT.lt, HAdd.hAdd]]
[UInt32.instSemiringUInt32.proof_8,[of_eq_true, Eq.trans, forall_congr, congrFun, congrArg, Eq, HMul.hMul, UInt32.one_def, UInt32.mul_def, UInt32.mk, OfNat.ofNat, mul_one, UInt32.val, UInt32.mk_val_eq, eq_self, propext, forall_const, UInt32],[Eq, HMul.hMul, OfNat.ofNat]]
[instReprSubstring,[Repr.mk, Std.Format.text, HAppend.hAppend, String.quote, Substring.toString],[Repr, Substring]]
[«term_∪_»,[Lean.ParserDescr.trailingNode, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.symbol, Lean.ParserDescr.cat],[Lean.TrailingParserDescr]]
[Nat.lt_trans,[Nat.le_trans, Nat.le_step],[LT.lt]]
[USize.instAddCommSemigroupUSize.proof_1,[congrArg, USize.mk, AddCommSemigroup.add_comm, USize.val],[Eq, USize.mk]]
[Preorder.le_trans,[],[LE.le]]
[List.leftpad_length,[of_eq_true, Eq.trans, congrFun, congrArg, Eq, List.length_append, List.repeat, HSub.hSub, List.length, HAdd.hAdd, List.length_repeat, Nat.sub_add_eq_max, max, eq_self],[Eq, List.length, List.leftpad, max]]
[Function.injective.dite,[],[Function.injective, dite, Subtype.mk]]
[cast_proof_irrel,[rfl],[Eq, cast]]
[Mathlib.Tactic.Lint.heuristicallyExtractSimpLemmas,[Mathlib.Tactic.Lint.heuristicallyExtractSimpLemmasCore, Mathlib.Tactic.Lint.constToSimpDeclMap],[Array, Lean.Name]]
[Equiv.mk.injEq,[Eq.propIntro, And.intro, Eq.refl, Equiv.mk, Eq.symm, eq_of_heq, HEq.refl],[Eq, Equiv.mk, And]]
[Function.left_inverse.comp_eq_id,[funext],[Eq, Function.comp, id]]
[UInt8.instRingUInt8.proof_4,[congrArg, UInt8.mk, SubNegMonoid.gsmul_neg', UInt8.val],[Eq, UInt8.mk, Ring.gsmul, Int.negSucc, UInt8.val]]
[UInt32.instSemigroupUInt32,[Semigroup.mk, UInt32.instSemigroupUInt32.proof_1],[Semigroup, UInt32]]
[LinearOrder.toPartialOrder,[],[PartialOrder]]
[Function.uncurry_apply_pair,[rfl],[Eq, Function.uncurry, Prod.mk]]
[UInt64.shiftLeft,[UInt64.mk, HShiftLeft.hShiftLeft, UInt64.val, UInt64.modn, OfNat.ofNat],[UInt64]]
[String.mapTokens,[Function.comp, String.intercalate, String.singleton, List.map, String.split, Decidable.decide, Eq],[String]]
[Ne,[Not, Eq],[]]
[Function.curry_apply,[rfl],[Eq, Function.curry, Prod.mk]]
[String.replace,[OfNat.ofNat, String.replace.loop],[String]]
[instIsAddLeftCancel,[IsAddLeftCancel.mk, instIsAddLeftCancel.proof_1],[IsAddLeftCancel]]
[Array.mapIdxM,[Array.size, OfNat.ofNat, rfl, Array.mkEmpty, Array.mapIdxM.map],[Array]]
[UInt64.noConfusionType,[],[]]
[Nat.find_min',[Iff.mp, not_lt, Nat.find_min],[LE.le, Nat.find]]
[of_eq_true,[trivial, Eq.symm],[]]
[Array.erase,[Unit.unit, Array, Array.indexOf?, Array.feraseIdx],[Array]]
[Tactic.Ring.pow_succ_eq,[Eq.mpr, Eq.refl, Eq, HPow.hPow, HAdd.hAdd, OfNat.ofNat, Eq.symm, HMul.hMul, pow_succ, rfl],[Eq, HPow.hPow, HAdd.hAdd, OfNat.ofNat]]
[MProd.mk.inj,[And.intro],[And, Eq]]
[Array.mapIdxM.map.proof_1,[Eq.mpr, Eq.refl, LT.lt, Array.size, Eq.symm, HAdd.hAdd, OfNat.ofNat, Nat.add_assoc, Nat.add_comm, Nat.le_add_right, Nat.succ],[LT.lt, Array.size]]
[LawfulFunctor.map_const,[],[Eq, Functor.mapConst, Function.comp, Functor.map, Function.const]]
[instAddCommGroup,[AddCommGroup.mk, instAddCommGroup.proof_5],[AddCommGroup]]
[StateCpsT.instMonadStateOfStateCpsT,[MonadStateOf.mk, PUnit.unit],[MonadStateOf, StateCpsT]]
[Float.mk.inj,[],[Eq]]
[UInt64.instAddCommSemigroupUInt64.proof_1,[congrArg, UInt64.mk, AddCommSemigroup.add_comm, UInt64.val],[Eq, UInt64.mk]]
[String.toInt!,[Unit.unit, Int, String.toInt?, panic],[Int]]
[Nat.le_succ,[Nat.le.step, Nat.le.refl],[LE.le, Nat.succ]]
[UInt16.val,[],[Fin, UInt16.size]]
[Nat.mod_one,[],[Eq, HMod.hMod, OfNat.ofNat]]
[Array.set,[Array.mk, List.set, Array.data, Fin.val],[Array]]
[Decidable.predToBool,[CoeDep.mk, Decidable.decide],[CoeDep, Bool]]
[Nat.foldM.loop,[Pure.pure, Bind.bind, HSub.hSub, OfNat.ofNat, PProd.fst],[]]
[String.mangle,[String, ite, Eq, or, Char.isAlpha, Char.isDigit, Bool.true, PProd.fst, String.Iterator.next, String.push, Char.ofNat, HAppend.hAppend, LT.lt, Char.toNat, OfNat.ofNat, String.length, String.mkIterator],[String]]
[List.eraseRepsAux,[List, List.reverse, List.cons, Unit.unit, BEq.beq, PProd.fst],[List]]
[CommSemigroup.mul_comm,[],[Eq, HMul.hMul]]
[ExceptT.seq_eq,[rfl],[Eq, Seq.seq, Bind.bind, Functor.map]]
[UInt64.instSemiringUInt64.proof_6,[of_eq_true, Eq.trans, forall_congr, congr, congrArg, Eq, HMul.hMul, UInt64.zero_def, UInt64.mul_def, UInt64.mk, OfNat.ofNat, MonoidWithZero.mul_zero, UInt64.val, eq_true_of_decide, Eq.refl, Bool.true, propext, forall_const, UInt64],[Eq, HMul.hMul, OfNat.ofNat]]
[List.reverse_append,[of_eq_true, Eq.trans, congr, congrArg, Eq, List.reverse, List.nil_append, HAppend.hAppend, List.reverse_nil, List.append_nil, eq_self, Eq.mpr, List.cons_append, List.reverse_cons, congrFun, List.cons, List.nil, Eq.refl, List.append_assoc, rfl],[Eq, List.reverse, HAppend.hAppend]]
[List.cons_ne_nil,[Eq.refl, List.nil, HEq.refl],[Ne, List.cons, List.nil]]
[controlAt,[Bind.bind, MonadControlT.liftWith, MonadControlT.restoreM],[]]
[Float.le,[FloatSpec.le, floatSpec, Float.val],[]]
[UInt32.instSemigroupUInt32.proof_1,[congrArg, UInt32.mk, Semigroup.mul_assoc, UInt32.val],[Eq, UInt32.mk]]
[instMonadStateOfStateT,[MonadStateOf.mk, StateT.get, StateT.set, StateT.modifyGet],[MonadStateOf, StateT]]
[Int.instCommRingInt.proof_4,[rfl],[Eq, Numeric.ofNat, HAdd.hAdd, OfNat.ofNat]]
[instCoeTailNat,[CoeTail.mk, Numeric.ofNat],[CoeTail, Nat]]
[Nat.le_eq,[rfl],[Eq, Nat.le, LE.le]]
[Nat.coprime_zero_right,[of_eq_true, Eq.trans, congrFun, congrArg, Iff, Eq, Nat.gcd_zero_right, OfNat.ofNat, iff_self],[Iff, Nat.coprime, OfNat.ofNat, Eq]]
[FloatArray.toList,[OfNat.ofNat, List.nil, FloatArray.toList.loop],[List, Float]]
[Mathlib.Prelude.Rename.align,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.symbol, Lean.ParserDescr.const],[Lean.ParserDescr]]
[Array.filterSepElems,[Id.run, Array.filterSepElemsM],[Array, Lean.Syntax]]
[Option.map,[Option.bind, Function.comp, Option.some],[Option]]
[Char.quote,[HAppend.hAppend, Char.quoteCore],[String]]
[Array.foldlM.loop.proof_1,[Nat.lt_of_lt_of_le],[LT.lt, Array.size]]
[unexpandListNil,[Bind.bind, Lean.MonadRef.mkInfoFromRefPos, Lean.MonadQuotation.getCurrMacroScope, Lean.MonadQuotation.getMainModule, Pure.pure, Lean.Syntax.node, Lean.SourceInfo.none, Lean.Name.mkStr, Lean.Name.anonymous, List.toArray, List.cons, Lean.Syntax.atom, List.nil],[Lean.PrettyPrinter.Unexpander]]
[Array.noConfusionType,[],[]]
[Classical.inhabited_of_nonempty,[Inhabited.mk, Classical.choice],[Inhabited]]
[Char.ofNat.proof_1,[of_decide_eq_true, Eq.refl, Bool.true],[LT.lt, OfNat.ofNat, UInt32.size]]
[UInt32.lor,[UInt32.mk, Fin.lor, UInt32.val],[UInt32]]
[precMin1,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.nonReservedSymbol, Bool.false],[Lean.ParserDescr]]
[USize.instAddCommSemigroupUSize,[AddCommSemigroup.mk, USize.instAddCommSemigroupUSize.proof_1],[AddCommSemigroup, USize]]
[List.length_erase_of_mem,[Eq.mpr, Eq.refl, Eq, List.length, List.erase, Nat.pred, List.erase_eq_erasep, List.length_erasep_of_mem, rfl],[Eq, List.length, List.erase, Nat.pred]]
[Nat.ble_self_eq_true,[Unit.unit, Eq, Nat.ble, Bool.true, rfl, PProd.fst],[Eq, Nat.ble, Bool.true]]
[Set.compl,[setOf, Not, Mem.mem],[Set]]
[List.getLast,[absurd, List.getLast.proof_1, PProd.fst, List.getLast.proof_2],[]]
[Nat.mul_le_mul_of_nonneg_right,[Decidable.em, LE.le, Eq.mpr, congrArg, HMul.hMul, congrFun, Nat.le_antisymm, Nat.le_refl, Eq.symm, OfNat.ofNat, of_eq_true, Eq.trans, congr, Nat.zero_le, Nat.mul_zero, eq_true_of_decide, Eq.refl, Bool.true, Nat.le_of_lt, Nat.mul_lt_mul_of_pos_right, Iff.mp, not_le],[LE.le, HMul.hMul]]
[Prod.map_fst,[of_eq_true, Eq.trans, congrFun, congrArg, Eq, Prod.fst, prod_map, eq_self],[Eq, Prod.fst, Prod.map]]
[Mathlib.Tactic.Lint.groupedByFilename,[Bind.bind, ForIn.forIn, Lean.Core.CoreM, ForInStep, Std.HashMap, Lean.Name, Lean.MessageData, Lean.findModuleOf?, Lean.MonadEnv.getEnv, Pure.pure, PUnit.unit, ForInStep.yield, List.mapM, Mathlib.Tactic.Lint.printWarnings, HAppend.hAppend, Lean.ToMessageData.toMessageData, Array.toList, Lean.MessageData.joinSep, Lean.MessageData.ofFormat, Std.Format.line],[Lean.Core.CoreM, Lean.MessageData]]
[Acc.inv.proof_1,[],[Acc]]
[or_and_distrib_right,[Iff.trans, And.comm, and_or_distrib_left, or_congr],[Iff, And, Or]]
[Classical.choose_spec,[Subtype.property, Classical.indefiniteDescription],[Classical.choose]]
[Subtype.map_injective,[Subtype.coind_injective, Subtype.map.proof_1, Function.injective.comp, Subtype.coe_injective],[Function.injective, Subtype.map]]
[Classical.epsilon_spec_aux,[Subtype.property, Classical.strongIndefiniteDescription],[Classical.epsilon]]
[UInt32.instAddCommSemigroupUInt32.proof_1,[congrArg, UInt32.mk, AddCommSemigroup.add_comm, UInt32.val],[Eq, UInt32.mk]]
[not_and_distrib,[Decidable.not_and_distrib],[Iff, Not, And, Or]]
[EStateM.Result.ok.inj,[And.intro],[And, Eq]]
[MonoidWithZero.mul_zero,[],[Eq, HMul.hMul, OfNat.ofNat]]
[Function.surjective.comp,[Exists.elim, Exists.intro],[Function.surjective, Function.comp]]
[eq_comm,[Iff.intro, Eq.symm],[Iff, Eq]]
[Int.lt,[LE.le, HAdd.hAdd, OfNat.ofNat],[]]
[Nat.lt,[Nat.le, Nat.succ],[]]
[String.congr_append,[Eq, HAppend.hAppend, String.mk, String.data, rfl],[Eq, HAppend.hAppend, String.mk, String.data]]
[Function.left_inverse_surj_inv,[Function.right_inverse_of_injective_of_left_inverse, And.left, Function.right_inverse_surj_inv, And.right],[Function.left_inverse, Function.surj_inv, And.right]]
[«term_*_»,[Lean.ParserDescr.trailingNode, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.symbol, Lean.ParserDescr.cat],[Lean.TrailingParserDescr]]
[or_assoc,[Or.assoc],[Iff, Or]]
[DoResultPRBC.pure.sizeOf_spec,[Eq.refl, HAdd.hAdd, OfNat.ofNat, SizeOf.sizeOf],[Eq, SizeOf.sizeOf, DoResultPRBC.pure, HAdd.hAdd, OfNat.ofNat]]
[id.def,[rfl],[Eq, id]]
[or_congr,[Iff.intro, Or.imp, Iff.mp, Iff.mpr],[Iff, Or]]
[LawfulApplicative.seq_pure,[],[Eq, Seq.seq, Pure.pure, Functor.map]]
[And.left_comm,[Eq.mpr, Eq.refl, Iff, And, Eq.symm, propext, and_assoc, And.comm, Iff.rfl],[Iff, And]]
[instPowFloatFloat,[Pow.mk, Float.pow],[Pow, Float]]
[Nat.lt.base,[Nat.lt.base.proof_1],[LT.lt, Nat.succ]]
[Numeric.noConfusionType,[],[]]
[and_iff_left,[Iff.intro, And.left, And.intro],[Iff, And]]
[mul_assoc,[Semigroup.mul_assoc],[Eq, HMul.hMul]]
[Int.negSucc_ofNat_coe',[Eq.mpr, Eq.refl, Eq, Int.negSucc, HSub.hSub, Neg.neg, Int.ofNat, OfNat.ofNat, Int.sub_eq_add_neg, HAdd.hAdd, Eq.symm, Int.neg_add, rfl],[Eq, Int.negSucc, HSub.hSub, Neg.neg, Int.ofNat, OfNat.ofNat]]
[Functor.noConfusionType,[],[]]
[UInt32.mk.sizeOf_spec,[Eq.refl, HAdd.hAdd, OfNat.ofNat, SizeOf.sizeOf],[Eq, SizeOf.sizeOf, UInt32.mk, HAdd.hAdd, OfNat.ofNat]]
[Array.mapM,[Array.foldlM, Bind.bind, Pure.pure, Array.push, Array.mkEmpty, Array.size, OfNat.ofNat],[Array]]
[Subsingleton.helim,[Subsingleton.helim.proof_1],[HEq]]
[introv,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.nonReservedSymbol, Bool.false, Lean.ParserDescr.unary, Lean.ParserDescr.const],[Lean.ParserDescr]]
[Substring.splitOn,[ite, Eq, BEq.beq, Bool.true, List.cons, List.nil, OfNat.ofNat, Substring.splitOn.loop],[List, Substring]]
[Fin.mk.sizeOf_spec,[Eq.refl, HAdd.hAdd, OfNat.ofNat, SizeOf.sizeOf],[Eq, SizeOf.sizeOf, Fin.mk, HAdd.hAdd, OfNat.ofNat]]
[Mathlib.Prelude.Rename.elabLookup3,[ite, Eq, Lean.Syntax.isOfKind, Lean.Name.mkStr, Lean.Name.anonymous, Bool.true, cond, Bind.bind, Lean.MonadEnv.getEnv, Unit.unit, Lean.Elab.Command.CommandElabM, Unit, Std.HashMap.find?, Mathlib.Prelude.Rename.getRenameMap, Lean.Elab.logInfoAt, Function.comp, Lean.MessageData.ofFormat, Std.ToFormat.format, HAppend.hAppend, ToString.toString, Lean.Elab.throwUnsupportedSyntax],[Lean.Elab.Command.CommandElab]]
[Classical.decidableInhabited,[Inhabited.mk, inferInstance],[Inhabited, Decidable]]
[Function.surjective.forall,[Iff.intro],[Iff]]
[Nat.gcd_self,[of_eq_true, Eq.trans, congr, congrArg, Eq, Nat.gcd, Nat.zero_eq, Nat.gcd_zero_right, OfNat.ofNat, eq_true_of_decide, Eq.refl, Bool.true, Eq.symm, congrFun, Nat.gcd_succ, Nat.succ, Nat.mod_self, Nat.gcd_zero_left, eq_self],[Eq, Nat.gcd]]
[SeqRight.seqRight,[],[]]
[Nat.div_eq_of_lt_le,[],[Eq, HDiv.hDiv]]
[ByteArray.mkEmpty,[ByteArray.mk, List.toArray, List.nil],[ByteArray]]
[Decidable.or_iff_not_imp_right,[Iff.trans, Or.comm, Decidable.or_iff_not_imp_left],[Iff, Or]]
[Mathlib.Tactic.Lint.instDecidableEqLintVerbosity,[dite, Eq, Mathlib.Tactic.Lint.LintVerbosity.toCtorIdx, Decidable.isTrue, Mathlib.Tactic.Lint.instDecidableEqLintVerbosity.proof_1, Decidable.isFalse, Mathlib.Tactic.Lint.instDecidableEqLintVerbosity.proof_2],[DecidableEq, Mathlib.Tactic.Lint.LintVerbosity]]
[Nat.gcd_eq_left,[Nat.dvd_antisymm, Nat.gcd_dvd_left, Nat.dvd_gcd, Nat.dvd_refl],[Eq, Nat.gcd]]
[Nat.add_le_add_right,[Eq.mpr, Eq.refl, LE.le, HAdd.hAdd, Nat.add_comm, Nat.add_le_add_left],[LE.le, HAdd.hAdd]]
[evalGuardHyp,[ite, Eq, Lean.Syntax.isOfKind, Lean.Name.mkStr, Lean.Name.anonymous, Bool.true, Lean.Syntax.isNone, Unit.unit, Option.none, Lean.Syntax.matchesNull, OfNat.ofNat, Option.some, Lean.Elab.throwUnsupportedSyntax],[Lean.Elab.Tactic.Tactic]]
[AddCommMonoid.noConfusionType,[],[]]
[DivInvMonoid.gpow_neg',[],[Eq, DivInvMonoid.gpow, Int.negSucc, Inv.inv, Int.ofNat, Nat.succ]]
[Option.isSome,[Unit.unit, Bool, Bool.true, Bool.false],[Bool]]
[Nat.succ_mul_succ_eq,[Eq.mpr, Eq.refl, Eq, HMul.hMul, Nat.succ, HAdd.hAdd, OfNat.ofNat, Nat.mul_succ, Nat.succ_mul, Nat.add_right_comm, rfl],[Eq, HMul.hMul, Nat.succ, HAdd.hAdd, OfNat.ofNat]]
[MonadControl.liftWith,[],[]]
[UInt32.xor,[UInt32.mk, Fin.xor, UInt32.val],[UInt32]]
[List.nil_append,[rfl],[Eq, HAppend.hAppend, List.nil]]
[Function.left_inverse_iff_comp,[Iff.intro, Function.left_inverse.comp_eq_id, congr_fun],[Iff, Function.left_inverse, Eq, Function.comp, id]]
[Classical.byContradiction,[Decidable.byContradiction],[]]
[PLift.down,[],[]]
[UInt32.modn,[UInt32.mk, HMod.hMod, UInt32.val],[UInt32]]
[Array.getD,[dite, LT.lt, Array.size, Array.get, Fin.mk],[]]
[OfScientific.ofScientific,[],[]]
[Substring.all,[not, Substring.any],[Bool]]
[Set.«term{_|_}_1»,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.symbol, Lean.ParserDescr.cat, Mathlib.ExtendedBinder.extBinders],[Lean.ParserDescr]]
[ST.Ref.noConfusionType,[],[]]
[FloatArray.foldlMUnsafe.fold,[ite, Eq, BEq.beq, Bool.true, Pure.pure, Bind.bind, FloatArray.uget, lcProof, FloatArray.foldlMUnsafe.fold, HAdd.hAdd, OfNat.ofNat],[]]
[Nat.coprime.coprime_div_left,[Nat.coprime, HDiv.hDiv, Nat.eq_zero_or_pos, Eq.mpr, Eq.refl, Nat.eq_zero_of_zero_dvd, Eq.mp, Dvd.dvd, congrFun, congrArg, Nat.zero_div, HMul.hMul, Nat.mul_div_cancel_left, Nat.coprime.coprime_mul_left],[Nat.coprime, HDiv.hDiv]]
[UInt32.instNumericUInt32,[Numeric.mk, UInt32.mk, Numeric.ofNat],[Numeric, UInt32]]
[Tactic.DeclCache.get,[Bind.bind, Tactic.Cache.get, Prod.fst, Lean.MonadEnv.getEnv, ForIn.forIn, Lean.Meta.MetaM, ForInStep, Prod.snd, Pure.pure, PUnit.unit, ForInStep.yield],[Lean.Meta.MetaM]]
[instMonadExceptOfEIO,[inferInstanceAs, MonadExceptOf, EStateM, IO.RealWorld],[MonadExceptOf, EIO]]
[CommGroup.noConfusionType,[],[]]
[Nat.noConfusionType,[],[]]
[noConfusionTypeEnum,[ite, Eq],[]]
[Decidable.not_imp_self,[],[Iff]]
[Iff.trans,[Iff.intro, Iff.mp, Iff.mpr],[Iff]]
[Applicative.toSeq,[],[Seq]]
[instMulUInt8,[Mul.mk, UInt8.mul],[Mul, UInt8]]
[UInt8.instRingUInt8.proof_3,[congrArg, UInt8.mk, Ring.gsmul_succ', UInt8.val],[Eq, UInt8.mk, Ring.gsmul, Int.ofNat, Nat.succ, UInt8.val]]
[guard,[ite, Pure.pure, Unit.unit, Alternative.failure],[Unit]]
[List.mem,[Unit.unit, False, Or, Eq, PProd.fst],[]]
[String.prev,[String.Pos, ite, Eq, OfNat.ofNat, PProd.fst],[String.Pos]]
[PSigma.lexNdepWf,[PSigma.lexNdepWf.proof_1],[WellFounded, PSigma.lexNdep]]
[Tactic.Ring.horner_const_mul,[of_eq_true, Eq.trans, congr, congrArg, Eq, mul_add, HMul.hMul, HPow.hPow, HAdd.hAdd, congrFun, Eq.symm, mul_assoc, eq_self],[Eq, HMul.hMul, Tactic.Ring.horner]]
[ST.Ref.set,[liftM, ST.Prim.Ref.set],[Unit]]
[ReaderT.bind,[Bind.bind],[ReaderT]]
[instIsAddLeftCancel.proof_1,[Eq.mpr, Eq.refl, Eq, Eq.symm, neg_add_cancel_left, HAdd.hAdd, Neg.neg, rfl],[Eq]]
[if_congr_prop,[if_ctx_congr_prop],[Iff, ite]]
[byContra,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.nonReservedSymbol, Bool.false, Lean.ParserDescr.unary, Lean.ParserDescr.const],[Lean.ParserDescr]]
[instDecidableAnd.proof_2,[And.left],[False]]
[coeOfTC,[CoeHTCT.mk, coeTC],[CoeHTCT]]
[Int.sub_nat_self,[Unit.unit, Eq, Int.subNatNat, OfNat.ofNat, rfl, Eq.mpr, Eq.refl, Nat.succ, Int.subNatNat_of_sub_eq_zero, HSub.hSub, Nat.sub_self, Int.ofNat, Int.ofNat_zero],[Eq, Int.subNatNat, OfNat.ofNat]]
[left_inv_eq_right_inv,[Eq.mpr, Eq.refl, Eq, Eq.symm, one_mul, HMul.hMul, OfNat.ofNat, mul_assoc, mul_one, rfl],[Eq]]
[List.mem_of_mem_erasep,[List.erasep_subset],[Mem.mem]]
[UInt32.val_eq_of_eq,[Eq, UInt32.val, congrArg],[Eq, UInt32.val]]
[Squash.lift,[Quot.lift, Squash.lift.proof_1],[]]
[Char.instDecidableLt,[UInt32.decLt, Char.val],[Decidable, LT.lt]]
[GroupWithZero.noConfusionType,[],[]]
[control,[controlAt],[]]
[ByteArray.instEmptyCollectionByteArray,[EmptyCollection.mk, ByteArray.empty],[EmptyCollection, ByteArray]]
[AddMonoid.toAddSemigroup,[],[AddSemigroup]]
[List.instForInList,[ForIn.mk, List.forIn],[ForIn, List]]
[Fin.xor,[Fin, Fin.mk, HMod.hMod, Nat.xor, Fin.xor.proof_1],[Fin]]
[StateT.get,[Pure.pure, Prod.mk],[StateT]]
[Nat.lcm_assoc,[Nat.dvd_antisymm, Nat.lcm_dvd, Nat.dvd_lcm_left, Nat.lcm, Nat.dvd_trans, Nat.dvd_lcm_right],[Eq, Nat.lcm]]
[List.insert_of_mem,[of_eq_true, Eq.trans, congrFun, congrArg, Eq, if_pos, List, List.cons, eq_self],[Eq, List.insert]]
[instAddCommMonoid,[AddCommMonoid.mk, AddCommGroup.add_comm],[AddCommMonoid]]
[List.subset_cons,[Or.inr],[Subset.subset, List.cons]]
[List.length_replicate,[List.nil, List.length_replicate.aux],[Eq, List.length, List.replicate]]
[Array.reduceOption,[Array.filterMap, id, OfNat.ofNat, Array.size],[Array]]
[List.mem_of_ne_of_mem,[Or.elim, List.eq_or_mem_of_mem_cons, absurd],[Mem.mem]]
[UInt8.le,[LE.le, UInt8.val],[]]
[String.nextUntil,[String.nextWhile, not],[String.Pos]]
[Set.term𝒫_,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.symbol, Lean.ParserDescr.cat],[Lean.ParserDescr]]
[mul_comm,[CommSemigroup.mul_comm],[Eq, HMul.hMul]]
[UInt64.mk.sizeOf_spec,[Eq.refl, HAdd.hAdd, OfNat.ofNat, SizeOf.sizeOf],[Eq, SizeOf.sizeOf, UInt64.mk, HAdd.hAdd, OfNat.ofNat]]
[Nat.discriminate,[Eq.refl],[]]
[ByteArray.instAppendByteArray,[Append.mk, ByteArray.append],[Append, ByteArray]]
[UInt32.instCommRingUInt32,[CommRing.mk, UInt32.instCommRingUInt32.proof_1],[CommRing, UInt32]]
[TC.accessible,[TC.accessible.proof_1],[Acc, TC]]
[instOrdFin,[Ord.mk, Ord.compare, Fin.val],[Ord, Fin]]
[Int.ofNat_mul_negSucc_ofNat,[rfl],[Eq, HMul.hMul, Int.ofNat, Int.negSucc, Int.negOfNat, Nat.succ]]
[HEq.trans,[HEq.subst],[HEq]]
[«prec(_)»,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.nonReservedSymbol, Bool.false, Lean.ParserDescr.cat, Lean.ParserDescr.symbol],[Lean.ParserDescr]]
[Int.natMod,[Int.toNat, HMod.hMod],[Nat]]
[ReaderT,[],[]]
[type_eq_of_heq.proof_1,[HEq.ndrecOn, Eq.refl],[Eq]]
[dec_em,[Decidable.em],[Or, Not]]
[not_of_eq_false,[],[Not]]
[Set.sUnion,[setOf, Exists, And, Mem.mem],[Set]]
[min_le_left,[dite, LE.le, of_eq_true, Eq.trans, congrFun, congrArg, if_pos, eq_true, le_refl, Eq.mpr, if_neg, le_of_not_le],[LE.le, min]]
[UInt32.val_eq_of_lt,[Fin.val_eq_of_lt],[Eq, Fin.val, UInt32.val, UInt32.ofNat]]
[not_iff_not_of_iff,[Iff.intro, Iff.elim_right, Iff.elim_left],[Iff, Not]]
[Nat.eq_zero_of_add_eq_zero,[And.intro, Nat.eq_zero_of_add_eq_zero_right, Nat.eq_zero_of_add_eq_zero_left],[And, Eq, OfNat.ofNat]]
[Option.orElse,[Option, Option.some, Unit.unit],[Option]]
[dif_eq_if,[Eq, dite, ite, rfl],[Eq, dite, ite]]
[System.FilePath.exeExtension,[ite, Eq, System.Platform.isWindows, Bool.true],[String]]
[Inter.noConfusionType,[],[]]
[Nat.lcm_one_right,[Nat.lcm_one_left, Nat.lcm_comm, OfNat.ofNat],[Eq, Nat.lcm, OfNat.ofNat]]
[Array.data_toArray,[Eq, List.toArray, Array.data, Array.ext', List.toArray_data],[Eq, List.toArray, Array.data]]
[DivInvMonoid.toMonoid,[],[Monoid]]
[ne_or_eq,[em', Eq],[Or, Ne, Eq]]
[instComplementUInt8,[Complement.mk, UInt8.complement],[Complement, UInt8]]
[EStateM.orElse',[EStateM.Result.ok, EStateM.Result, EStateM.Backtrackable.restore, EStateM.Result.error, ite, Eq, Bool.true],[EStateM]]
[Array.any,[Id.run, Array.anyM],[Bool]]
[ExceptCpsT.runCatch,[Pure.pure],[]]
[UInt32.complement,[HSub.hSub, OfNat.ofNat, HAdd.hAdd],[UInt32]]
[USize.size,[HPow.hPow, OfNat.ofNat, System.Platform.numBits],[Nat]]
[max_left_comm,[left_comm, max, max_comm, max_assoc],[Eq, max]]
[List.filterM,[Bind.bind, List.filterAuxM, List.nil, Pure.pure, List.reverse],[List]]
[Array.toSubarray,[dite, LE.le, Array.size, Subarray.mk, Nat.le_refl, Array.toSubarray.proof_1],[Subarray]]
[Quotient.recOnSubsingleton,[Quot.recOnSubsingleton],[]]
[«term[_]»,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.symbol, Lean.ParserDescr.sepBy, Lean.ParserDescr.cat, Bool.false],[Lean.ParserDescr]]
[USize.instSemiringUSize.proof_8,[of_eq_true, Eq.trans, forall_congr, congrFun, congrArg, Eq, HMul.hMul, USize.one_def, USize.mul_def, USize.mk, OfNat.ofNat, mul_one, USize.val, USize.mk_val_eq, eq_self, propext, forall_const, USize],[Eq, HMul.hMul, OfNat.ofNat]]
[MonoidWithZero.zero_mul,[],[Eq, HMul.hMul, OfNat.ofNat]]
[le_of_not_ge,[Or.resolve_left, le_total],[LE.le]]
[MonadControlT.noConfusionType,[],[]]
[HAdd.noConfusionType,[],[]]
[UInt64.add_def,[rfl],[Eq, HAdd.hAdd, UInt64.mk, UInt64.val]]
[String.Range.mk.inj,[And.intro],[And, Eq]]
[Int.toNat,[Nat, OfNat.ofNat],[Nat]]
[UInt64.instRingUInt64.proof_3,[congrArg, UInt64.mk, Ring.gsmul_succ', UInt64.val],[Eq, UInt64.mk, Ring.gsmul, Int.ofNat, Nat.succ, UInt64.val]]
[List.length_pos_of_ne_nil,[Iff.mpr, Nat.pos_iff_ne_zero, Iff.mp, List.length_eq_zero],[LT.lt, OfNat.ofNat, List.length]]
[true_implies_iff,[Iff.intro, trivial],[Iff]]
[Set.instLawfulFunctorSet.proof_1,[LawfulFunctor.mk, rfl, funext, propext, Iff.intro, Eq.symm, eq_of_heq, Eq.refl, HEq.refl, Exists.intro, And.intro, Functor.map, Function.comp],[LawfulFunctor, Set]]
[instInhabitedUInt16,[Inhabited.mk, UInt16.ofNatCore, OfNat.ofNat, instInhabitedUInt16.proof_1],[Inhabited, UInt16]]
[seqLeft_eq_bind,[Eq.mpr, Eq.refl, Eq, SeqLeft.seqLeft, Bind.bind, Pure.pure, LawfulApplicative.seqLeft_eq, of_eq_true, Eq.trans, congrFun, congrArg, Seq.seq, map_eq_pure_bind, Function.const, seq_eq_bind_map, funext, LawfulMonad.bind_assoc, LawfulMonad.pure_bind, Function.const_apply, eq_self],[Eq, SeqLeft.seqLeft, Bind.bind, Pure.pure]]
[Nat.one_eq_succ_zero,[rfl],[Eq, OfNat.ofNat, Nat.succ]]
[UInt16.instRingUInt16,[Ring.mk, UInt16.instRingUInt16.proof_1, UInt16.mk, Ring.gsmul, UInt16.val, UInt16.instRingUInt16.proof_2, UInt16.instRingUInt16.proof_3, UInt16.instRingUInt16.proof_4, UInt16.instRingUInt16.proof_5],[Ring, UInt16]]
[Array.elem,[Array.contains],[Bool]]
[tacticRwa__,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.nonReservedSymbol, Bool.false, Lean.Parser.Tactic.rwRuleSeq, Lean.ParserDescr.unary, Lean.Parser.Tactic.location],[Lean.ParserDescr]]
[exists_prop,[Iff.intro, And, And.intro, Exists, Exists.intro],[Iff, Exists, And]]
[Function.bijective.comp,[Function.bijective, Function.comp, And.intro, Function.injective.comp, Function.surjective.comp],[Function.bijective, Function.comp]]
[instDecidableEqBool.proof_1,[],[Bool.noConfusionType, False, Bool.false, Bool.true]]
[Set.«term{_}»,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.symbol, Lean.ParserDescr.sepBy1, Lean.ParserDescr.cat, Bool.false],[Lean.ParserDescr]]
[Array.«term__[_:_]»,[Lean.ParserDescr.trailingNode, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.const, Lean.ParserDescr.symbol, Lean.ParserDescr.cat],[Lean.TrailingParserDescr]]
[Quotient.recOn,[Quot.recOn],[]]
[Nat.below,[PUnit, PProd],[]]
[Int.mul_assoc,[Eq, HMul.hMul, of_eq_true, Eq.trans, congr, congrArg, congrFun, Int.ofNat_mul_ofNat, Int.ofNat, Nat.mul_assoc, eq_self, Eq.symm, Int.negSucc, Int.ofNat_mul_negSucc_ofNat, Int.negOfNat, Nat.succ, Int.ofNat_mul_negOfNat, Eq.refl, Int.negOfNat_mul_ofNat, Int.negSucc_ofNat_ofNat, Int.negOfNat_mul_negSucc_ofNat, Int.mul_negSucc_ofNat_negSucc_ofNat, Int.negSucc_ofNat_mul_negOfNat],[Eq, HMul.hMul]]
[absurd,[False.elim],[]]
[List.decidableBexi.proof_1,[False, False.elim, Iff.mp, List.mem_nil],[False]]
[Nat.repeat.loop,[PProd.fst],[]]
[mul_left_cancel_iff,[Iff.intro, mul_left_cancel, congrArg, HMul.hMul],[Iff, Eq, HMul.hMul]]
[imp.swap,[Iff.intro, Function.swap],[Iff]]
[not_or_distrib,[Iff.intro, And.intro, Or.inl, Or.inr, False, Or.elim],[Iff, Not, Or, And]]
[String.split,[String.splitAux, OfNat.ofNat, List.nil],[List, String]]
[FloatArray.push,[FloatArray, FloatArray.mk, Array.push],[FloatArray]]
[Substring.prev,[String.Pos, ite, Eq, HSub.hSub, String.prev],[String.Pos]]
[heq_of_eq_rec_right,[Unit.unit, Eq.symm, eq_of_heq, Eq.refl, HEq.refl, HEq, HEq.rfl],[HEq]]
[Substring.str,[],[String]]
[instDecidableIff.proof_1,[Iff.intro],[Iff]]
[Array.getMax?,[dite, LT.lt, OfNat.ofNat, Array.size, Option.some, Array.foldl, ite, Eq, Bool.true, Option.none],[Option]]
[heq_iff_eq,[Iff.intro, eq_of_heq, heq_of_eq],[Iff, HEq, Eq]]
[instOrOpUInt16,[OrOp.mk, UInt16.lor],[OrOp, UInt16]]
[Char.valid,[],[UInt32.isValidChar, Char.val]]
[if_neg,[Eq, ite, absurd, rfl],[Eq, ite]]
[min_left_comm,[left_comm, min, min_comm, min_assoc],[left_commutative, min]]
[Ne.symm,[Eq.symm],[Ne]]
[UInt64.instSemiringUInt64.proof_10,[rfl],[Eq, Nat.succ]]
[List.instBEqList,[BEq.mk, List.beq],[BEq, List]]
[ByteSliceT.toSlice,[ByteSlice, ByteSlice.mk, HSub.hSub, ByteArray.size],[ByteSlice]]
[UInt32.mul,[UInt32.mk, HMul.hMul, UInt32.val],[UInt32]]
[Array.mapIdx,[Id.run, Array.mapIdxM],[Array]]
[fixCore1,[bfix1, USize.size],[]]
[Preorder.lt_iff_le_not_le,[],[Iff, LT.lt, And, LE.le, Not]]
[instReprFloat,[Repr.mk, Std.Format.text, Float.toString],[Repr, Float]]
[instOfNatUInt64,[OfNat.mk, UInt64.ofNat],[OfNat, UInt64]]
[Subtype.instDecidableEqSubtype,[Decidable, Eq, Subtype.mk, dite, Decidable.isTrue, Subtype.instDecidableEqSubtype.proof_1, Decidable.isFalse, Subtype.instDecidableEqSubtype.proof_2],[DecidableEq, Subtype]]
[Array.append,[Array.foldl, Array.push, OfNat.ofNat, Array.size],[Array]]
[Empty.elim,[sorryAx, Bool.true],[]]
[Ring.gsmul,[],[]]
[not_lt,[Iff.intro, le_of_not_gt, not_lt_of_ge],[Iff, Not, LT.lt, LE.le]]
[Array.foldlMUnsafe.fold,[ite, Eq, BEq.beq, Bool.true, Pure.pure, Bind.bind, Array.uget, lcProof, Array.foldlMUnsafe.fold, HAdd.hAdd, OfNat.ofNat],[]]
[List.hasDecidableLt.proof_2,[Eq.refl, List.cons, List.nil, HEq.refl, False],[False]]
[Substring.takeRightWhile,[Substring, Substring.mk],[Substring]]
[Or.by_cases',[dite, Or.resolve_right],[]]
[Prod.allI,[Nat.anyAux, not, Prod.snd, HSub.hSub, Prod.fst],[Bool]]
[instDecidableLt_3,[UInt64.decLt],[Decidable, LT.lt]]
[instModUInt8,[Mod.mk, UInt8.mod],[Mod, UInt8]]
[OrElse.orElse,[],[]]
[StateCpsT.instLawfulMonadStateCpsT,[StateCpsT.instLawfulMonadStateCpsT.proof_1],[LawfulMonad, StateCpsT]]
[Sigma.mk.sizeOf_spec,[Eq.refl, HAdd.hAdd, OfNat.ofNat, SizeOf.sizeOf],[Eq, SizeOf.sizeOf, Sigma.mk, HAdd.hAdd, OfNat.ofNat]]
[WellFounded.fix'.impl,[WellFounded.fix'.impl],[]]
[lt_of_le_not_le,[LT.lt, Iff.mpr, lt_iff_le_not_le, And.intro],[LT.lt]]
[npow_rec,[OfNat.ofNat, HMul.hMul, PProd.fst],[]]
[Int.instCommRingInt.proof_2,[rfl],[Eq, HPow.hPow, OfNat.ofNat]]
[Nat.toUInt32,[UInt32.ofNat],[UInt32]]
[List.disjoint_nil_left,[Not.elim, List.not_mem_nil],[List.disjoint, List.nil]]
[PProd.mk.injEq,[Eq.propIntro, And.intro, Eq.refl, PProd.mk, Eq.symm, eq_of_heq, HEq.refl],[Eq, PProd.mk, And]]
[instReprPUnit,[Repr.mk, Std.Format.text],[Repr, PUnit]]
[Tactic.Ring.HornerExpr.xadd.sizeOf_spec,[Eq.refl, HAdd.hAdd, OfNat.ofNat, SizeOf.sizeOf],[Eq, SizeOf.sizeOf, Tactic.Ring.HornerExpr.xadd, HAdd.hAdd, OfNat.ofNat]]
[Function.bijective.injective,[And.left],[Function.injective]]
[usize_size_gt_zero,[Nat.pos_pow_of_pos, System.Platform.numBits, Nat.zero_lt_succ, OfNat.ofNat],[GT.gt, USize.size, OfNat.ofNat]]
[Function.left_inverse_inv_fun,[],[Function.left_inverse, Function.inv_fun]]
[Function.app,[],[]]
[fix5,[fixCore5, arbitrary],[]]
[List.append_nil,[rfl, of_eq_true, Eq.trans, congrFun, congrArg, Eq, List.cons, id, eq_self],[Eq, HAppend.hAppend, List.nil]]
[Nat.div_one,[],[Eq, HDiv.hDiv, OfNat.ofNat]]
[Mathlib.Tactic.Lint.LintVerbosity.low.sizeOf_spec,[Eq.refl, OfNat.ofNat],[Eq, SizeOf.sizeOf, Mathlib.Tactic.Lint.LintVerbosity.low, OfNat.ofNat]]
[Nat.repr_length,[Eq.symm, Classical.em, Eq, HDiv.hDiv, Nat.succ, OfNat.ofNat, Eq.mpr, congrFun, congrArg, LE.le, List.length, ite_congr, Eq.trans, eq_true_of_decide, Eq.refl, Bool.true, List.cons, Nat.digitChar, HMod.hMod, List.nil, congr, Nat.toDigitsCore, Nat.to_digits_core_length, of_decide_eq_true, HAdd.hAdd],[LE.le, String.length, Nat.repr]]
[Nat.coprime.mul,[Eq.trans, Nat.coprime.gcd_mul_left_cancel],[Nat.coprime, HMul.hMul]]
[Array.isEqv,[dite, Eq, Array.size, Array.isEqvAux, OfNat.ofNat, Bool.false],[Bool]]
[Nat.div_mul_le_self,[LE.le, HMul.hMul, HDiv.hDiv, Eq.mpr, congrFun, congrArg, Eq.trans, Nat.div_zero, OfNat.ofNat, Nat.mul_zero, Nat.zero_le, Iff.mp, Nat.le_div_iff_mul_le, Nat.succ_pos, Nat.le_refl, HAdd.hAdd],[LE.le, HMul.hMul, HDiv.hDiv]]
[List.length_erasep_of_mem,[Eq, List.length, List.erasep, Nat.pred, List.exists_of_erasep, Eq.mpr, Eq.refl, congr, congrArg, List.length_append, Eq.trans, List.cons, HAdd.hAdd, List.length_cons, rfl],[Eq, List.length, List.erasep, Nat.pred]]
[List.take,[List, List.nil, List.cons, PProd.fst],[List]]
[List.tail?,[Unit.unit, Option, List, Option.none, Option.some],[Option, List]]
[List.eraseDup,[List.pwFilter, Ne],[List]]
[Float.ofBinaryScientific,[Float.scaleB, UInt64.toFloat],[Float]]
[MonadState.set,[],[PUnit]]
[instToBoolBool,[ToBool.mk],[ToBool, Bool]]
[Iff.mpr,[],[]]
[ST.instInhabitedRef,[Inhabited.mk, ST.Ref.mk, PointedType.val, ST.RefPointed, ST.instInhabitedRef.proof_1],[Inhabited, ST.Ref]]
[Fin.div,[Fin, Fin.mk, HMod.hMod, HDiv.hDiv, Fin.div.proof_1],[Fin]]
[lt_by_cases,[dite, LT.lt, lt_by_cases.proof_1],[]]
[ToString.noConfusionType,[],[]]
[Quotient.rec,[Quot.rec],[]]
[Nat.dvd_of_mul_dvd_mul_right,[Nat.dvd_of_mul_dvd_mul_left, Eq.mp, Eq.refl, Dvd.dvd, HMul.hMul, Nat.mul_comm],[Dvd.dvd]]
[PLift.down_up,[rfl],[Eq, PLift.down, PLift.up]]
[cast,[],[]]
[USize.lor,[USize.mk, Fin.lor, USize.val],[USize]]
[forall₄_congr,[forall_congr', forall₃_congr],[Iff]]
[instLEUInt16,[LE.mk, UInt16.le],[LE, UInt16]]
[not_false_iff,[iff_true_intro, not_false],[Iff, Not, False, True]]
[System.FilePath.parent,[Functor.map, System.FilePath.mk, String.extract, System.FilePath.toString, OfNat.ofNat, String.revFind, List.contains, System.FilePath.pathSeparators],[Option, System.FilePath]]
[Tactic.Ring.HornerExpr.e,[Lean.Expr],[Lean.Expr]]
[ExceptT.run_bind,[rfl],[Eq, ExceptT.run, Bind.bind, Except, Pure.pure, Except.error]]
[decidable_of_bool,[Decidable, Decidable.isTrue, decidable_of_bool.proof_1, Decidable.isFalse, decidable_of_bool.proof_2],[Decidable]]
[ReaderT.ext,[funext, id],[Eq]]
[Semigroup.noConfusionType,[],[]]
[USize.instSemigroupUSize,[Semigroup.mk, USize.instSemigroupUSize.proof_1],[Semigroup, USize]]
[UInt8.instSemiringUInt8.proof_4,[congrArg, UInt8.mk, AddMonoid.nsmul_succ', UInt8.val],[Eq, UInt8.mk, Semiring.nsmul, Nat.succ, UInt8.val]]
[unique_of_exists_unique,[Eq, Eq.trans, Eq.symm],[Eq]]
[Nat.eq_or_lt_of_not_lt,[Or.resolve_left, Nat.lt_trichotomy],[Or, Eq, LT.lt]]
[is_dec_refl,[Eq, Bool.true],[]]
[instCommRingFin.proof_1,[Fin.eq_of_val_eq, of_eq_true, Eq.trans, congr, congrArg, Eq, Fin.val, Fin.mul_def, congrFun, HMod.hMod, Nat.mul_comm, eq_self, HMul.hMul],[Eq, HMul.hMul]]
[Nat.toUInt16,[UInt16.ofNat],[UInt16]]
[Ordering.gt.sizeOf_spec,[Eq.refl, OfNat.ofNat],[Eq, SizeOf.sizeOf, Ordering.gt, OfNat.ofNat]]
[Except.instMonadExcept,[Monad.mk],[Monad, Except]]
[Append.noConfusionType,[],[]]
[String.map,[String.mapAux, OfNat.ofNat],[String]]
[PUnit.unit.sizeOf_spec,[Eq.refl, OfNat.ofNat],[Eq, SizeOf.sizeOf, PUnit.unit, OfNat.ofNat]]
[false_of_true_eq_false,[trivial],[False]]
[Mathlib.TermUnsafe.termUnsafe_,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.symbol, Lean.ParserDescr.cat],[Lean.ParserDescr]]
[USize.instSemiringUSize.proof_3,[congrArg, USize.mk, Semiring.nsmul_zero', USize.val],[Eq, USize.mk, Semiring.nsmul, OfNat.ofNat, USize.val]]
[FloatArray.empty,[FloatArray.mkEmpty, OfNat.ofNat],[FloatArray]]
[Array.instHAppendArrayListArray,[HAppend.mk, Array.appendList],[HAppend, Array, List]]
[Function.inv_fun_eq,[Function.inv_fun_on_eq, Exists, And, Mem.mem, Set.univ, Eq, Exists.intro, And.intro, trivial],[Eq, Function.inv_fun]]
[instOfNatUSize,[OfNat.mk, USize.ofNat],[OfNat, USize]]
[iff_true_left,[Iff.intro, Iff.mp, iff_of_true],[Iff]]
[System.FilePath.withFileName,[Unit.unit, System.FilePath, System.FilePath.parent, System.FilePath.mk, HDiv.hDiv],[System.FilePath]]
[String.decEq.proof_1,[congrArg, String.mk],[Eq, String.mk]]
[Not,[False],[]]
[Complement.noConfusionType,[],[]]
[UInt32.instSemiringUInt32.proof_5,[of_eq_true, Eq.trans, forall_congr, congr, congrArg, Eq, congrFun, HMul.hMul, UInt32.zero_def, UInt32.mul_def, UInt32.mk, OfNat.ofNat, MonoidWithZero.zero_mul, UInt32.val, eq_true_of_decide, Eq.refl, Bool.true, propext, forall_const, UInt32],[Eq, HMul.hMul, OfNat.ofNat]]
[Mathlib.Tactic.Lint.NamedLinter.name,[Lean.Name.updatePrefix, Mathlib.Tactic.Lint.NamedLinter.declName, Lean.Name.anonymous],[Lean.Name]]
[List.empty_eq,[rfl],[Eq, EmptyCollection.emptyCollection, List.nil]]
[Decidable.byCases,[],[]]
[forall_prop_decidable.proof_1,[Iff.intro],[Iff]]
[List.erasep_subset,[List.exists_or_eq_self_of_erasep, Eq.mpr, Eq.refl, Mem.mem, List.subset.refl, Eq.symm, HAppend.hAppend, List.cons, propext, List.mem_append, Or, Or.inl, Or.inr, List.mem_cons_of_mem],[Subset.subset, List.erasep]]
[trivial,[True.intro],[True]]
[tacticMatchTarget_,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.nonReservedSymbol, Bool.false, Lean.ParserDescr.cat],[Lean.ParserDescr]]
[Array.forM,[Array.foldlM, PUnit.unit],[PUnit]]
[Function.involutive.right_inverse,[],[Function.right_inverse]]
[Nat.instModNat,[Mod.mk, Nat.mod],[Mod, Nat]]
[UInt64.instRingUInt64.proof_1,[congrArg, UInt64.mk, Ring.sub_eq_add_neg, UInt64.val],[Eq, UInt64.mk]]
[List.mem_insert_iff,[Classical.em, Mem.mem, Eq.mpr, Eq.refl, Iff, List.insert, Or, Eq, List.insert_of_mem, Iff.intro, Or.inr, Eq.symm, List.insert_of_not_mem, Iff.rfl],[Iff, Mem.mem, List.insert, Or, Eq]]
[LawfulFunctor.comp_map,[],[Eq, Functor.map, Function.comp]]
[Function.injective.eq_iff',[Function.injective.eq_iff],[Iff, Eq]]
[randNat,[Prod, Nat, Prod.mk],[Prod, Nat]]
[liftM,[MonadLiftT.monadLift],[]]
[UInt64.instAddSemigroupUInt64,[AddSemigroup.mk, UInt64.instAddSemigroupUInt64.proof_1],[AddSemigroup, UInt64]]
[instMonadFinallyEIO,[inferInstanceAs, MonadFinally, EStateM, IO.RealWorld],[MonadFinally, EIO]]
[Array.mapSepElems,[Id.run, Array.mapSepElemsM],[Array, Lean.Syntax]]
[UInt8.toChar,[Char.mk, UInt8.toUInt32, UInt8.toChar.proof_1],[Char]]
[IsAddRightCancel.noConfusionType,[],[]]
[withPtrAddr,[OfNat.ofNat],[]]
[List.map₂,[List.nil, List.cons, List, PProd.fst],[List]]
[Nat.decLe,[dite, Eq, Nat.ble, Bool.true, Decidable.isTrue, Nat.le_of_ble_eq_true, Decidable.isFalse, Nat.not_le_of_not_ble_eq_true],[Decidable, LE.le]]
[Substring.trim,[Substring, Substring.mk],[Substring]]
[Monoid.npow_zero',[],[Eq, Monoid.npow, OfNat.ofNat]]
[Subarray.noConfusionType,[],[]]
[List.findSome?,[Unit.unit, Option, Option.none, Option.some, PProd.fst],[Option]]
[Function.sometimes,[dite, Nonempty, Classical.choice],[]]
[Quotient,[Quot, Setoid.r],[]]
[UInt16.shiftLeft,[UInt16.mk, HShiftLeft.hShiftLeft, UInt16.val, UInt16.modn, OfNat.ofNat],[UInt16]]
[runEST,[Except, Unit, Unit.unit, Except.ok, Except.error],[Except]]
[OptionT.instMonadOptionT,[Monad.mk],[Monad, OptionT]]
[TC.wf.proof_1,[WellFounded.intro, TC.accessible, WellFounded.apply],[WellFounded, TC]]
[Sum.inl.inj,[],[Eq]]
[or_iff_not_and_not,[Decidable.or_iff_not_and_not],[Iff, Or, Not, And]]
[EStateM.Result.noConfusionType,[],[]]
[instDecidableIff.proof_2,[Iff.mp],[False]]
[Nat.shiftRight,[Nat, HDiv.hDiv, PProd.fst, OfNat.ofNat],[Nat]]
[DivInvMonoid.toDiv,[],[Div]]
[Substring.nextn,[String.Pos, PProd.fst, Substring.next],[String.Pos]]
[plift.down,[],[]]
[not_of_iff_false,[Iff.mp],[Not]]
[instReprAtomUSize,[ReprAtom.mk],[ReprAtom, USize]]
[List.isEmpty,[Unit.unit, Bool, Bool.true, Bool.false],[Bool]]
[List.find?,[Unit.unit, Option, Option.none, Option.some, PProd.fst],[Option]]
[Except.pure,[Except.ok],[Except]]
[instToStringId,[inferInstanceAs, ToString],[ToString, id]]
[USize.mul_def,[rfl],[Eq, HMul.hMul, USize.mk, USize.val]]
[instDecidableLe_4,[USize.decLe],[Decidable, LE.le]]
[Array.ofSubarray,[Id.run, Bind.bind, ForIn.forIn, Pure.pure, PUnit.unit, ForInStep.yield],[Array]]
[List.exists_mem_of_length_pos,[Exists, Mem.mem, Eq.refl, List.length, List.nil, HEq.refl, Exists.intro, List.mem_cons_self],[Exists, Mem.mem]]
[«term{}»,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.symbol],[Lean.ParserDescr]]
[Option.map_id,[funext, Unit.unit, Eq, Option.map, id, rfl],[Eq, Option.map, id]]
[ST.Ref.mk.injEq,[Eq.propIntro, Eq.refl, ST.Ref.mk, Eq.symm, eq_of_heq, HEq.refl],[Eq, ST.Ref.mk]]
[Option.instDecidableRelLt,[Unit.unit, Decidable, Option.lt, Decidable.isTrue, trivial, Decidable.isFalse, not_false],[DecidableRel, Option.lt]]
[Mathlib.Tactic.Lint.elements,[Bind.bind, ForIn.forIn, PUnit.unit, StateT, Array, Id, ForInStep, PUnit, Mathlib.Tactic.Lint.trieElements, Pure.pure, ForInStep.yield],[StateT, Array, Id, Unit]]
[not_imp_of_and_not,[False],[Not]]
[Char.ne_of_val_ne,[absurd, Char.val_eq_of_eq],[Not, Eq]]
[AddCommSemigroup.noConfusionType,[],[]]
[instHashableUInt32,[Hashable.mk, UInt32.toUInt64],[Hashable, UInt32]]
[List.subset_append_of_subset_left,[List.subset.trans, List.subset_append_left],[Subset.subset, HAppend.hAppend]]
[le_of_lt,[LE.le, And.left, le_not_le_of_lt],[LE.le]]
[String.decEq,[Decidable, Eq, dite, Decidable.isTrue, String.decEq.proof_1, Decidable.isFalse, String.decEq.proof_2],[Decidable, Eq]]
[System.instToStringFilePath,[ToString.mk, System.FilePath.toString],[ToString, System.FilePath]]
[Stream.next?,[],[Option, Prod]]
[forall_eq,[Iff.intro, rfl, Eq.symm],[Iff]]
[UInt8.shiftLeft,[UInt8.mk, HShiftLeft.hShiftLeft, UInt8.val, UInt8.modn, OfNat.ofNat],[UInt8]]
[List.forIn.loop,[Pure.pure, Bind.bind, PProd.fst],[]]
[EStateM.orElse,[EStateM.Result.ok, EStateM.Result, Unit.unit, EStateM.Backtrackable.restore],[EStateM]]
[Array.qpartition,[Array.qpartition.loop],[Prod, Nat, Array]]
[Mathlib.Tactic.Lint.instInhabitedLintVerbosity,[Inhabited.mk, Mathlib.Tactic.Lint.LintVerbosity.low],[Inhabited, Mathlib.Tactic.Lint.LintVerbosity]]
[Sum.inl.sizeOf_spec,[Eq.refl, HAdd.hAdd, OfNat.ofNat, SizeOf.sizeOf],[Eq, SizeOf.sizeOf, Sum.inl, HAdd.hAdd, OfNat.ofNat]]
[stx_?,[Lean.ParserDescr.trailingNode, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.symbol],[Lean.TrailingParserDescr]]
[Nat.coprime_one_left_iff,[of_eq_true, Eq.trans, congr, congrArg, Iff, congrFun, Eq, Nat.gcd_one_left, OfNat.ofNat, eq_true_of_decide, Eq.refl, Bool.true],[Iff, Nat.coprime, OfNat.ofNat, Eq, Bool.true]]
[instXorUSize,[Xor.mk, USize.xor],[Xor, USize]]
[Array.toListLitAux.proof_1,[Nat.le_of_succ_le],[LE.le, Array.size]]
[«term_⊕'_»,[Lean.ParserDescr.trailingNode, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.symbol, Lean.ParserDescr.cat],[Lean.TrailingParserDescr]]
[String.atEnd,[Bool, Decidable.decide, GE.ge, String.utf8ByteSize],[Bool]]
[Nat.sub_add_min_cancel,[Eq.mpr, Eq.refl, Eq, HAdd.hAdd, HSub.hSub, min, Nat.sub_eq_sub_min, Nat.sub_add_cancel, min_le_left, rfl],[Eq, HAdd.hAdd, HSub.hSub, min]]
[Nat.div_eq_of_eq_mul_right,[Eq.mpr, Eq.refl, Eq, HDiv.hDiv, HMul.hMul, Nat.mul_div_cancel_left, rfl],[Eq, HDiv.hDiv]]
[Array.concatMapM,[Array.foldlM, Bind.bind, Pure.pure, HAppend.hAppend, Array.empty, OfNat.ofNat, Array.size],[Array]]
[let_congr,[],[Eq]]
[Nat.lt_of_le_and_ne,[LT.lt, Nat.eq_or_lt_of_le, absurd],[LT.lt]]
[instSemigroupFin,[Semigroup.mk, instSemigroupFin.proof_1],[Semigroup, Fin]]
[instInhabitedExceptT,[Inhabited.mk, MonadExcept.throw, arbitrary],[Inhabited, ExceptT]]
[not_or_intro,[False, absurd],[Not, Or]]
[UInt32.decLe,[Decidable, LE.le, inferInstanceAs],[Decidable, LE.le]]
[List.insert_of_not_mem,[of_eq_true, Eq.trans, congrFun, congrArg, Eq, if_neg, List, List.cons, eq_self],[Eq, List.insert, List.cons]]
[List.mem_singleton,[Iff.intro, List.eq_of_mem_singleton, Or.inl],[Iff, Mem.mem, List.cons, List.nil, Eq]]
[Numeric.ofNat,[],[]]
[Int.noConfusionType,[],[]]
[Task.get,[],[]]
[Int.pow,[Unit.unit, Int, OfNat.ofNat, HMul.hMul, PProd.fst],[Int]]
[Nat.pred_le_pred,[Nat.zero, Eq.symm, eq_of_heq, Eq.refl, HEq.refl, Nat.succ, LE.le, Nat.pred, Nat.le.refl, Nat.le_trans, Nat.le_succ],[LE.le, Nat.pred]]
[or_imp_distrib,[Iff.intro, And.intro, Or.inl, Or.inr],[Iff, And]]
[Classical.inhabited_of_exists,[Classical.inhabited_of_nonempty, Classical.inhabited_of_exists.proof_1],[Inhabited]]
[String.Iterator.setCurr,[String.Iterator, String.Iterator.mk, String.set],[String.Iterator]]
[ExceptT.map,[ExceptT.mk, Bind.bind, Except, Pure.pure, Except.ok, Except.error],[ExceptT]]
[Array.swap!,[dite, LT.lt, Array.size, Array.swap, Fin.mk, panicWithPosWithDecl, OfNat.ofNat],[Array]]
[Mathlib.Tactic.Lint.LintVerbosity.toCtorIdx,[OfNat.ofNat],[Nat]]
[setOf,[],[Set]]
[Mathlib.Tactic.Lint.Linter.mk.sizeOf_spec,[Eq.refl, HAdd.hAdd, OfNat.ofNat, SizeOf.sizeOf],[Eq, SizeOf.sizeOf, Mathlib.Tactic.Lint.Linter.mk, HAdd.hAdd, OfNat.ofNat]]
[EStateM.set,[EStateM.Result.ok, PUnit.unit],[EStateM, PUnit]]
[StateT.instMonadExceptOfStateT,[MonadExceptOf.mk, Function.comp, StateT.lift, throwThe, tryCatchThe],[MonadExceptOf, StateT]]
[AddMonoid.nsmul_zero',[],[Eq, AddMonoid.nsmul, OfNat.ofNat]]
[Nat.le_succ_of_le,[Nat.le_trans, Nat.le_succ],[LE.le, Nat.succ]]
[Fin.div.proof_1,[LT.lt, HMod.hMod, Nat.mod_lt],[LT.lt, HMod.hMod, HDiv.hDiv]]
[ReaderT.run,[],[]]
[instBEqFloat,[BEq.mk, Float.beq],[BEq, Float]]
[«term_>>_»,[Lean.ParserDescr.trailingNode, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.symbol, Lean.ParserDescr.cat],[Lean.TrailingParserDescr]]
[Classical.inhabited_of_exists.proof_1,[Exists.elim, Nonempty.intro],[Nonempty]]
[Iff.mp,[],[]]
[Not.imp,[mt],[Not]]
[StateT.orElse,[HOrElse.hOrElse, Unit.unit],[StateT]]
[exists_prop_decidable.proof_1,[Iff.intro, Exists.intro],[Iff, Exists]]
[Nat.pow_le_pow_of_le_left,[Unit.unit, LE.le, HPow.hPow, Nat.le_refl, OfNat.ofNat, Nat.mul_le_mul, PProd.fst],[LE.le, HPow.hPow]]
[List.hasDecEq.proof_4,[rfl],[Eq, List.cons]]
[List.lookup,[Option, Option.none, Unit.unit, BEq.beq, Option.some, PProd.fst],[Option]]
[System.FilePath.instHDivFilePathStringFilePath,[HDiv.mk, System.FilePath.join, System.FilePath.mk],[HDiv, System.FilePath, String]]
[Nat.coprime.pow_left,[Nat.coprime_one_left],[Nat.coprime, HPow.hPow]]
[PSigma.revLexAccessible,[PSigma.revLexAccessible.proof_1],[Acc, PSigma.RevLex, PSigma.mk]]
[dite_true,[rfl],[Eq, dite, True, True.intro]]
[left_identity,[Eq],[]]
[Tactic.Ring.State.numAtoms,[],[Nat]]
[Sum.inr.sizeOf_spec,[Eq.refl, HAdd.hAdd, OfNat.ofNat, SizeOf.sizeOf],[Eq, SizeOf.sizeOf, Sum.inr, HAdd.hAdd, OfNat.ofNat]]
[prioDefault,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.nonReservedSymbol, Bool.false],[Lean.ParserDescr]]
[«term_&&_»,[Lean.ParserDescr.trailingNode, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.symbol, Lean.ParserDescr.cat],[Lean.TrailingParserDescr]]
[instMonadLiftT_1,[MonadLiftT.mk],[MonadLiftT]]
[and_implies,[And.imp],[And]]
[instReprId,[inferInstanceAs, Repr],[Repr, id]]
[Nat.instOrOpNat,[OrOp.mk, Nat.lor],[OrOp, Nat]]
[UInt16.mk_val_eq,[Eq, UInt16.mk, UInt16.val, rfl],[Eq, UInt16.mk, UInt16.val]]
[LawfulMonad.bind_pure_comp,[],[Eq, Bind.bind, Pure.pure, Functor.map]]
[Nat.mul,[Nat, OfNat.ofNat, Nat.add, PProd.fst],[Nat]]
[List.ne_nil_of_mem,[False, Eq.mp, Eq.refl, Mem.mem],[Ne, List.nil]]
[Function.uncurry_bicompl,[funext, Eq, Function.uncurry, Function.bicompl, Function.comp, Prod.map, rfl],[Eq, Function.uncurry, Function.bicompl, Function.comp, Prod.map]]
[Nat.mul_dvd_mul_right,[Nat.mul_dvd_mul, Nat.dvd_refl],[Dvd.dvd, HMul.hMul]]
[CommSemigroup.noConfusionType,[],[]]
[Iff.subst,[Eq.subst, propext],[]]
[Mathlib.Tactic.rename',[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.nonReservedSymbol, Bool.false, Lean.ParserDescr.sepBy, Lean.ParserDescr.const, Lean.ParserDescr.cat, Lean.ParserDescr.symbol],[Lean.ParserDescr]]
[LawfulApplicative.seqLeft_eq,[],[Eq, SeqLeft.seqLeft, Seq.seq, Functor.map, Function.const]]
[Char.isWhitespace,[or, Decidable.decide, Eq, Char.ofNat],[Bool]]
[Set.instFunctorSet,[Functor.mk, Set.image],[Functor, Set]]
[Nat.mod,[WellFounded.fix, Nat.mod.proof_1, dite, And, LT.lt, OfNat.ofNat, LE.le, HSub.hSub, Nat.sub_lt, Nat.lt_of_lt_of_le],[Nat]]
[List.pairwise.brecOn,[List.pairwise.below.nil, List.pairwise.below.cons],[]]
[and_congr_left,[Iff.trans, And.comm, and_congr_right],[Iff, And]]
[instLEUSize,[LE.mk, USize.le],[LE, USize]]
[List.forall_mem_cons,[List.ball_cons],[Iff, And]]
[Substring.take,[Substring.mk, Substring, HAdd.hAdd, Substring.nextn, OfNat.ofNat],[Substring]]
[List.erase_cons_tail,[of_eq_true, Eq.trans, congrFun, congrArg, Eq, List.erase_cons, if_neg, List, List.cons, List.erase, eq_self],[Eq, List.erase, List.cons]]
[Applicative.toSeqRight,[],[SeqRight]]
[«binderTerm∈_»,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.symbol, Lean.ParserDescr.cat],[Lean.ParserDescr]]
[List.allM,[Unit.unit, Bool, Pure.pure, Bool.true, Bind.bind, PProd.fst, Bool.false],[Bool]]
[bool,[Unit.unit, ToBool.toBool],[]]
[Int.coe_nat_sub,[Int.ofNat_sub],[Eq, Int.ofNat, HSub.hSub]]
[System.instCoeStringFilePath,[Coe.mk, System.FilePath.mk],[Coe, String, System.FilePath]]
[cast_heq,[Eq.symm, eq_of_heq, Eq.refl, HEq.refl, HEq, cast],[HEq, cast]]
[Classical.typeDecidableEq,[inferInstance],[DecidableEq]]
[instToStringPUnit,[ToString.mk],[ToString, PUnit]]
[Nat.mul_le_mul_of_nonneg_left,[Decidable.em, LE.le, Eq.mpr, congrArg, HMul.hMul, Nat.le_antisymm, Nat.le_refl, Eq.symm, OfNat.ofNat, of_eq_true, Eq.trans, congr, congrFun, Nat.zero_le, Nat.zero_mul, eq_true_of_decide, Eq.refl, Bool.true, Nat.le_of_lt, Nat.mul_lt_mul_of_pos_left, Iff.mp, not_le],[LE.le, HMul.hMul]]
[ExceptT.run_lift,[rfl],[Eq, ExceptT.run, ExceptT.lift, Functor.map, Except.ok]]
[ReaderT.run_seq,[Eq.mpr, Eq.refl, Eq, ReaderT.run, Seq.seq, seq_eq_bind, rfl],[Eq, ReaderT.run, Seq.seq]]
[List.drop,[List, List.nil, PProd.fst],[List]]
[fixCore4,[bfix4, USize.size],[]]
[instOfScientificFloat,[OfScientific.mk, ite, Eq, Bool.true, Float.ofBinaryScientific, HSub.hSub, HMul.hMul, Neg.neg, OfNat.ofNat, Int.ofNat, HPow.hPow],[OfScientific, Float]]
[List.disjoint_right,[List.disjoint_comm],[Iff, List.disjoint, Not, Mem.mem]]
[ByteSlice.mk.sizeOf_spec,[Eq.refl, HAdd.hAdd, OfNat.ofNat, SizeOf.sizeOf],[Eq, SizeOf.sizeOf, ByteSlice.mk, HAdd.hAdd, OfNat.ofNat]]
[String.capitalize,[String.set, OfNat.ofNat, Char.toUpper, String.get],[String]]
[instToStringFloat,[ToString.mk, Float.toString],[ToString, Float]]
[UInt8.instAddCommSemigroupUInt8,[AddCommSemigroup.mk, UInt8.instAddCommSemigroupUInt8.proof_1],[AddCommSemigroup, UInt8]]
[ExceptCpsT.instInhabitedExceptCpsT,[Inhabited.mk, arbitrary],[Inhabited, ExceptCpsT]]
[Mathlib.TermUnsafe.mkAuxName,[Lean.MonadQuotation.withFreshMacroScope, Bind.bind, Lean.Elab.Term.getDeclName?, Lean.MonadQuotation.getMainModule, Lean.MonadQuotation.getCurrMacroScope, Pure.pure, Lean.addMacroScope],[Lean.Elab.Term.TermElabM, Lean.Name]]
[Tactic.Ring.tacticRing,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.nonReservedSymbol, Bool.false],[Lean.ParserDescr]]
[imp_not_self,[Iff.intro],[Iff, Not]]
[Int.ofNat_one,[rfl],[Eq, Int.ofNat, OfNat.ofNat]]
[Int.mul,[Int, Int.ofNat, HMul.hMul, Int.negOfNat, Nat.succ],[Int]]
[Nat.mod_eq_zero_of_dvd,[Exists.elim, Eq.mpr, Eq.refl, Eq, HMod.hMod, OfNat.ofNat, HMul.hMul, Nat.mul_mod_right, rfl],[Eq, HMod.hMod, OfNat.ofNat]]
[Int.zero_add,[Int.add_zero, Int.add_comm, OfNat.ofNat],[Eq, HAdd.hAdd, OfNat.ofNat]]
[GroupWithZero.mul_zero,[],[Eq, HMul.hMul, OfNat.ofNat]]
[Subarray.foldrM,[Array.foldrM, Subarray.as, Subarray.stop, Subarray.start],[]]
[List.ne_of_not_mem_cons,[absurd, Or.inl],[Ne]]
[List.mem_join_of_mem,[Iff.mpr, List.mem_join, Exists.intro, And.intro],[Mem.mem, List.join]]
[Nat.decidable_dvd,[decidable_of_decidable_of_iff, inferInstance, Nat.decidable_dvd.proof_1],[DecidableRel, Dvd.dvd]]
[Function.has_left_inverse,[Exists, Function.left_inverse],[]]
[List.disjoint_of_subset_right,[],[List.disjoint]]
[Int.ofNat_eq_ofNat_iff,[Iff.intro, Int.ofNat.inj, congr_arg, Int.ofNat],[Iff, Eq, Int.ofNat]]
[instAddFloat,[Add.mk, Float.add],[Add, Float]]
[unexpandListToArray,[ite, Eq, Lean.Syntax.isOfKind, Lean.Name.mkStr, Lean.Name.anonymous, Bool.true, Lean.Syntax.matchesNull, OfNat.ofNat, Bind.bind, Lean.MonadRef.mkInfoFromRefPos, Lean.MonadQuotation.getCurrMacroScope, Lean.MonadQuotation.getMainModule, Pure.pure, Lean.Syntax.node, Lean.SourceInfo.none, List.toArray, List.cons, Lean.Syntax.atom, Array.append, List.nil, Lean.Syntax.SepArray.elemsAndSeps, MonadExcept.throw, Unit.unit],[Lean.PrettyPrinter.Unexpander]]
[List.length_insert_of_mem,[Eq.mpr, Eq.refl, Eq, List.length, List.insert, List.insert_of_mem, rfl],[Eq, List.length, List.insert]]
[decidable_eq_of_bool_pred.proof_1,[absurd, Eq.mp, Eq.refl, Not, Eq, Bool.true],[False]]
[«term‹_›»,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.symbol, Lean.ParserDescr.cat],[Lean.ParserDescr]]
[List.Perm_comm,[Iff.intro, List.Perm.symm],[Iff, List.Perm]]
[CoeTC.coe,[],[]]
[Nat.isValidChar,[Or, LT.lt, OfNat.ofNat, And],[]]
[FloatArray.mk.injEq,[Eq.propIntro, Eq.refl, FloatArray.mk, Eq.symm, eq_of_heq, HEq.refl],[Eq, FloatArray.mk]]
[modifyGetThe,[MonadStateOf.modifyGet],[]]
[String.toFormat,[Std.Format.joinSep, String.splitOn, Std.Format.line],[Std.Format]]
[Int.ofNat_sub,[],[Eq, Int.ofNat, HSub.hSub]]
[UInt64.ofNatCore,[UInt64.mk, Fin.mk],[UInt64]]
[String.utf16PosToCodepointPos,[String.utf16PosToCodepointPosFrom, OfNat.ofNat],[Nat]]
[Subtype.equivalence,[Equivalence.mk, Subtype.refl, Subtype.symm, Subtype.trans],[Equivalence, HasEquiv.Equiv]]
[if_congr,[if_ctx_congr],[Eq, ite]]
[instToStringSubstring,[ToString.mk, Substring.toString],[ToString, Substring]]
[le_imp_le_of_lt_imp_lt,[le_of_not_lt, not_le_of_gt],[LE.le]]
[instReprTuple,[ReprTuple.mk, List.cons, repr],[ReprTuple]]
[instMonadControlStateRefT',[inferInstanceAs, MonadControl, ReaderT, ST.Ref],[MonadControl, StateRefT']]
[Equiv.symm_apply_apply,[Equiv.leftInv],[Eq, Equiv.toFun, Equiv.symm]]
[Int.negSucc_ofNat_coe,[rfl],[Eq, Int.negSucc, Neg.neg, Int.ofNat, HAdd.hAdd, OfNat.ofNat]]
[eq_self,[propext, Iff.intro, trivial, rfl],[Eq, True]]
[Mathlib.Tactic.Ext.«termExtIffProof%»,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.symbol],[Lean.ParserDescr]]
[Set.instLawfulFunctorSet,[Set.instLawfulFunctorSet.proof_1],[LawfulFunctor, Set]]
[instHashable,[Hashable.mk, OfNat.ofNat],[Hashable]]
[ByteArray.extract,[ByteArray.copySlice, ByteArray.empty, OfNat.ofNat, HSub.hSub, Bool.true],[ByteArray]]
[Fin.size_positive,[LT.lt, OfNat.ofNat, Nat.eq_or_lt_of_le, Nat.zero_le, Eq.symm, Nat.lt_trans],[LT.lt, OfNat.ofNat]]
[Subtype.coind,[Subtype.mk],[Subtype]]
[unexpandEqNDRec,[ite, Eq, Lean.Syntax.isOfKind, Lean.Name.mkStr, Lean.Name.anonymous, Bool.true, Lean.Syntax.matchesNull, OfNat.ofNat, Bind.bind, Lean.MonadRef.mkInfoFromRefPos, Lean.MonadQuotation.getCurrMacroScope, Lean.MonadQuotation.getMainModule, Pure.pure, Lean.Syntax.node, Lean.SourceInfo.none, List.toArray, List.cons, Lean.Syntax.atom, List.nil, MonadExcept.throw, Unit.unit],[Lean.PrettyPrinter.Unexpander]]
[Nat.mod_zero,[],[Eq, HMod.hMod, OfNat.ofNat]]
[FloatArray.forInUnsafe,[OfNat.ofNat, FloatArray.forInUnsafe.loop],[]]
[Nat.add_eq,[rfl],[Eq, Nat.add, HAdd.hAdd]]
[UInt64.zero_def,[rfl],[Eq, OfNat.ofNat, UInt64.mk]]
[ByteSlice.len,[],[Nat]]
[Nat.exists_coprime,[Exists.intro, HDiv.hDiv, Nat.gcd, And.intro, Nat.coprime_div_gcd_div_gcd, Eq.symm, Nat.div_mul_cancel, Nat.gcd_dvd_left, Nat.gcd_dvd_right],[Exists, And, Nat.coprime, Eq, HMul.hMul, Nat.gcd]]
[instDecidableIff.proof_4,[Iff.intro, absurd],[Iff]]
[Mathlib.Tactic.Lint.Linter.noConfusionType,[],[]]
[Subtype.restrict_def,[rfl],[Eq, Subtype.restrict, Function.comp, CoeHead.coe]]
[USize.sub,[USize.mk, HSub.hSub, USize.val],[USize]]
[not_not_not,[Iff.intro, mt, not_not_intro],[Iff, Not]]
[Tactic.Ring.Cache.mk.injEq,[Eq.propIntro, And.intro, Eq.refl, Tactic.Ring.Cache.mk, Eq.symm, eq_of_heq, HEq.refl],[Eq, Tactic.Ring.Cache.mk, And]]
[UInt32.decEq,[Decidable, Eq, dite, Decidable.isTrue, UInt32.decEq.proof_1, Decidable.isFalse, UInt32.decEq.proof_2],[Decidable, Eq]]
[instSubsingletonForall,[instSubsingletonForall.proof_1],[Subsingleton]]
[List.decidableMem,[Unit.unit, Decidable, Mem.mem, Decidable.isFalse, not_false, dite, Eq, Decidable.isTrue, List.decidableMem.proof_1, List.cons, PProd.fst, List.decidableMem.proof_2, List.decidableMem.proof_3],[Decidable, Mem.mem]]
[add_neg_cancel_right,[Eq.mpr, Eq.refl, Eq, HAdd.hAdd, Neg.neg, add_assoc, add_right_neg, OfNat.ofNat, add_zero, rfl],[Eq, HAdd.hAdd, Neg.neg]]
[imp_true_iff,[iff_true_intro, trivial],[Iff, True]]
[Prod.map,[Prod, Prod.mk],[Prod]]
[instDecidableXor.proof_2,[Or.inl, And.intro],[Or, And, Not]]
[instModUSize,[Mod.mk, USize.mod],[Mod, USize]]
[String.leftpad,[String.mk, List.leftpad, String.data],[String]]
[List.append_eq_nil,[of_eq_true, Eq.trans, congr, congrArg, Iff, congrFun, Eq, List.nil_append, List.nil, And, eq_self, true_and, iff_self, Eq.symm, List.cons_append, eq_false', false_and, eq_true_of_decide, Eq.refl, Bool.true],[Iff, Eq, HAppend.hAppend, List.nil, And]]
[Quot.exists_rep,[Quot.inductionOn, Exists.intro, rfl],[Exists, Eq, Quot.mk]]
[and,[Unit.unit, Bool, Bool.false],[Bool]]
[Prod.rprod,[WellFoundedRelation.mk, Prod.RProd, WellFoundedRelation.rel, Prod.rprod.proof_1],[WellFoundedRelation, Prod]]
[UInt64.toUInt32,[Nat.toUInt32, UInt64.toNat],[UInt32]]
[Tactic.Ring.horner_horner,[of_eq_true, Eq.trans, congr, congrArg, Eq, congrFun, HAdd.hAdd, HMul.hMul, add_zero, HPow.hPow, mul_assoc, Eq.symm, pow_add, eq_self],[Eq, Tactic.Ring.horner, OfNat.ofNat]]
[EStateM.modifyGet,[EStateM.Result, EStateM.Result.ok],[EStateM]]
[String.takeRightWhile,[Substring.toString, Substring.takeRightWhile, String.toSubstring],[String]]
[Nat.add,[Nat, Nat.succ, PProd.fst],[Nat]]
[Function.left_inverse_of_surjective_of_right_inverse,[Eq, Eq.mpr, Eq.refl, Eq.symm, rfl],[Function.left_inverse]]
[instForIn,[ForIn.mk, Stream.forIn],[ForIn]]
[Nat.gcd_one_left,[Eq.mpr, Eq.refl, Eq, Nat.gcd, OfNat.ofNat, Nat.gcd_succ, HMod.hMod, Nat.succ, Nat.mod_one, rfl],[Eq, Nat.gcd, OfNat.ofNat]]
[not_and_not_right,[Decidable.not_and_not_right],[Iff, Not, And]]
[Monad.noConfusionType,[],[]]
[Nat.add_lt_add_right,[Nat.add_lt_add_left, Nat.add_comm],[LT.lt, HAdd.hAdd]]
[Ring.noConfusionType,[],[]]
[instShiftLeftUInt64,[ShiftLeft.mk, UInt64.shiftLeft],[ShiftLeft, UInt64]]
[not_imp_self,[Decidable.not_imp_self],[Iff]]
[Tactic.Ring.evalConstMul,[Tactic.Ring.RingM, Prod, Tactic.Ring.HornerExpr, Lean.Expr, Bind.bind, liftM, Lean.Meta.mkMul, Prod.fst, Lean.Meta.NormNum.eval, Pure.pure, Prod.mk, Tactic.Ring.HornerExpr.const, HMul.hMul, Prod.snd, PProd.fst, PProd.snd, Tactic.Ring.HornerExpr.xadd', Tactic.Ring.mkAppCS, Lean.Name.mkStr, Lean.Name.anonymous, List.toArray, List.cons, Tactic.Ring.HornerExpr.e, List.nil],[Tactic.Ring.RingM, Prod, Tactic.Ring.HornerExpr, Lean.Expr]]
[Nat.coprime.dvd_of_dvd_mul_right,[Eq.mp, Eq.refl, Dvd.dvd, HMul.hMul, OfNat.ofNat, Nat.mul_one, Nat.gcd, Nat.coprime.gcd_eq_one, Nat.gcd_mul_left],[Dvd.dvd]]
[Function.left_inverse.eq_right_inverse,[],[Eq]]
[Nat.add_le_to_le_sub,[Eq.mpr, Eq.refl, Iff, LE.le, HAdd.hAdd, HSub.hSub, Eq.symm, Nat.add_sub_cancel, propext, Nat.sub_le_sub_right_iff, Iff.rfl],[Iff, LE.le, HAdd.hAdd, HSub.hSub]]
[Array.swap.proof_1,[Eq.symm, Array.size_set, Array.get],[Eq, Array.size, Array.set, Array.get]]
[FloatSpec.noConfusionType,[],[]]
[Nat.anyM.loop,[Unit.unit, Bool, Pure.pure, Bool.false, Bind.bind, HSub.hSub, OfNat.ofNat, Bool.true, PProd.fst],[Bool]]
[Array.modifyM,[dite, LT.lt, Array.size, Bind.bind, Pure.pure, Array.set, Array.modifyM.proof_1],[Array]]
[or_iff_not_imp_left,[Decidable.or_iff_not_imp_left],[Iff, Or]]
[UInt32.eq_of_val_eq,[Eq, congrArg, UInt32.mk],[Eq]]
[StateT.run_bind_lift,[of_eq_true, Eq.trans, congrFun, congrArg, Eq, LawfulMonad.bind_assoc, Pure.pure, Prod.mk, Bind.bind, funext, LawfulMonad.pure_bind, eq_self],[Eq, StateT.run, Bind.bind, StateT.lift]]
[List.subset,[Mem.mem],[]]
[Decidable.not_iff_comm,[Eq.mpr, Eq.refl, Iff, Not, propext, iff_def, And, and_congr, Decidable.not_imp_comm, imp_not_comm],[Iff, Not]]
[Nat.succ_eq_add_one,[rfl],[Eq, Nat.succ, HAdd.hAdd, OfNat.ofNat]]
[Mathlib.RunTac.tacticRunTac_,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.nonReservedSymbol, Bool.false, Lean.ParserDescr.const],[Lean.ParserDescr]]
[ByteArray.toSliceT,[ByteSliceT.mk, OfNat.ofNat],[ByteSliceT]]
[Function.eval,[],[]]
[Quotient.liftOn₂,[Quotient.lift₂],[]]
[Nat.lt_of_lt_of_eq,[],[LT.lt]]
[Function.injective.prod_map,[],[Function.injective, Prod.map]]
[Function.funext_iff,[Iff.intro, rfl, funext],[Iff, Eq]]
[System.instInhabitedFilePath,[Inhabited.mk, System.FilePath.mk, arbitrary],[Inhabited, System.FilePath]]
[HSub.hSub,[],[]]
[Subtype.symm,[Setoid.symm],[HasEquiv.Equiv]]
[Function.decidable_eq_pfun,[Decidable, Eq, decidable_of_iff, Function.decidable_eq_pfun.proof_1],[DecidableEq]]
[instStreamProdProd,[Stream.mk, Option, Prod, Unit.unit, Stream.next?, Option.none, Option.some, Prod.mk],[Stream, Prod]]
[List.mem_constructor,[Exists, Eq, List.nil, HAppend.hAppend, List.cons, Eq.refl, Eq.mpr, Exists.intro, rfl, Eq.symm, List.cons_append],[Exists, Eq, HAppend.hAppend, List.cons]]
[StateT.bind,[Bind.bind, Prod],[StateT]]
[List.exists_mem_of_ne_nil,[List.exists_mem_of_length_pos, List.length_pos_of_ne_nil],[Exists, Mem.mem]]
[MonoidWithZero.noConfusionType,[],[]]
[instMonadControlReaderT,[MonadControl.mk, id],[MonadControl, ReaderT]]
[Nat.any,[Nat.anyAux],[Bool]]
[eq_or_ne,[em, Eq],[Or, Eq, Ne]]
[Int.ofNat_add,[rfl],[Eq, Int.ofNat, HAdd.hAdd]]
[Fin.modn_def,[Eq, HMod.hMod, Fin.mk, Fin.val, Nat.mod_lt, Fin.size_positive, rfl],[Eq, HMod.hMod, Fin.mk, Fin.val, Nat.mod_lt, Fin.size_positive]]
[Applicative.toSeqLeft,[],[SeqLeft]]
[List.getLastD,[List.getLast, List.cons, List.getLastD.proof_1],[]]
[Function.forall_update_iff,[Iff.intro, Function.update],[Iff, Function.update, And]]
[ExceptT.finally,[MonadFinally.mk, ExceptT.mk, Bind.bind, MonadFinally.tryFinally', Option.none, Option.some, Except.error, Except, Except.ok, Prod, Pure.pure, Prod.mk],[MonadFinally, ExceptT]]
[And.right,[],[]]
[ofNat_mul,[Eq, Numeric.ofNat, HMul.hMul, of_eq_true, Eq.trans, congr, congrArg, Nat.mul_zero, ofNat_zero, MonoidWithZero.mul_zero, eq_self, OfNat.ofNat, Nat.mul_succ, ofNat_add, congrFun, HAdd.hAdd, ofNat_one, mul_add, mul_one],[Eq, Numeric.ofNat, HMul.hMul]]
[solve,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.nonReservedSymbol, Bool.false, Lean.ParserDescr.unary, Lean.ParserDescr.const, Lean.ParserDescr.symbol],[Lean.ParserDescr]]
[ExceptCpsT.run_bind_throw,[rfl],[Eq, ExceptCpsT.run, Bind.bind, MonadExcept.throw]]
[Nat.mul_div_cancel,[Eq.mp, Eq.refl, Eq, HDiv.hDiv, HMul.hMul, HAdd.hAdd, OfNat.ofNat, Nat.zero_add, Nat.zero_div],[Eq, HDiv.hDiv, HMul.hMul]]
[imp_not_comm,[imp.swap],[Iff, Not]]
[Mathlib.Prelude.Rename.elabAlign,[ite, Eq, Lean.Syntax.isOfKind, Lean.Name.mkStr, Lean.Name.anonymous, Bool.true, cond, Lean.Elab.Command.liftCoreM, Mathlib.Prelude.Rename.addNameAlignment, Lean.Syntax.getId, Lean.Elab.throwUnsupportedSyntax],[Lean.Elab.Command.CommandElab]]
[FloatSpec.mk.sizeOf_spec,[Eq.refl, HAdd.hAdd, OfNat.ofNat, SizeOf.sizeOf],[Eq, SizeOf.sizeOf, FloatSpec.mk, HAdd.hAdd, OfNat.ofNat]]
[Array.feraseIdx,[Array.eraseIdxAux, HAdd.hAdd, Fin.val, OfNat.ofNat],[Array]]
[Array.insertionSort.swapLoop.proof_2,[Eq.mpr, Eq.refl, LT.lt, Array.size, Array.swap, Fin.mk, Nat.lt_trans, Nat.lt_succ_self, Eq.symm, Array.size_swap],[LT.lt, Array.size, Array.swap, Fin.mk, Nat.lt_trans, Nat.lt_succ_self, Eq.symm]]
[StdGen.s2,[],[Nat]]
[Char.ofNat,[dite, Nat.isValidChar, Char.mk, UInt32.mk, Fin.mk, LT.lt, UInt32.size, Nat.lt_trans, of_decide_eq_true, Eq.refl, Bool.true, OfNat.ofNat, Char.ofNat.proof_1, Char.ofNat.proof_2],[Char]]
[«term_\/_»,[Lean.ParserDescr.trailingNode, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.symbol, Lean.ParserDescr.cat],[Lean.TrailingParserDescr]]
[UInt8.instAddSemigroupUInt8.proof_1,[congrArg, UInt8.mk, AddSemigroup.add_assoc, UInt8.val],[Eq, UInt8.mk]]
[Nat.coprime.gcd_mul_right_cancel_right,[Eq.mpr, Eq.refl, Eq, Nat.gcd, HMul.hMul, Nat.mul_comm, Nat.coprime.gcd_mul_left_cancel_right, rfl],[Eq, Nat.gcd, HMul.hMul]]
[Prod.lex,[WellFoundedRelation.mk, Prod.Lex, WellFoundedRelation.rel, Prod.lex.proof_1],[WellFoundedRelation, Prod]]
[of_decide_eq_true,[absurd, ne_true_of_eq_false, decide_eq_false],[]]
[if_t_t,[Eq, ite, rfl],[Eq, ite]]
[Mod.mod,[],[]]
[ULift.down,[],[]]
[«term_|>_»,[Lean.ParserDescr.trailingNode, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.symbol, Lean.ParserDescr.cat],[Lean.TrailingParserDescr]]
[Substring.takeWhile,[Substring, Substring.mk],[Substring]]
[Add.add,[],[]]
[Quotient.sound.proof_1,[Quot.sound],[Eq, Quot.mk, HasEquiv.Equiv]]
[and_iff_not_or_not,[Decidable.and_iff_not_or_not],[Iff, And, Not, Or]]
[Nat.dvd_refl,[Exists.intro, OfNat.ofNat, of_eq_true, Eq.trans, congrArg, Eq, Nat.mul_one, eq_self],[Dvd.dvd]]
[not_non_contradictory_iff_absurd,[Iff.intro, mt, not_not_intro],[Iff, Not]]
[CoeHTCT.coe,[],[]]
[EStateM.instOrElseEStateM,[OrElse.mk, EStateM.orElse],[OrElse, EStateM]]
[«termIfLet_:=_Then_Else_»,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.symbol, Lean.ParserDescr.cat],[Lean.ParserDescr]]
[Subsingleton.noConfusionType,[],[]]
[xor,[Or, And, Not],[]]
[Subarray.forRevM,[Array.forRevM, Subarray.as, Subarray.stop, Subarray.start],[PUnit]]
[ByteArray.toUInt64BE!,[ite, Eq, BEq.beq, ByteArray.size, OfNat.ofNat, Bool.true, HOr.hOr, HShiftLeft.hShiftLeft, UInt8.toUInt64, ByteArray.get!, panicWithPosWithDecl, HAppend.hAppend],[UInt64]]
[List.mem_of_mem_cons_of_mem,[Or.elim, List.eq_or_mem_of_mem_cons, Eq.symm],[Mem.mem]]
[add_right_neg,[Eq.mpr, Eq.refl, Eq, HAdd.hAdd, Neg.neg, OfNat.ofNat, Eq.symm, add_left_neg, neg_neg, rfl],[Eq, HAdd.hAdd, Neg.neg, OfNat.ofNat]]
[String.back,[String.get, String.prev, String.bsize],[Char]]
[«stx_,*»,[Lean.ParserDescr.trailingNode, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.symbol],[Lean.TrailingParserDescr]]
[String.toNat!,[ite, Eq, String.isNat, Bool.true, String.foldl, HAdd.hAdd, HMul.hMul, OfNat.ofNat, HSub.hSub, Char.toNat, Char.ofNat, panicWithPosWithDecl],[Nat]]
[instDecidableEqPUnit,[Decidable.isTrue, PUnit.subsingleton],[DecidableEq, PUnit]]
[EIO.catchExceptions,[EStateM.Result, Empty, IO.RealWorld, EStateM.Result.ok],[BaseIO]]
[instAndOpUInt8,[AndOp.mk, UInt8.land],[AndOp, UInt8]]
[lt_or_ge,[lt_or_le],[Or, LT.lt, GE.ge]]
[WellFounded.fix,[WellFounded.fixF, WellFounded.apply],[]]
[Fin.shiftRight.proof_1,[LT.lt, HMod.hMod, Nat.mod_lt],[LT.lt, HMod.hMod, HShiftRight.hShiftRight]]
[HMul.hMul,[],[]]
[List.reverseAux_reverseAux_nil,[rfl, of_eq_true, Eq.trans, congrFun, congrArg, Eq, List.cons, List.reverseAux, eq_self],[Eq, List.reverseAux, List.nil]]
[or_and_distrib_left,[Iff.intro, And.intro, Or.inl, And.imp, Or.inr, Function.comp, imp_intro, Or.imp_right],[Iff, Or, And]]
[List.get?,[Nat.zero, List.nil, Nat.succ, Option, Option.some, PProd.fst, Option.none],[Option]]
[StateT.run_lift,[rfl],[Eq, StateT.run, StateT.lift, Bind.bind, Pure.pure, Prod.mk]]
[List.mem_cons_iff,[Iff.rfl],[Iff, Mem.mem, List.cons, Or, Eq]]
[iff_iff_implies_and_implies,[Iff.intro, And.intro, Iff.mp, Iff.mpr, And.left, And.right],[Iff, And]]
[ulift.down_up,[rfl],[Eq, ulift.down, ulift.up]]
[mul_mul_mul_comm,[of_eq_true, Eq.trans, congr, congrArg, Eq, mul_left_comm, HMul.hMul, mul_assoc, eq_self],[Eq, HMul.hMul]]
[commandGenIntDeclars__,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.symbol, Lean.ParserDescr.const],[Lean.ParserDescr]]
[evalIntrov,[ite, Eq, Lean.Syntax.isOfKind, Lean.Name.mkStr, Lean.Name.anonymous, Bool.true, Lean.Syntax.matchesNull, OfNat.ofNat, GE.ge, Lean.Syntax.getNumArgs, cond, Bind.bind, Lean.MonadRef.mkInfoFromRefPos, Lean.MonadQuotation.getCurrMacroScope, Lean.MonadQuotation.getMainModule, Pure.pure, Lean.Syntax.node, Lean.SourceInfo.none, List.toArray, List.cons, Lean.Syntax.atom, List.nil, Array.append, Lean.Elab.Tactic.evalTactic, Lean.Elab.throwUnsupportedSyntax, evalIntrov.introsDep, evalIntrov.intro1PStep],[Lean.Elab.Tactic.Tactic]]
[Eq.subst,[],[]]
[String.dropWhile,[Substring.toString, Substring.dropWhile, String.toSubstring],[String]]
[UInt16.instSemiringUInt16,[Semiring.mk, UInt16.instSemiringUInt16.proof_1, UInt16.instSemiringUInt16.proof_2, UInt16.mk, Semiring.nsmul, UInt16.val, UInt16.instSemiringUInt16.proof_3, UInt16.instSemiringUInt16.proof_4, UInt16.instSemiringUInt16.proof_5, UInt16.instSemiringUInt16.proof_6, UInt16.instSemiringUInt16.proof_7, UInt16.instSemiringUInt16.proof_8, UInt16.instSemiringUInt16.proof_9, UInt16.instSemiringUInt16.proof_10, UInt16.instSemiringUInt16.proof_11, UInt16.instSemiringUInt16.proof_12, UInt16.instSemiringUInt16.proof_13],[Semiring, UInt16]]
[MonadExcept.orElse,[MonadExcept.tryCatch, Unit.unit],[]]
[«term_==_»,[Lean.ParserDescr.trailingNode, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.symbol, Lean.ParserDescr.cat],[Lean.TrailingParserDescr]]
[Subarray.mk.sizeOf_spec,[Eq.refl, HAdd.hAdd, OfNat.ofNat, SizeOf.sizeOf],[Eq, SizeOf.sizeOf, Subarray.mk, HAdd.hAdd, OfNat.ofNat]]
[Tactic.Ring.State.mk.injEq,[Eq.propIntro, And.intro, Eq.refl, Tactic.Ring.State.mk, Eq.symm, eq_of_heq, HEq.refl],[Eq, Tactic.Ring.State.mk, And]]
[«term~~~_»,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.symbol, Lean.ParserDescr.cat],[Lean.ParserDescr]]
[max_le,[dite, LT.lt, Eq.mpr, congrFun, congrArg, LE.le, if_pos, if_neg],[LE.le, max]]
[Array.insertionSort,[OfNat.ofNat, Array.size, Array.insertionSort.traverse, Array.insertionSort.swapLoop],[Array]]
[Mathlib.Tactic.Lint.LintVerbosity.noConfusion,[noConfusionEnum, Mathlib.Tactic.Lint.LintVerbosity.toCtorIdx],[Mathlib.Tactic.Lint.LintVerbosity.noConfusionType]]
[trans_rel_left,[],[]]
[instRingFin.proof_1,[of_eq_true, Eq.trans, congr, congrArg, Eq, Fin.sub_def, Fin.add_def, Fin.mk, HMod.hMod, HSub.hSub, Fin.val, instNegFin.proof_1, Fin.mk.injEq, HAdd.hAdd, Nat.mod_lt, Fin.size_positive, Nat.add_mod_mod, eq_self],[Eq, HSub.hSub, HAdd.hAdd, Fin.mk, HMod.hMod, Fin.val, instNegFin.proof_1]]
[Float.ofInt,[Float, Float.ofNat, Float.neg, Nat.succ],[Float]]
[calcStep,[Lean.ParserDescr.nodeWithAntiquot, Lean.Name.mkStr, Lean.Name.anonymous, Lean.ParserDescr.binary, Lean.ParserDescr.const, Lean.ParserDescr.cat, OfNat.ofNat, Lean.ParserDescr.symbol, Lean.ParserDescr.unary],[Lean.ParserDescr]]
[ByteArray.empty,[ByteArray.mkEmpty, OfNat.ofNat],[ByteArray]]
[Array.sequenceMap.loop,[dite, LT.lt, Array.size, Unit.unit, Array, Pure.pure, Bind.bind, Array.get, Fin.mk, PProd.fst, HAdd.hAdd, OfNat.ofNat, Array.push],[Array]]
[GroupWithZero.toDivInvMonoid,[],[DivInvMonoid]]
[«stx_,+,?»,[Lean.ParserDescr.trailingNode, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.symbol],[Lean.TrailingParserDescr]]
[List.nil_subset,[False.elim, Iff.mp, List.mem_nil_iff],[Subset.subset, List.nil]]
[FloatSpec.lt,[],[]]
[Nat.add_zero,[rfl],[Eq, HAdd.hAdd, OfNat.ofNat]]
[Applicative.toFunctor,[],[Functor]]
[Tactic.TryThis.addTermSuggestion,[Bind.bind, Tactic.TryThis.delabToRefinableSyntax, Tactic.TryThis.addSuggestion],[Lean.Elab.Term.TermElabM, Unit]]
[Substring.toString,[String, String.extract],[String]]
[invImage.proof_1,[InvImage.wf, WellFoundedRelation.wf],[WellFounded, InvImage, WellFoundedRelation.rel]]
[String.data,[],[List, Char]]
[UInt8.instNumericUInt8,[Numeric.mk, UInt8.mk, Numeric.ofNat],[Numeric, UInt8]]
[List.eq_nil_of_length_eq_zero,[rfl, False.elim, Eq.mp, Eq.trans, congrFun, congrArg, Eq, List.length_cons, OfNat.ofNat, eq_false'],[Eq, List.nil]]
[Function.uncurry_curry,[funext, Eq, Function.uncurry, Function.curry, rfl],[Eq, Function.uncurry, Function.curry]]
[StateT.failure,[Alternative.failure],[StateT]]
[CommMonoid.mul_comm,[],[Eq, HMul.hMul]]
[Tactic.LibrarySearch.librarySearch,[Bind.bind, Lean.MonadOptions.getOptions, Lean.profileitM, Lean.Exception, Lean.Meta.inferType, MonadState.get, MonadExcept.tryCatch, Lean.Meta.solveByElim, Pure.pure, DoResultPR.return, Option.none, PUnit.unit, MonadStateOf.set, DoResultPR.pure, Lean.Meta.MetaM, Option, Array, Prod, Lean.MetavarContext, List, Lean.MVarId],[Lean.Meta.MetaM, Option, Array, Prod, Lean.MetavarContext, List, Lean.MVarId]]
[Nat.mul_add,[Nat.left_distrib],[Eq, HMul.hMul, HAdd.hAdd]]
[OptionT.bind,[OptionT.mk, Bind.bind, Unit.unit, Option, Pure.pure, Option.none],[OptionT]]
[UInt64.instRingUInt64.proof_4,[congrArg, UInt64.mk, SubNegMonoid.gsmul_neg', UInt64.val],[Eq, UInt64.mk, Ring.gsmul, Int.negSucc, UInt64.val]]
[FloatSpec.val,[],[FloatSpec.float]]
[dite_false,[rfl],[Eq, dite, False, not_false]]
[ByteArray.foldlMUnsafe,[ite, LT.lt, LE.le, ByteArray.size, USize.ofNat, Pure.pure, ByteArray.foldlMUnsafe.fold],[]]
[implies_true_iff,[Iff.intro, trivial],[Iff, True]]
[ByteSlice.off,[],[Nat]]
[StdGen.mk.injEq,[Eq.propIntro, And.intro, Eq.refl, StdGen.mk, Eq.symm, eq_of_heq, HEq.refl],[Eq, StdGen.mk, And]]
[List.range,[List.rangeAux, List.nil],[List, Nat]]
[Nat.digitChar,[ite, Eq, OfNat.ofNat, Char.ofNat],[Char]]
[Eq.mp,[],[]]
[«term_<|_»,[Lean.ParserDescr.trailingNode, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.symbol, Lean.ParserDescr.cat],[Lean.TrailingParserDescr]]
[of_not_imp,[Decidable.of_not_imp],[]]
[Function.right_inverse.comp_eq_id,[funext],[Eq, Function.comp, id]]
[UInt64.mod,[UInt64.mk, HMod.hMod, UInt64.val],[UInt64]]
[instReprInt,[Repr.mk, Std.Format.text, Int.repr],[Repr, Int]]
[instRingFin.proof_3,[of_eq_true, Eq.trans, forall_congr, congrFun, congrArg, Eq, Semiring.nsmul_succ', HAdd.hAdd, Semiring.nsmul, eq_self, propext, forall_const, Fin, Nat],[Eq, Semiring.nsmul, Nat.succ, HAdd.hAdd]]
[StateT.instAlternativeStateT,[Alternative.mk, StateT.failure, StateT.orElse],[Alternative, StateT]]
[Nat.eq_zero_of_le_zero,[Nat.le_antisymm, Nat.zero_le],[Eq, OfNat.ofNat]]
[List.map_map,[of_eq_true, Eq.trans, congr, congrArg, Eq, List.map, List.map_nil, eq_self, List.nil, List.map_cons, List.cons, congrFun, Function.comp_apply, Function.comp],[Eq, List.map, Function.comp]]
[Fin.instModFin,[Mod.mk, Fin.mod],[Mod, Fin]]
[Fin.land.proof_1,[LT.lt, HMod.hMod, Nat.mod_lt],[LT.lt, HMod.hMod, Nat.land]]
[OptionT.instMonadLiftOptionT,[MonadLift.mk, OptionT.lift],[MonadLift, OptionT]]
[List.mem_remove_iff,[of_eq_true, Eq.trans, congr, congrArg, Iff, propext, List.mem_nil_iff, And, ne_eq, false_and, Not, Eq, eq_true_of_decide, Eq.refl, Bool.true, Eq.mpr, Mem.mem, ite, List.remove, List.cons, List.mem_cons_iff, Decidable.em, congrFun, if_pos, List, Or, Iff.intro, And.intro, Or.inr, Ne, Or.resolve_left, Eq.symm, if_neg, Or.inl, Ne.symm, And.left, And.right],[Iff, Mem.mem, List.remove, And, Ne]]
[List.pure,[List.cons, List.nil],[List]]
[USize.mk_val_eq,[Eq, USize.mk, USize.val, rfl],[Eq, USize.mk, USize.val]]
[PSum.noConfusionType,[],[]]
[Prod.map_fst',[funext, Prod.map_fst],[Eq, Function.comp, Prod.fst, Prod.map]]
[instToFormatList,[Std.ToFormat.mk, List.format],[Std.ToFormat, List]]
[List.groupBy,[Unit.unit, List, List.nil, List.groupByAux, List.cons],[List]]
[instDecidableRelLtLtOfOrd,[inferInstanceAs, DecidableRel, Eq, BEq.beq, Ord.compare, Ordering.lt, Bool.true],[DecidableRel, LT.lt]]
[commandOfNat_class___,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.symbol, Lean.ParserDescr.const],[Lean.ParserDescr]]
[Array.instCoeSubarrayArray,[Coe.mk, Array.ofSubarray],[Coe, Subarray, Array]]
[MonadExcept.orelse',[MonadExcept.tryCatch, MonadExcept.throw, ite, Eq, Bool.true],[]]
[UInt16.instRingUInt16.proof_2,[congrArg, UInt16.mk, Ring.gsmul_zero', UInt16.val],[Eq, UInt16.mk, Ring.gsmul, OfNat.ofNat, UInt16.val]]
[ST.Ref.ref,[],[PointedType.type, ST.RefPointed]]
[List.exists_or_eq_self_of_erasep,[Classical.em, Exists, And, Mem.mem, Or, Eq, List.erasep, Not, HAppend.hAppend, List.cons, Or.inr, List.exists_of_erasep, Eq.symm, Or.inl, List.erasep_of_forall_not, Eq.mp, Eq.trans, propext, not_exists, forall_congr, not_and, Eq.refl],[Or, Eq, List.erasep, Exists, And, Not, HAppend.hAppend, List.cons]]
[EmptyCollection.noConfusionType,[],[]]
[ByteArray.foldlM.proof_1,[Nat.le_refl, ByteArray.size],[LE.le, ByteArray.size]]
[exists_apply_eq_apply,[Exists.intro, rfl],[Exists, Eq]]
[coeM,[Bind.bind, Pure.pure, coe],[]]
[MonadStateOf.modifyGet,[],[]]
[UInt16.instAddCommSemigroupUInt16.proof_1,[congrArg, UInt16.mk, AddCommSemigroup.add_comm, UInt16.val],[Eq, UInt16.mk]]
[Set.instEmptyCollectionSet,[EmptyCollection.mk, Eq, Bool.false, Bool.true],[EmptyCollection, Set]]
[min_eq_left_of_lt,[min_eq_left, le_of_lt],[Eq, min]]
[Nat.max,[ite, LE.le],[Nat]]
[String.toList,[String.data],[List, Char]]
[Nat.coprime.mul_right,[Nat.coprime.symm, Nat.coprime.mul],[Nat.coprime, HMul.hMul]]
[System.FilePath.noConfusionType,[],[]]
[UInt64.toNat,[Fin.val, UInt64.val],[Nat]]
[ReprTuple.reprTuple,[],[List, Std.Format]]
[ByteArray.forIn.loop,[Pure.pure],[]]
[Substring.foldl,[String.foldlAux],[]]
[Function.inv_fun_comp,[funext, Function.left_inverse_inv_fun],[Eq, Function.comp, Function.inv_fun, id]]
[LawfulMonad.pure_bind,[],[Eq, Bind.bind, Pure.pure]]
[Function.inv_fun_on_eq,[And.right, Function.inv_fun_on_pos],[Eq, Function.inv_fun_on]]
[Substring.trimRight,[Substring.dropRightWhile, Char.isWhitespace],[Substring]]
[Function.bijective_iff_exists_unique,[Iff.intro, ExistsUnique, Eq, Exists.intro, And.intro, Function.bijective.injective, Eq.trans, Eq.symm, unique_of_exists_unique, rfl, ExistsUnique.exists],[Iff, Function.bijective, ExistsUnique, Eq]]
[ForM.noConfusionType,[],[]]
[instDecidableOr,[Decidable, Or, Decidable.isTrue, Or.inl, Or.inr, Decidable.isFalse, instDecidableOr.proof_1],[Decidable, Or]]
[StateCpsT.runK_monadLift,[rfl],[Eq, StateCpsT.runK, MonadLiftT.monadLift, Bind.bind]]
[unexpandListCons,[ite, Eq, Lean.Syntax.isOfKind, Lean.Name.mkStr, Lean.Name.anonymous, Bool.true, Lean.Syntax.matchesNull, OfNat.ofNat, Bind.bind, Lean.MonadRef.mkInfoFromRefPos, Lean.MonadQuotation.getCurrMacroScope, Lean.MonadQuotation.getMainModule, Pure.pure, Lean.Syntax.node, Lean.SourceInfo.none, List.toArray, List.cons, Lean.Syntax.atom, List.nil, Array.append, Lean.Syntax.SepArray.elemsAndSeps, MonadExcept.throw, Unit.unit],[Lean.PrettyPrinter.Unexpander]]
[Array.size_push,[List.length_concat, Array.data],[Eq, Array.size, Array.push, HAdd.hAdd, OfNat.ofNat]]
[List.mem_map_of_injective,[Iff.intro, Mem.mem, List.mem_map_of_mem],[Iff, Mem.mem, List.map]]
[decidableLt_of_decidableLe.proof_1,[not_le_of_gt],[False]]
[max_eq_right_of_lt,[max_eq_right, le_of_lt],[Eq, max]]
[instBEq,[BEq.mk, Decidable.decide, Eq],[BEq]]
[Array.partition,[Id.run, Bind.bind, ForIn.forIn, MProd.mk, ite, Eq, Bool.true, Pure.pure, PUnit.unit, ForInStep.yield, Id, Prod, Array, Prod.mk],[Prod, Array]]
[Int.ofNat_mul_subNatNat,[of_eq_true, Eq.trans, congr, congrArg, Eq, congrFun, HMul.hMul, Int.ofNat, Nat.zero_eq, Int.ofNat_zero, Int.subNatNat, Int.zero_mul, Nat.zero_mul, Int.sub_nat_self, OfNat.ofNat, eq_true_of_decide, Eq.refl, Bool.true, Eq.symm],[Eq, HMul.hMul, Int.ofNat, Int.subNatNat]]
[And.imp_left,[And.imp, id],[And]]
[SubNegMonoid.noConfusionType,[],[]]
[Nat.mod_self,[Eq.mpr, Eq.refl, Eq, HMod.hMod, OfNat.ofNat, Nat.mod_eq_sub_mod, Nat.le_refl, HSub.hSub, Nat.sub_self, Nat.zero_mod, rfl],[Eq, HMod.hMod, OfNat.ofNat]]
[Equiv.self_comp_symm,[funext, Equiv.apply_symm_apply],[Eq, Function.comp, Equiv.toFun, Equiv.symm, id]]
[EStateM.map,[EStateM.Result, EStateM.Result.ok, EStateM.Result.error],[EStateM]]
[Prod.forall,[Iff.intro, Prod.mk],[Iff, Prod.mk]]
[Subtype.forall,[Iff.intro, Subtype.mk],[Iff, Subtype.mk]]
[instMonadControlT_1,[MonadControlT.mk, Pure.pure],[MonadControlT]]
[Int.negOfNat_mul_negSucc_ofNat,[Eq.mpr, Eq.refl, Eq, HMul.hMul, Int.negOfNat, Int.negSucc, Int.ofNat, Nat.succ, Int.mul_comm, Int.negSucc_ofNat_mul_negOfNat, Nat.mul_comm, rfl],[Eq, HMul.hMul, Int.negOfNat, Int.negSucc, Int.ofNat, Nat.succ]]
[UInt16.land,[UInt16.mk, Fin.land, UInt16.val],[UInt16]]
[List.append'_eq_append,[Eq, List.append', HAppend.hAppend, rfl, of_eq_true, Eq.trans, congr, congrArg, List.cons, PProd.fst, List.cons_append, eq_self],[Eq, List.append', HAppend.hAppend]]
[Function.surjective_iff_has_right_inverse,[Iff.intro, Function.surjective.has_right_inverse, Function.has_right_inverse.surjective],[Iff, Function.surjective, Function.has_right_inverse]]
[List.disjoint_of_subset_left,[],[List.disjoint]]
[instInhabitedList,[Inhabited.mk, List.nil],[Inhabited, List]]
[instToBoolOption,[ToBool.mk, Option.toBool],[ToBool, Option]]
[Equiv.perm,[Equiv],[]]
[Nat.coprime_comm,[Iff.intro, Nat.coprime.symm],[Iff, Nat.coprime]]
[plift.noConfusionType,[],[]]
[Int.decEq.proof_2,[absurd],[False]]
[AddCommMonoid.toAddMonoid,[],[AddMonoid]]
[System.FilePath.withExtension,[Unit.unit, System.FilePath, System.FilePath.fileStem, System.FilePath.withFileName, ite, Eq, String.isEmpty, Bool.true, HAppend.hAppend],[System.FilePath]]
[ST,[EST, Empty],[]]
[«term-_»,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.symbol, Lean.ParserDescr.cat],[Lean.ParserDescr]]
[mul_right_inj,[Iff.intro, mul_left_cancel, congrArg, HMul.hMul],[Iff, Eq, HMul.hMul]]
[Int.eq_zero_ofNatAbs_eq_zero,[Eq, OfNat.ofNat, congr_arg, Int.ofNat, absurd, Nat.succ_ne_zero],[Eq, OfNat.ofNat]]
[AddMonoid.nsmul_succ',[],[Eq, AddMonoid.nsmul, Nat.succ, HAdd.hAdd]]
[Set.instMemSet,[Mem.mk, Set.mem],[Mem, Set]]
[instLTNat,[LT.mk, Nat.lt],[LT, Nat]]
[tacticAnyGoals_,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.nonReservedSymbol, Bool.false, Lean.ParserDescr.parser],[Lean.ParserDescr]]
[Decidable.eq_or_ne,[dec_em, Eq],[Or, Eq, Ne]]
[Int.decEq.proof_1,[rfl],[Eq, Int.ofNat]]
[Subsingleton.elim.proof_1,[Subsingleton.allEq],[Eq]]
[instModUInt16,[Mod.mk, UInt16.mod],[Mod, UInt16]]
[Function.surjective.of_comp_iff',[Iff.intro, Exists, Eq, Exists.intro, Function.bijective.injective, Function.surjective.comp, Function.bijective.surjective],[Iff, Function.surjective, Function.comp]]
[Int.instCommRingInt,[CommRing.mk, Int.mul_comm],[CommRing, Int]]
[List.leftpad_suffix,[Exists.intro, List.repeat, HSub.hSub, List.length, rfl],[List.isSuffix, List.leftpad]]
[USize.instSemiringUSize.proof_10,[rfl],[Eq, Nat.succ]]
[fix2,[fixCore2, arbitrary],[]]
[And.assoc,[Iff.intro, And, And.intro],[Iff, And]]
[exists_congr,[Iff.intro, exists_imp_exists, Iff.mp, Iff.mpr],[Iff, Exists]]
[Int.natAbs_pos_of_ne_zero,[Or.resolve_left, Nat.eq_zero_or_pos, Int.natAbs, mt, Int.eq_zero_ofNatAbs_eq_zero],[LT.lt, OfNat.ofNat, Int.natAbs]]
[Fin.nsmuls_eq,[Eq, HMul.hMul, Fin.ofNat', Fin.size_positive', Fin.val, Fin.eq_of_val_eq, Eq.mpr, congrFun, congrArg, Fin.mul_def, Fin.mk, HMod.hMod, Nat.mod_lt, Eq.refl, Eq.symm, Nat.mod_eq_of_lt, Nat.mul_mod, rfl],[Eq, HMul.hMul, Fin.ofNat', Fin.size_positive', Fin.val]]
[USize.ofNat32,[USize.mk, Fin.mk, USize.ofNat32.proof_1],[USize]]
[LinearOrder.decidable_le,[],[DecidableRel, LE.le]]
[Equiv.inv_fun_as_coe,[rfl],[Eq, Equiv.invFun, Equiv.toFun, Equiv.symm]]
[instModUInt64,[Mod.mk, UInt64.mod],[Mod, UInt64]]
[HOr.noConfusionType,[],[]]
[List.erasep_append_right,[Eq, List.erasep, HAppend.hAppend, rfl, of_eq_true, Eq.trans, congr, congrArg, List.cons_append, List.erasep_cons_of_neg, Not, eq_false, And.left, Iff.mp, List.forall_mem_cons, eq_true_of_decide, Eq.refl, Bool.true, List.cons, PProd.fst, And.right, eq_self],[Eq, List.erasep, HAppend.hAppend]]
[Decidable.not_imp_symm,[Decidable.by_contradiction, Function.comp],[]]
[Nat.le_add_right,[LE.le, HAdd.hAdd, Nat.le_refl, Nat.le_succ_of_le, PProd.fst],[LE.le, HAdd.hAdd]]
[Function.right_id,[rfl],[Eq, Function.comp, id]]
[PSigma.skipLeft,[WellFoundedRelation.mk, PSigma.SkipLeft, WellFoundedRelation.rel, PSigma.skipLeft.proof_1],[WellFoundedRelation, PSigma]]
[WellFoundedRelation.mk.inj,[],[Eq]]
[coeSort,[CoeSort.coe],[]]
[Nat.zero_mul,[Unit.unit, Eq, HMul.hMul, OfNat.ofNat, rfl, Eq.symm, PProd.fst, Nat.mul_succ],[Eq, HMul.hMul, OfNat.ofNat]]
[repr,[Repr.reprPrec, OfNat.ofNat],[Std.Format]]
[Inter.inter,[],[]]
[StateT.pure,[Pure.pure, Prod.mk],[StateT]]
[HAnd.hAnd,[],[]]
[tryCatchThe,[MonadExceptOf.tryCatch],[]]
[List.replicate,[List.nil, List.replicate.loop],[List]]
[ByteSlice.mk.inj,[And.intro],[And, Eq]]
[Option.toMonad,[Unit.unit, Alternative.failure, Pure.pure],[]]
[instDecidableIte,[Decidable, ite],[Decidable, ite]]
[Nat.le_of_succ_le_succ,[Nat.pred_le_pred],[LE.le]]
[Nat.eq_zero_of_zero_dvd,[Exists.elim, Eq.trans, Nat.zero_mul],[Eq, OfNat.ofNat]]
[min_assoc,[eq_min, le_trans, min_le_left, min, le_min, min_le_right],[Eq, min]]
[npow_eq_pow,[rfl],[Eq, Monoid.npow, HPow.hPow]]
[USize.instNumericUSize,[Numeric.mk, USize.mk, Numeric.ofNat],[Numeric, USize]]
[MonadControlT.stM,[],[]]
[Mathlib.Tactic.Ext.«termExtProof%»,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.symbol],[Lean.ParserDescr]]
[instDecidableArrow,[dite, Decidable.isTrue, instDecidableArrow.proof_1, Decidable.isFalse, instDecidableArrow.proof_2, instDecidableArrow.proof_3],[Decidable]]
[Tactic.Cache,[IO.Ref, Sum, Lean.Meta.MetaM, Task, Except, Lean.Exception],[]]
[Equivalence.noConfusionType,[],[]]
[HEq.symm,[HEq.ndrecOn, HEq.refl],[HEq]]
[PSum.inr.inj,[],[Eq]]
[Array.foldlM.proof_1,[Nat.le_refl, Array.size],[LE.le, Array.size]]
[«term_*>_»,[Lean.ParserDescr.trailingNode, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.symbol, Lean.ParserDescr.cat],[Lean.TrailingParserDescr]]
[Fin.mul_def,[Eq, HMul.hMul, Fin.mk, HMod.hMod, Fin.val, Nat.mod_lt, Fin.size_positive, rfl],[Eq, HMul.hMul, Fin.mk, HMod.hMod, Fin.val, Nat.mod_lt, Fin.size_positive]]
[ExistsUnique.elim,[Exists.elim, And.left, And.right],[]]
[Tactic.Ring.instInhabitedHornerExpr,[Inhabited.mk, Tactic.Ring.HornerExpr.const, Lean.mkRawNatLit, OfNat.ofNat],[Inhabited, Tactic.Ring.HornerExpr]]
[instMonadState,[MonadState.mk, getThe, MonadStateOf.set, MonadStateOf.modifyGet],[MonadState]]
[EStateM.tryCatch,[EStateM.Result.ok, EStateM.Result, EStateM.Backtrackable.restore],[EStateM]]
[Classical.choose,[Subtype.val, Classical.indefiniteDescription],[]]
[imp_or_distrib,[Decidable.imp_or_distrib],[Iff, Or]]
[UInt16.add_def,[rfl],[Eq, HAdd.hAdd, UInt16.mk, UInt16.val]]
[ExceptCpsT.runCatch_lift,[of_eq_true, Eq.trans, congrFun, congrArg, Eq, bind_pure, eq_self],[Eq, ExceptCpsT.runCatch, ExceptCpsT.lift]]
[Array.foldrM,[dite, LE.le, Array.size, ite, LT.lt, Pure.pure, Nat.le_refl, Array.foldrM.fold],[]]
[List.enumFrom,[List, Prod, Nat, List.nil, List.cons, Prod.mk, PProd.fst, HAdd.hAdd, OfNat.ofNat],[List, Prod, Nat]]
[instSemiringFin,[Semiring.mk, instSemiringFin.proof_6, HMul.hMul, Fin.ofNat', Fin.size_positive, instSemiringFin.proof_7, instSemiringFin.proof_8, instSemiringFin.proof_9, instSemiringFin.proof_10, instSemiringFin.proof_11, instSemiringFin.proof_12, instSemiringFin.proof_13, instSemiringFin.proof_14],[Semiring, Fin]]
[instMonadLiftSTEST,[MonadLift.mk, EStateM.Result, EStateM.Result.ok],[MonadLift, ST, EST]]
[List.toStringAux,[Bool.false, Bool.true, String, HAppend.hAppend, ToString.toString, PProd.fst],[String]]
[List.map_eq_nil,[Iff.intro, rfl, Eq.symm, Eq.refl, Eq.mpr, Eq, List.map, List.nil],[Iff, Eq, List.map, List.nil]]
[UInt8.mod_def,[rfl],[Eq, HMod.hMod, UInt8.mk, UInt8.val]]
[Mathlib.Tactic.Lint.formatLemmas,[Bind.bind, Array.mapM, Lean.mkConstWithLevelParams, Pure.pure, Lean.ToMessageData.toMessageData],[Lean.Core.CoreM, Lean.MessageData]]
[Array.getLit.proof_1,[Eq.symm],[LT.lt, Array.size]]
[Mathlib.Tactic.Lint.printWarning,[Bind.bind, Lean.mkConstWithLevelParams, Pure.pure, HAppend.hAppend, Lean.ToMessageData.toMessageData],[Lean.Core.CoreM, Lean.MessageData]]
[Classical.typeDecidable,[PSum, False, Classical.propDecidable, Nonempty, PSum.inl, arbitrary, PSum.inr, Classical.typeDecidable.proof_1],[PSum, False]]
[instReprTupleProd,[ReprTuple.mk, List, Std.Format, ReprTuple.reprTuple, List.cons, repr],[ReprTuple, Prod]]
[FloatArray.foldlM,[dite, LE.le, FloatArray.size, FloatArray.foldlM.proof_1],[]]
[Nat.strong_induction_on,[Nat.strong_rec_on],[]]
[And.imp_right,[And.imp, id],[And]]
[«term_<|>_»,[Lean.ParserDescr.trailingNode, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.symbol, Lean.ParserDescr.cat],[Lean.TrailingParserDescr]]
[instMonadControlOptionT,[MonadControl.mk, Option, liftM, OptionT.run],[MonadControl, OptionT]]
[ReaderT.orElse,[HOrElse.hOrElse, Unit.unit],[ReaderT]]
[UInt8.xor,[UInt8.mk, Fin.xor, UInt8.val],[UInt8]]
[em',[Or.swap, em],[Or, Not]]
[coeId,[CoeT.mk],[CoeT]]
[UInt32.instSemiringUInt32.proof_13,[UInt32.eq_of_val_eq, Eq.mpr, congrArg, Eq, Fin.ofNat', HAdd.hAdd, OfNat.ofNat, Fin.size_positive', UInt32.val, Eq.trans, UInt32.mk, UInt32.one_def, UInt32.add_def],[Eq, Numeric.ofNat, HAdd.hAdd, OfNat.ofNat]]
[Function.Equiv.symm,[Eq.symm],[Function.Equiv]]
[instDecidableArrow.proof_2,[absurd],[False]]
[Char.toUpper,[ite, And, GE.ge, OfNat.ofNat, LE.le, Char.ofNat, HSub.hSub],[Char]]
[Ring.gsmul_neg',[],[Eq, Ring.gsmul, Int.negSucc, Neg.neg, Int.ofNat, Nat.succ]]
[Nat.land,[Nat.bitwise, and],[Nat]]
[Mathlib.ExtendedBinder.«term∀ᵉ_,_»,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.symbol, Mathlib.ExtendedBinder.extBinders, Lean.ParserDescr.cat],[Lean.ParserDescr]]
[and_assoc,[And.assoc],[Iff, And]]
[List.instAppendList,[Append.mk, List.append],[Append, List]]
[Nat.add_comm,[Eq, HAdd.hAdd, Eq.symm, Nat.zero_add],[Eq, HAdd.hAdd]]
[Or.imp_right,[Or.imp, id],[Or]]
[Int.instNumericInt,[Numeric.mk, Int.ofNat],[Numeric, Int]]
[Array.foldrM.fold.proof_1,[Nat.lt_of_lt_of_le, Nat.lt_succ_self],[LT.lt, Array.size]]
[EIO.mapTask,[BaseIO.mapTask, EIO.toBaseIO],[BaseIO, Task, Except]]
[instAddCommGroup.proof_3,[Semiring.nsmul_zero'],[Eq, Semiring.nsmul, OfNat.ofNat]]
[ST.Ref.h,[],[Nonempty]]
[Reader,[ReaderT, Id],[]]
[instSemiringFin.proof_1,[Fin.eq_of_val_eq, Eq.mpr, congrFun, congrArg, Eq, Eq.trans, Fin.val, Fin.add_def, OfNat.ofNat, HMod.hMod, HAdd.hAdd, Fin.zero_def, Nat.add_zero, Nat.mod_eq_of_lt, Fin.isLt],[Eq, HAdd.hAdd, OfNat.ofNat]]
[List.disjoint_of_disjoint_cons_left,[List.disjoint_of_subset_left, List.subset_cons],[List.disjoint]]
[List.erasep,[Unit.unit, List, List.nil, ite, List.cons, PProd.fst],[List]]
[if_false,[if_neg, not_false],[Eq, ite, False]]
[Nat.coprime.coprime_mul_right_right,[Nat.coprime.coprime_dvd_right, Nat.dvd_mul_right],[Nat.coprime]]
[instReprAtomFloat,[ReprAtom.mk],[ReprAtom, Float]]
[Task.map,[Task.pure, Task.get],[Task]]
[List.filterAux,[List, List.reverse, Unit.unit, PProd.fst, List.cons],[List]]
[min_comm,[eq_min, min_le_right, min_le_left, le_min],[Eq, min]]
[SeqLeft.seqLeft,[],[]]
[UInt16.ofNat,[UInt16.mk, Fin.ofNat],[UInt16]]
[ForM.forM,[],[PUnit]]
[Function.sometimes_eq,[dif_pos, Nonempty.intro],[Eq, Function.sometimes]]
[exists_of_exists_unique,[Exists.elim, Exists.intro, And.left],[Exists]]
[AddCommGroup.noConfusionType,[],[]]
[Prod.swap_surjective,[Function.right_inverse.surjective, Prod.swap_left_inverse],[Function.surjective, Prod.swap]]
[unexpandSubtype,[ite, Eq, Lean.Syntax.isOfKind, Lean.Name.mkStr, Lean.Name.anonymous, Bool.true, Lean.Syntax.matchesNull, OfNat.ofNat, cond, Bind.bind, Lean.MonadRef.mkInfoFromRefPos, Lean.MonadQuotation.getCurrMacroScope, Lean.MonadQuotation.getMainModule, Pure.pure, Lean.Syntax.node, Lean.SourceInfo.none, List.toArray, List.cons, Lean.Syntax.atom, List.nil, MonadExcept.throw, Unit.unit],[Lean.PrettyPrinter.Unexpander]]
[Option.none.sizeOf_spec,[Eq.refl, OfNat.ofNat],[Eq, SizeOf.sizeOf, Option.none, OfNat.ofNat]]
[USize.instSemiringUSize.proof_9,[rfl],[Eq, OfNat.ofNat]]
[Nat.lt_asymm,[Nat.le_lt_antisymm, Nat.le_of_lt],[Not, LT.lt]]
[timeCmdElab,[ite, Eq, Lean.Syntax.isOfKind, Lean.Name.mkStr, Lean.Name.anonymous, Bool.true, Bind.bind, liftM, IO.monoMsNow, Lean.Elab.Command.elabCommand, Lean.Elab.logInfoAt, HAppend.hAppend, Lean.ToMessageData.toMessageData, HSub.hSub, Lean.Elab.throwUnsupportedSyntax],[Lean.Elab.Command.CommandElab]]
[instReprSum,[Repr.mk, Std.Format, Repr.addAppParen, HAppend.hAppend, Std.Format.text, reprArg],[Repr, Sum]]
[Nat.imax,[ite, Eq, OfNat.ofNat, Nat.max],[Nat]]
[ExceptT.seqLeft_eq,[],[Eq, SeqLeft.seqLeft, Seq.seq, Functor.map, Function.const]]
[UInt64.mod_def,[rfl],[Eq, HMod.hMod, UInt64.mk, UInt64.val]]
[Thunk.pure,[Thunk.mk],[Thunk]]
[UInt16.val_eq_of_eq,[Eq, UInt16.val, congrArg],[Eq, UInt16.val]]
[bfix3,[PProd.fst],[]]
[Subtype.heq_iff_coe_heq,[],[Iff, HEq, Subtype.val]]
[List.get_cons_drop,[Eq.refl, List.length, List.nil, HEq.refl, Eq, List.cons, List.get, List.drop, HAdd.hAdd, OfNat.ofNat, rfl, PProd.fst, Nat.le_of_succ_le_succ, List.length_cons, Nat.add],[Eq, List.cons, List.get, List.drop, HAdd.hAdd, OfNat.ofNat]]
[ExceptT.instLawfulMonadExceptT.proof_1,[LawfulMonad.mk, ExceptT.bind_pure_comp, rfl, ExceptT.ext, of_eq_true, Eq.trans, congrFun, congrArg, Eq, ExceptT.run_bind, Pure.pure, Bind.bind, ExceptT.run_pure, Except, ExceptT.run, Except.error, LawfulMonad.pure_bind, Except.ok, eq_self, Eq.mpr, congr, LawfulMonad.bind_assoc, funext, bind_congr, Eq.symm, Eq.refl],[LawfulMonad, ExceptT]]
[default.sizeOf,[OfNat.ofNat],[Nat]]
[eq_rec_constant,[rfl, Eq.symm, eq_of_heq, Eq.refl, HEq.refl],[Eq]]
[withPtrEqUnsafe,[ite, Eq, BEq.beq, ptrAddrUnsafe, Bool.true, Unit.unit],[Bool]]
[decidableEq_of_decidableLe.proof_2,[le_refl],[False]]
[«term_++_»,[Lean.ParserDescr.trailingNode, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.symbol, Lean.ParserDescr.cat],[Lean.TrailingParserDescr]]
[List.beq,[Unit.unit, List.nil, List.cons, Bool, Bool.true, and, BEq.beq, PProd.fst, Bool.false],[Bool]]
[right_inverse,[Eq],[]]
[Option.toLOption,[Unit.unit, Lean.LOption, Lean.LOption.none, Lean.LOption.some],[Lean.LOption]]
[implies_true,[propext, Iff.intro, trivial, True.intro],[Eq, True]]
[unexpandEqRec,[ite, Eq, Lean.Syntax.isOfKind, Lean.Name.mkStr, Lean.Name.anonymous, Bool.true, Lean.Syntax.matchesNull, OfNat.ofNat, Bind.bind, Lean.MonadRef.mkInfoFromRefPos, Lean.MonadQuotation.getCurrMacroScope, Lean.MonadQuotation.getMainModule, Pure.pure, Lean.Syntax.node, Lean.SourceInfo.none, List.toArray, List.cons, Lean.Syntax.atom, List.nil, MonadExcept.throw, Unit.unit],[Lean.PrettyPrinter.Unexpander]]
[Function.injective_surj_inv,[Function.right_inverse.injective, Function.right_inverse_surj_inv],[Function.injective, Function.surj_inv]]
[Array.mkArray,[Array.mk, List.replicate],[Array]]
[ReaderT.instMonadExceptOfReaderT,[MonadExceptOf.mk, liftM, MonadExcept.throw, tryCatchThe],[MonadExceptOf, ReaderT]]
[Nat.mul_le_mul_right,[Nat.mul_le_mul_left, Nat.mul_comm],[LE.le, HMul.hMul]]
[decidableOfDecidableOfIff,[dite, Decidable.isTrue, Iff.mp, Decidable.isFalse, decidableOfDecidableOfIff.proof_1],[Decidable]]
[UInt64.instNegUInt64,[Neg.mk, UInt64.mk, Neg.neg, UInt64.val],[Neg, UInt64]]
[Ring.toSub,[],[Sub]]
[TC.accessible.proof_1,[Acc.intro, Acc.inv],[Acc, TC]]
[Fin.modn,[Fin, Fin.mk, HMod.hMod, Fin.modn.proof_1],[Fin]]
[right_comm,[],[right_commutative]]
[UInt8.sub,[UInt8.mk, HSub.hSub, UInt8.val],[UInt8]]
[instReprOption,[Repr.mk, Std.Format, Std.Format.text, Repr.addAppParen, HAppend.hAppend, reprArg],[Repr, Option]]
[Fin.zero_def,[],[Eq, Fin.val, OfNat.ofNat]]
[ForInStep.done.sizeOf_spec,[Eq.refl, HAdd.hAdd, OfNat.ofNat, SizeOf.sizeOf],[Eq, SizeOf.sizeOf, ForInStep.done, HAdd.hAdd, OfNat.ofNat]]
[MonadExceptOf.noConfusionType,[],[]]
[imp_or_distrib',[Decidable.imp_or_distrib'],[Iff, Or]]
[Array.findIdx?,[Array.size, OfNat.ofNat, rfl, Array.findIdx?.loop],[Option, Nat]]
[ofBoolUsing_eq_false,[of_decide_eq_false],[Not]]
[decidableLt_of_decidableLe.proof_2,[le_of_lt],[False]]
[instStreamSubarray,[Stream.mk, dite, LT.lt, Subarray.start, Subarray.stop, Option.none],[Stream, Subarray]]
[Nat.le_trans,[Eq.symm, eq_of_heq, Eq.refl, HEq.refl, LE.le, Nat.le.step, PProd.fst],[LE.le]]
[ExceptT.instMonadLiftExceptExceptT,[MonadLift.mk, ExceptT.mk, Pure.pure],[MonadLift, Except, ExceptT]]
[Unit,[PUnit],[]]
[Function.update_comp_eq_of_forall_ne,[Function.update_comp_eq_of_forall_ne'],[Eq, Function.comp, Function.update]]
[Mathlib.Prelude.Rename.RenameMap,[Std.HashMap, Lean.Name],[]]
[instInhabitedPointedType,[Inhabited.mk, PointedType.mk, PUnit, PUnit.unit],[Inhabited, PointedType]]
[EStateM.adaptExcept,[EStateM.Result, EStateM.Result.error, EStateM.Result.ok],[EStateM]]
[flip,[],[]]
[Tactic.Ring.HornerExpr.const.injEq,[Eq.propIntro, And.intro, Eq.refl, Tactic.Ring.HornerExpr.const, Eq.symm, eq_of_heq, HEq.refl],[Eq, Tactic.Ring.HornerExpr.const, And]]
[instReprAtomString,[ReprAtom.mk],[ReprAtom, String]]
[Int.negSucc_ofNat_mul_subNatNat,[],[Eq, HMul.hMul, Int.negSucc, Int.subNatNat, Nat.succ]]
[Fin.add,[Fin, Fin.mk, HMod.hMod, HAdd.hAdd, Fin.add.proof_1],[Fin]]
[DoResultPRBC.noConfusionType,[],[]]
[String.isSuffix,[List.isSuffix],[]]
[instDecidableEqSum.proof_4,[absurd],[False]]
[instShiftLeftUSize,[ShiftLeft.mk, USize.shiftLeft],[ShiftLeft, USize]]
[Equivalence.trans,[],[]]
[evalIntrov.intro1PStep,[Lean.Elab.Tactic.liftMetaTactic, Bind.bind, Lean.Meta.intro1P, Lean.Meta.MetaM, List, Lean.MVarId, Pure.pure, List.cons, List.nil],[Lean.Elab.Tactic.TacticM, Unit]]
[unexpandIte,[ite, Eq, Lean.Syntax.isOfKind, Lean.Name.mkStr, Lean.Name.anonymous, Bool.true, Lean.Syntax.matchesNull, OfNat.ofNat, Bind.bind, Lean.MonadRef.mkInfoFromRefPos, Lean.MonadQuotation.getCurrMacroScope, Lean.MonadQuotation.getMainModule, Pure.pure, Lean.Syntax.node, Lean.SourceInfo.none, List.toArray, List.cons, Lean.Syntax.atom, List.nil, MonadExcept.throw, Unit.unit],[Lean.PrettyPrinter.Unexpander]]
[List.exists_mem_cons_of_exists,[Exists, And, Mem.mem, List.cons, Exists.intro, And.intro, Or.inr],[Exists, And, Mem.mem, List.cons]]
[«term_<<<_»,[Lean.ParserDescr.trailingNode, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.symbol, Lean.ParserDescr.cat],[Lean.TrailingParserDescr]]
[«term_|||_»,[Lean.ParserDescr.trailingNode, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.symbol, Lean.ParserDescr.cat],[Lean.TrailingParserDescr]]
[invImage,[WellFoundedRelation.mk, InvImage, WellFoundedRelation.rel, invImage.proof_1],[WellFoundedRelation]]
[instDecidableEqSum.proof_3,[rfl],[Eq, Sum.inr]]
[UInt16.toUInt8,[Nat.toUInt8, UInt16.toNat],[UInt8]]
[UInt64.size_positive,[of_decide_eq_true, Eq.refl, Bool.true],[LT.lt, OfNat.ofNat, UInt64.size]]
[List.reverse_nil,[rfl],[Eq, List.reverse, List.nil]]
[HShiftRight.noConfusionType,[],[]]
[max_self,[of_eq_true, Eq.trans, congrFun, congrArg, Eq, if_t_t, LT.lt, eq_self],[Eq, max]]
[String.find,[String.findAux, String.bsize, OfNat.ofNat],[String.Pos]]
[instSemiringFin.proof_2,[Fin.eq_of_val_eq, of_eq_true, Eq.trans, congr, congrArg, Eq, Fin.val, Fin.mul_def, OfNat.ofNat, congrFun, HMod.hMod, HMul.hMul, Fin.zero_def, Nat.zero_mul, Nat.zero_mod, eq_true_of_decide, Eq.refl, Bool.true],[Eq, HMul.hMul, OfNat.ofNat]]
[List.map_id,[of_eq_true, Eq.trans, congrFun, congrArg, Eq, List.map_nil, List.nil, eq_self, List.map_cons, congr, List.cons, id_eq],[Eq, List.map, id]]
[UInt8.decLe,[Decidable, LE.le, inferInstanceAs],[Decidable, LE.le]]
[LawfulMonad.bind_assoc,[],[Eq, Bind.bind]]
[Option.eq_none_of_isNone,[Eq.refl, Bool.true, HEq.refl, Eq, Option.none, rfl],[Eq, Option.none]]
[CommGroup.toGroup,[],[Group]]
[Substring.stopPos,[],[String.Pos]]
[Tactic.Find.findType,[Lean.Meta.withReducible, Bind.bind, liftM, Lean.Meta.instantiateMVars, Lean.Meta.forallMetaTelescopeReducing, Option.none, Lean.MetavarKind.natural, Lean.Meta.abstractMVars, Lean.MonadEnv.getEnv, Tactic.DeclCache.get, Tactic.Find.findDeclsPerHead, ForIn.forIn, Lean.Meta.mkFreshLevelMVars, Lean.ConstantInfo.numLevelParams, Pure.pure, Lean.ConstantInfo.instantiateTypeLevelParams, Lean.Meta.forallTelescopeReducing, Lean.Meta.AbstractMVarsResult.numMVars, Lean.Expr.instantiateLevelParamsArray, Lean.Meta.AbstractMVarsResult.expr, Lean.Meta.AbstractMVarsResult.paramNames, List.toArray, Lean.Meta.lambdaMetaTelescope, Lean.Elab.Term.TermElabM, Bool, andM, Lean.Meta.isDefEq, Array.toList, List.nil, ite, Eq, Bool.true, GT.gt, OfNat.ofNat, Lean.Elab.logInfo, Lean.ToMessageData.toMessageData, ForInStep.done, PUnit.unit, ForInStep.yield],[Lean.Elab.Term.TermElabM, Unit]]
[Nat.toDigits,[Nat.toDigitsCore, HAdd.hAdd, OfNat.ofNat, List.nil],[List, Char]]
[le_or_gt,[le_or_lt],[Or, LE.le, GT.gt]]
[Set.setOf.unexpander,[ite, Eq, Lean.Syntax.isOfKind, Lean.Name.mkStr, Lean.Name.anonymous, Bool.true, Lean.Syntax.matchesIdent, Lean.Syntax.matchesNull, OfNat.ofNat, cond, Bind.bind, Lean.MonadRef.mkInfoFromRefPos, Lean.MonadQuotation.getCurrMacroScope, Lean.MonadQuotation.getMainModule, Pure.pure, Lean.Syntax.node, Lean.SourceInfo.none, List.toArray, List.cons, Lean.Syntax.atom, List.nil, MonadExcept.throw, Unit.unit],[Lean.PrettyPrinter.Unexpander]]
[Nat.coprime.coprime_mul_left,[Nat.coprime.coprime_dvd_left, Nat.dvd_mul_left],[Nat.coprime]]
[instDecidableEqUInt16,[UInt16.decEq],[DecidableEq, UInt16]]
[Semiring.toNumeric,[],[Numeric]]
[Nat.gcd_mul_right_left,[Eq.mpr, Eq.refl, Eq, Nat.gcd, HMul.hMul, Nat.mul_comm, Nat.gcd_mul_left_left, rfl],[Eq, Nat.gcd, HMul.hMul]]
[Int.fmod,[Int.ofNat, Int.negSucc, Nat.succ, Int, OfNat.ofNat, HMod.hMod, Int.subNatNat, Neg.neg],[Int]]
[List.forA,[Unit.unit, PUnit, Pure.pure, PUnit.unit, SeqRight.seqRight, PProd.fst],[PUnit]]
[USize.decEq.proof_2,[absurd],[False]]
[UInt32.toUInt16,[Nat.toUInt16, UInt32.toNat],[UInt16]]
[Array.isEmpty,[Decidable.decide, Eq, Array.size, OfNat.ofNat],[Bool]]
[Int.mod,[Int, Int.ofNat, HMod.hMod, Nat.succ, Neg.neg],[Int]]
[Functor.mapRev,[Functor.map],[]]
[Array.«term__[_:]»,[Lean.ParserDescr.trailingNode, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.const, Lean.ParserDescr.symbol, Lean.ParserDescr.cat],[Lean.TrailingParserDescr]]
[instOrdChar,[Ord.mk, compareOfLessAndEq],[Ord, Char]]
[Functor.map_map,[Eq.symm, LawfulFunctor.comp_map],[Eq, Functor.map, Function.comp]]
[Measure,[InvImage, LT.lt],[]]
[List.nil_union,[of_eq_true, eq_self],[Eq, List.union, List.nil]]
[Nat.mul_lt_mul,[Nat.lt_of_lt_of_le, Nat.mul_lt_mul_of_pos_right, Nat.mul_le_mul_of_nonneg_left],[LT.lt, HMul.hMul]]
[String.toSubstring,[Substring.mk, OfNat.ofNat, String.bsize],[Substring]]
[prodHasDecidableLt,[inferInstanceAs, Decidable, Or, LT.lt, Prod.fst, And, Eq, Prod.snd],[Decidable, LT.lt]]
[MonadState.noConfusionType,[],[]]
[PSigma.snd,[],[PSigma.fst]]
[Quotient.liftOn,[Quot.liftOn],[]]
[«term%[_|_]»,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.symbol, Lean.ParserDescr.sepBy, Lean.ParserDescr.cat, Bool.false],[Lean.ParserDescr]]
[Tactic.Ring.zero_horner,[of_eq_true, Eq.trans, congrFun, congrArg, Eq, HAdd.hAdd, MonoidWithZero.zero_mul, HPow.hPow, zero_add, eq_self],[Eq, Tactic.Ring.horner, OfNat.ofNat]]
[UInt8.neg_def,[rfl],[Eq, Neg.neg, UInt8.mk, UInt8.val]]
[forall_eq',[of_eq_true, Eq.trans, congrFun, congrArg, Iff, forall_congr, implies_congr, propext, eq_comm, Eq.refl, forall_eq, iff_self],[Iff]]
[String.codepointPosToUtf8PosFrom,[String.Pos, PProd.fst, String.next],[String.Pos]]
[Or.neg_resolve_right,[Or.elim, id, absurd],[]]
[DoResultPRBC.continue.sizeOf_spec,[Eq.refl, HAdd.hAdd, OfNat.ofNat, SizeOf.sizeOf],[Eq, SizeOf.sizeOf, DoResultPRBC.continue, HAdd.hAdd, OfNat.ofNat]]
[OptionT.mk,[],[OptionT]]
[DoResultBC.continue.sizeOf_spec,[Eq.refl, HAdd.hAdd, OfNat.ofNat, SizeOf.sizeOf],[Eq, SizeOf.sizeOf, DoResultBC.continue, HAdd.hAdd, OfNat.ofNat]]
[instAddCommGroup.proof_1,[Semiring.add_zero],[Eq, HAdd.hAdd, OfNat.ofNat]]
[instToFormatProd,[Std.ToFormat.mk, Std.Format, Std.Format.paren, HAppend.hAppend, Std.ToFormat.format, Std.Format.text, Std.Format.line],[Std.ToFormat, Prod]]
[instSubUInt32,[Sub.mk, UInt32.sub],[Sub, UInt32]]
[Prod.snd_injective,[Prod.ext', Subsingleton.elim, Prod.fst],[Function.injective, Prod.snd]]
[Mathlib.ExtendedBinder.«term∀___,_»,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.symbol, Lean.ParserDescr.const, Lean.ParserDescr.cat],[Lean.ParserDescr]]
[instReprUInt32,[Repr.mk, repr, UInt32.toNat],[Repr, UInt32]]
[StateT.seqRight_eq,[StateT.ext, Eq.mpr, congr, congrArg, Eq, StateT.run_seqRight, Eq.trans, StateT.run_seq, Functor.map, id, Bind.bind, StateT.run_map, map_eq_pure_bind, Prod.mk, Prod.snd, StateT.run, funext, Prod.fst, LawfulMonad.bind_assoc, Pure.pure, LawfulMonad.pure_bind, congrFun, id_eq, bind_congr, of_eq_true, Prod.ext, bind_pure, eq_self, Eq.symm, Eq.refl],[Eq, SeqRight.seqRight, Seq.seq, Functor.map, Function.const, id]]
[Function.extend_def,[Eq.mpr, Eq.refl, Eq, Function.extend, dite, Exists, Classical.choose, Subsingleton.elim, Classical.propDecidable, rfl],[Eq, Function.extend, dite, Exists, Classical.choose]]
[String.toInt?,[OptionM.run, ite, Eq, String.get, OfNat.ofNat, Char.ofNat, Bind.bind, Substring.toNat?, Substring.drop, String.toSubstring, Pure.pure, Neg.neg, Int.ofNat, Functor.map, String.toNat?],[Option, Int]]
[Bool.false_and,[rfl, Eq.symm, Eq.refl],[Eq, and, Bool.false]]
[USize.instSemigroupUSize.proof_1,[congrArg, USize.mk, Semigroup.mul_assoc, USize.val],[Eq, USize.mk]]
[UInt32.add_def,[rfl],[Eq, HAdd.hAdd, UInt32.mk, UInt32.val]]
[StateT.run_monadMap,[rfl],[Eq, StateT.run, MonadFunctorT.monadMap]]
[withTheReader,[MonadWithReaderOf.withReader],[]]
[UInt16.size,[OfNat.ofNat],[Nat]]
[List.mapA,[Unit.unit, List, Pure.pure, List.nil, Seq.seq, Functor.map, List.cons, PProd.fst],[List]]
[UInt8.sub_def,[rfl],[Eq, HSub.hSub, UInt8.mk, UInt8.val]]
[FloatArray.noConfusionType,[],[]]
[Fin.instShiftLeftFin,[ShiftLeft.mk, Fin.shiftLeft],[ShiftLeft, Fin]]
[termIfThenElse,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.unary, Lean.ParserDescr.binary, Lean.ParserDescr.symbol, Lean.ParserDescr.cat, Lean.ParserDescr.const],[Lean.ParserDescr]]
[String.repeat,[String.mk, List.repeat],[String]]
[Alternative.orElse,[],[]]
[stx!_,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.nonReservedSymbol, Bool.false, Lean.ParserDescr.cat],[Lean.ParserDescr]]
[and_not_self_iff,[Iff.intro, And.right, And.left, False.elim],[Iff, And, Not, False]]
[exists_prop_decidable.proof_2,[mt],[Not, Exists]]
[Subtype.prop,[Subtype.property],[Subtype.val]]
[Nat.gcd_mul_lcm,[],[Eq, HMul.hMul, Nat.gcd, Nat.lcm]]
[Ord.compare,[],[Ordering]]
[String.takeRight,[Substring.toString, Substring.takeRight, String.toSubstring],[String]]
[Char.isAlpha,[or, Char.isUpper, Char.isLower],[Bool]]
[MonadFinally.noConfusionType,[],[]]
[List.isEqv,[List.nil, List.cons, Bool, Bool.true, and, PProd.fst, Bool.false],[Bool]]
[UInt32.ofNat,[UInt32.mk, Fin.ofNat],[UInt32]]
[Tactic.Ring.HornerExpr.noConfusionType,[],[]]
[imp_iff_right,[Iff.intro, imp_intro],[Iff]]
[List.cons_append,[rfl],[Eq, HAppend.hAppend, List.cons]]
[Function.update_eq_self,[Iff.mpr, Function.update_eq_iff, And.intro, rfl],[Eq, Function.update]]
[Int.zero_mul,[Int.mul_zero, Int.mul_comm, OfNat.ofNat],[Eq, HMul.hMul, OfNat.ofNat]]
[DoResultBC.noConfusionType,[],[]]
[optParam,[],[]]
[UInt32.instSemiringUInt32.proof_4,[congrArg, UInt32.mk, AddMonoid.nsmul_succ', UInt32.val],[Eq, UInt32.mk, Semiring.nsmul, Nat.succ, UInt32.val]]
[instHMod,[HMod.mk, Mod.mod],[HMod]]
[iff_false_left,[Iff.intro, mt, Iff.mpr, iff_of_false],[Iff, Not]]
[not_of_not_not_not,[absurd, not_not_intro],[Not]]
[decidable_of_iff',[decidable_of_decidable_of_iff, Iff.symm],[Decidable]]
[Tactic.Ring.HornerExpr.xadd',[Bind.bind, Tactic.Ring.mkAppCS, Lean.Name.mkStr, Lean.Name.anonymous, List.toArray, List.cons, Tactic.Ring.HornerExpr.e, Prod.fst, List.nil, Pure.pure, Tactic.Ring.HornerExpr.xadd],[Tactic.Ring.RingM, Tactic.Ring.HornerExpr]]
[instInhabitedUSize,[Inhabited.mk, USize.ofNatCore, OfNat.ofNat, instInhabitedUSize.proof_1],[Inhabited, USize]]
[Semiring.zero_mul,[],[Eq, HMul.hMul, OfNat.ofNat]]
[UInt16.instRingUInt16.proof_4,[congrArg, UInt16.mk, SubNegMonoid.gsmul_neg', UInt16.val],[Eq, UInt16.mk, Ring.gsmul, Int.negSucc, UInt16.val]]
[List.drop_eq_nil_of_le,[Eq.mpr, Eq.refl, Eq, List.drop, List.nil, Eq.symm, List.length'_eq_length, List.drop_eq_nil_of_le'],[Eq, List.drop, List.nil]]
[Ring.sub_eq_add_neg,[],[Eq, HSub.hSub, HAdd.hAdd, Neg.neg]]
[StdGen.mk.inj,[And.intro],[And, Eq]]
[Nat.foldAux,[PProd.fst, HSub.hSub, Nat.succ],[]]
[add_left_neg,[AddGroup.add_left_neg],[Eq, HAdd.hAdd, Neg.neg, OfNat.ofNat]]
[EStateM.Result.ok.sizeOf_spec,[Eq.refl, HAdd.hAdd, OfNat.ofNat, SizeOf.sizeOf],[Eq, SizeOf.sizeOf, EStateM.Result.ok, HAdd.hAdd, OfNat.ofNat]]
[Nat.zero_lt_of_lt,[LT.lt, OfNat.ofNat],[LT.lt, OfNat.ofNat]]
[Ne.def,[rfl],[Eq, Ne, Not]]
[Thunk.noConfusionType,[],[]]
[ByteSlice.toArray,[ByteArray, ByteArray.extract],[ByteArray]]
[List.length_pos_iff_exists_mem,[Iff.intro, List.exists_mem_of_length_pos, LT.lt, OfNat.ofNat, List.length, List.length_pos_of_mem],[Iff, LT.lt, OfNat.ofNat, List.length, Exists, Mem.mem]]
[of_as_true,[False.elim],[]]
[Nat.dvd_gcd,[Nat.gcd.induction, Eq.mpr, Eq.refl, Dvd.dvd, Nat.gcd, OfNat.ofNat, Nat.gcd_zero_left, Nat.gcd_rec, Iff.mpr, Nat.dvd_mod_iff],[Dvd.dvd, Nat.gcd]]
[Array.size_mkArray,[List.length_replicate],[Eq, Array.size, Array.mkArray]]
[Function.cantor_surjective,[False],[Not, Function.surjective]]
[or_of_or_of_imp_right,[Or.imp_right],[Or]]
[ExceptT.bind_throw,[of_eq_true, Eq.trans, congrFun, congrArg, Eq, LawfulMonad.pure_bind, Except.error, Except, Pure.pure, eq_self],[Eq, Bind.bind, MonadExcept.throw]]
[Nat.lt_of_sub_eq_succ,[Iff.mp, not_le, False.elim, Eq.mp, Eq.trans, congrFun, congrArg, Eq, Nat.sub_eq_zero_of_le, Nat.succ, eq_false'],[LT.lt]]
[Iff.noConfusionType,[],[]]
[Mathlib.Tactic.Lint.heuristicallyExtractSimpLemmasCore,[Id.run, Bind.bind, ForIn.forIn, ite, Eq, Std.PersistentHashSet.contains, Lean.Meta.SimpLemmas.toUnfold, Lean.Meta.Simp.Context.simpLemmas, Bool.true, Pure.pure, PUnit.unit, ForInStep.yield, Lean.SMap.contains, Lean.Meta.CongrLemmas.lemmas, Lean.Meta.Simp.Context.congrLemmas, Option.none, Id, ForInStep, Std.HashSet, Lean.Name, Std.HashMap.find?, Std.HashSet.toArray],[Array, Lean.Name]]
[Set.mem,[],[]]
[Nat.dvd_gcd_iff,[Iff.intro, And.intro, Nat.dvd_trans, And.left, Nat.gcd_dvd, And.right, Nat.dvd_gcd],[Iff, Dvd.dvd, Nat.gcd, And]]
[Mem.mem,[],[]]
[ByteArray.foldlMUnsafe.fold,[ite, Eq, BEq.beq, Bool.true, Pure.pure, Bind.bind, ByteArray.uget, lcProof, ByteArray.foldlMUnsafe.fold, HAdd.hAdd, OfNat.ofNat],[]]
[Nat.gcd_dvd_gcd_mul_right_right,[Nat.gcd_dvd_gcd_of_dvd_right, Nat.dvd_mul_right],[Dvd.dvd, Nat.gcd, HMul.hMul]]
[mul_one,[Monoid.mul_one],[Eq, HMul.hMul, OfNat.ofNat]]
[Subarray.foldr,[Id.run, Subarray.foldrM],[]]
[Tactic.Ring.Cache.α,[],[Lean.Expr]]
[neq_of_not_iff,[mt, Eq.to_iff],[Ne]]
[Substring.drop,[Substring.mk, Substring, HAdd.hAdd, Substring.nextn, OfNat.ofNat],[Substring]]
[Fin.val,[],[Nat]]
[ExceptT.bind,[ExceptT.mk, Bind.bind, ExceptT.bindCont],[ExceptT]]
[System.SearchPath.parse,[List.map, System.FilePath.mk, String.split, BEq.beq, System.SearchPath.separator],[System.SearchPath]]
[emptyWf.proof_1,[WellFounded.intro, Acc.intro, Acc, emptyRelation, Eq.refl],[WellFounded, emptyRelation]]
[Id.run,[],[]]
[Id.bind_eq,[rfl],[Eq, Bind.bind]]
[ne_true_of_eq_false,[Not, Eq, Bool.true],[Not, Eq, Bool.true]]
[Nat.sub_lt,[LT.lt, HSub.hSub, absurd, Nat.lt_irrefl, OfNat.ofNat, Eq.symm, Nat.succ_sub_succ_eq_sub],[LT.lt, HSub.hSub]]
[Function.update_comp_eq_of_injective,[Function.update_comp_eq_of_injective'],[Eq, Function.comp, Function.update]]
[Function.const,[],[]]
[USize.ofNat,[USize.mk, Fin.ofNat', usize_size_gt_zero],[USize]]
[heq_of_eq,[Eq.subst, HEq.refl],[HEq]]
[UInt8.zero_def,[rfl],[Eq, OfNat.ofNat, UInt8.mk]]
[Except.error.inj,[],[Eq]]
[Array.findIdx?.loop,[dite, LT.lt, Array.size, Option, Nat, False.elim, Array.findIdx?.loop.proof_1, ite, Eq, Array.get, Fin.mk, Bool.true, Option.some, Option.none],[Option, Nat]]
[apply_dite,[Decidable.em, of_eq_true, Eq.trans, congr, congrArg, Eq, dite_congr, eq_true, Eq.refl, Eq.mpr_prop, Eq.mpr_not, dite_true, eq_self, True.intro, Eq.symm, eq_false, dite_false, not_false],[Eq, dite]]
[instOrElse,[OrElse.mk, Alternative.orElse],[OrElse]]
[ByteArray.forIn.loop.proof_1,[Nat.lt_of_le_of_lt, Nat.sub_le, HSub.hSub, ByteArray.size, OfNat.ofNat, Nat.sub_lt, Nat.zero_lt_of_lt, Nat.lt_of_lt_of_le, Nat.lt_succ_self, of_decide_eq_true, Eq.refl, Bool.true],[LT.lt, HSub.hSub, ByteArray.size, OfNat.ofNat]]
[Array.appendCore.loop,[dite, LT.lt, Array.size, Unit.unit, Array, PProd.fst, HAdd.hAdd, OfNat.ofNat, Array.push, Array.get, Fin.mk],[Array]]
[Nat.instCommSemiringNat,[CommSemiring.mk, Nat.mul_comm],[CommSemiring, Nat]]
[ByteArray.foldlM.loop.proof_1,[Nat.lt_of_lt_of_le],[LT.lt, ByteArray.size]]
[Nat.find_spec,[And.left, Subtype.property, Nat.find_x],[Nat.find]]
[Or.intro_left,[Or.inl],[Or]]
[List.disjoint_symm,[],[List.disjoint]]
[tacticBy_cases_,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.nonReservedSymbol, Bool.false, Lean.ParserDescr.cat],[Lean.ParserDescr]]
[StateT,[Prod],[]]
[instSubsingletonSquash.proof_1,[Subsingleton.intro, Squash.ind, Quot.sound, True.intro],[Subsingleton, Squash]]
[Int.subNatNat,[Unit.unit, Int, HSub.hSub, Int.ofNat, Int.negSucc],[Int]]
[UInt8.instAddCommSemigroupUInt8.proof_1,[congrArg, UInt8.mk, AddCommSemigroup.add_comm, UInt8.val],[Eq, UInt8.mk]]
[id_eq,[rfl],[Eq, id]]
[Option.bind,[Option, Option.none],[Option]]
[Nat.gcd_mul_gcd_of_coprime_of_mul_eq_mul,[Nat.dvd_antisymm, Nat.coprime.dvd_of_dvd_mul_right, Nat.coprime.mul, Nat.coprime.gcd_left, Eq.mpr, Eq.refl, Dvd.dvd, HMul.hMul, Nat.gcd, Eq.symm, Nat.mul_dvd_mul, And.left, Nat.gcd_dvd, Nat.gcd_comm],[Eq, HMul.hMul, Nat.gcd]]
[Tactic.Ring.State.atoms,[],[Array, Lean.Expr]]
[or_true,[propext, Iff.intro, trivial, Or.inr],[Eq, Or, True]]
[Prod.RProdSubLex.proof_1,[Prod.Lex.left, Eq.symm, eq_of_heq, Eq.refl, HEq.refl],[Prod.Lex]]
[ExceptT.lift,[ExceptT.mk, Functor.map, Except.ok],[ExceptT]]
[instAddUInt8,[Add.mk, UInt8.add],[Add, UInt8]]
[UInt32.decEq.proof_1,[rfl],[Eq, UInt32.mk]]
[hidden,[],[]]
[Nat.mod_eq,[congrFun, WellFounded.fix_eq, WellFoundedRelation.wf, measure, id, dite, And, LT.lt, OfNat.ofNat, LE.le, HSub.hSub, Nat.sub_lt, Nat.lt_of_lt_of_le, dif_eq_if, HMod.hMod],[Eq, HMod.hMod, ite, And, LT.lt, OfNat.ofNat, LE.le, HSub.hSub]]
[Nat.coprime_self,[of_eq_true, Eq.trans, congrFun, congrArg, Iff, Eq, Nat.gcd_self, OfNat.ofNat, iff_self],[Iff, Nat.coprime, Eq, OfNat.ofNat]]
[Group.mul_left_inv,[],[Eq, HMul.hMul, Inv.inv, OfNat.ofNat]]
[Mul.mul,[],[]]
[Id.instOfNatId,[inferInstanceAs, OfNat],[OfNat, Id]]
[Nat.div_eq_of_lt,[Eq.mpr, Eq.refl, Eq, HDiv.hDiv, OfNat.ofNat, Nat.div_eq, ite, And, LT.lt, LE.le, HAdd.hAdd, HSub.hSub, if_neg, Nat.not_le_of_gt, And.right, rfl],[Eq, HDiv.hDiv, OfNat.ofNat]]
[ReprAtom.noConfusionType,[],[]]
[inv_eq_of_mul_eq_one,[left_inv_eq_right_inv, inv_mul_self],[Eq, Inv.inv]]
[Subtype.map_involutive,[Subtype.ext, Subtype.val],[Function.involutive, Subtype.map]]
[Nat.lt_by_cases,[Nat.lt_ge_by_cases, Nat.le_antisymm],[]]
[Nat.gcd_dvd,[Nat.gcd.induction, And.intro, Exists.intro, OfNat.ofNat, of_eq_true, Eq.trans, congrArg, Eq, congrFun, HMul.hMul, Nat.gcd_zero_left, Nat.mul_zero, eq_true_of_decide, Eq.refl, Bool.true, Nat.mul_one, eq_self, Eq.mpr, Dvd.dvd, Nat.gcd, Nat.gcd_rec, Iff.mp, Nat.dvd_mod_iff, Eq.mp, HMod.hMod, Eq.symm],[And, Dvd.dvd, Nat.gcd]]
[Int.sign_neg_one,[rfl],[Eq, Int.sign, Neg.neg, OfNat.ofNat]]
[Nat.coprime_one_right_iff,[of_eq_true, Eq.trans, congr, congrArg, Iff, congrFun, Eq, Nat.gcd_one_right, OfNat.ofNat, eq_true_of_decide, Eq.refl, Bool.true],[Iff, Nat.coprime, OfNat.ofNat, Eq, Bool.true]]
[Decidable.peirce,[dite, Not.elim],[]]
[Nat.sub_pos_of_lt,[Nat.lt_of_add_lt_add_right, Eq.mpr, Eq.refl, LT.lt, HAdd.hAdd, OfNat.ofNat, HSub.hSub, Nat.zero_add, Nat.sub_add_cancel, Nat.le_of_lt],[LT.lt, OfNat.ofNat, HSub.hSub]]
[bfix6,[PProd.fst],[]]
[instHashableFin,[Hashable.mk, Nat.toUInt64, Fin.val],[Hashable, Fin]]
[Mathlib.Tactic.Lint.printWarnings,[Bind.bind, Mathlib.Tactic.Lint.sortResults, Array.mapM, Lean.Core.CoreM, Lean.MessageData, Mathlib.Tactic.Lint.printWarning, Pure.pure, Lean.MessageData.joinSep, Array.toList, Lean.MessageData.ofFormat, Std.Format.line],[Lean.Core.CoreM, Lean.MessageData]]
[List.exists_cons_of_ne_nil,[absurd, Eq.refl, List.nil, Exists.intro, rfl],[Exists, Eq, List.cons]]
[optionCoe,[CoeTail.mk, Option.some],[CoeTail, Option]]
[StateCpsT,[],[]]
[CommSemigroup.toSemigroup,[],[Semigroup]]
[instHXor,[HXor.mk, Xor.xor],[HXor]]
[instMonadReaderOf,[MonadReaderOf.mk, liftM, MonadReader.read],[MonadReaderOf]]
[instReprULift,[Repr.mk, Repr.addAppParen, HAppend.hAppend, Std.Format.text, reprArg, ULift.down],[Repr, ULift]]
[ForInStep.yield.sizeOf_spec,[Eq.refl, HAdd.hAdd, OfNat.ofNat, SizeOf.sizeOf],[Eq, SizeOf.sizeOf, ForInStep.yield, HAdd.hAdd, OfNat.ofNat]]
[List.exists_of_length_succ,[Exists, Eq, List.cons, absurd, Eq.symm, Nat.succ_ne_zero, Exists.intro, rfl],[Exists, Eq, List.cons]]
[Function.inv_fun_on,[dite, Exists, And, Mem.mem, Eq, Classical.choose, Classical.choice],[]]
[UInt8.add_def,[rfl],[Eq, HAdd.hAdd, UInt8.mk, UInt8.val]]
[Classical.indefiniteDescription.proof_1,[Nonempty, Subtype, Nonempty.intro, Subtype.mk],[Nonempty, Subtype]]
[Prod.snd_swap,[rfl],[Eq, Prod.snd, Prod.swap, Prod.fst]]
[Nat.mul_dvd_mul,[Dvd.dvd, HMul.hMul, Exists.intro, Eq.mpr, Eq.refl, Eq, Nat.mul_assoc, Eq.symm, Nat.mul_comm, rfl],[Dvd.dvd, HMul.hMul]]
[ByteArray.push,[ByteArray, ByteArray.mk, Array.push],[ByteArray]]
[instIsAddRightCancel.proof_1,[Eq.mpr, Eq.refl, Eq, Eq.symm, add_neg_cancel_right, HAdd.hAdd, Neg.neg, rfl],[Eq]]
[FloatArray.forIn,[FloatArray.size, Nat.le_refl, FloatArray.forIn.loop],[]]
[instInhabitedOrdering,[Inhabited.mk, Ordering.lt],[Inhabited, Ordering]]
[instDecidableIff.proof_3,[Iff.mpr],[False]]
[PSigma.skipLeft.proof_1,[PSigma.revLex, WellFoundedRelation.wf, emptyWf],[WellFounded, PSigma.RevLex, emptyRelation, WellFoundedRelation.rel]]
[Classical.epsilon_spec,[Classical.epsilon_spec_aux, nonempty_of_exists],[Classical.epsilon]]
[Fin.overflowingMul,[Prod.mk, Decidable.decide, LE.le, HMul.hMul, Fin.val],[Prod, Bool, Fin]]
[Option.get!,[Unit.unit, panicWithPosWithDecl, OfNat.ofNat],[]]
[Int.instDecidableEqInt,[Int.decEq],[DecidableEq, Int]]
[iff_true_right,[Iff.trans, Iff.comm, iff_true_left],[Iff]]
[Mathlib.Tactic.Lint.Linter.noErrorsFound,[],[Lean.MessageData]]
[instRingFin,[Ring.mk, Fin, Semiring.nsmul, Neg.neg, Nat.succ, instRingFin.proof_2, instRingFin.proof_3, instRingFin.proof_4, instRingFin.proof_5],[Ring, Fin]]
[List.inter,[List.filter, Decidable.decide, Mem.mem],[List]]
[String.Iterator.remainingToString,[String, String.extract, String.bsize],[String]]
[Array.foldl,[Id.run, Array.foldlM],[]]
[instLTUInt32,[LT.mk, LT.lt, UInt32.val],[LT, UInt32]]
[ByteArray.noConfusionType,[],[]]
[List.hasDecidableLt.proof_4,[Eq.symm, eq_of_heq, Eq.refl, List.cons, HEq.refl, False, absurd],[False]]
[Int.decLe,[Decidable, Int.NonNeg, Decidable.isTrue, Int.NonNeg.mk, Decidable.isFalse, Eq.refl, Int.negSucc, HEq.refl, False, HSub.hSub],[Decidable, LE.le]]
[mul_add,[Semiring.mul_add],[Eq, HMul.hMul, HAdd.hAdd]]
[Nat.coprime.dvd_of_dvd_mul_left,[Nat.coprime.dvd_of_dvd_mul_right, Eq.mp, Eq.refl, Dvd.dvd, HMul.hMul, Nat.mul_comm],[Dvd.dvd]]
[map_eq_pure_bind,[Eq.mpr, Eq.refl, Eq, Functor.map, Bind.bind, Pure.pure, Eq.symm, LawfulMonad.bind_pure_comp, rfl],[Eq, Functor.map, Bind.bind, Pure.pure]]
[not_or_of_imp,[Decidable.not_or_of_imp],[Or, Not]]
[List.mem_cons,[Iff.rfl],[Iff, Mem.mem, List.cons, Or, Eq]]
[Function.injective.ne,[mt],[Ne]]
[Array.set!,[Array.setD],[Array]]
[UInt16.instSemiringUInt16.proof_10,[rfl],[Eq, Nat.succ]]
[DoResultSBC.break.sizeOf_spec,[Eq.refl, HAdd.hAdd, OfNat.ofNat, SizeOf.sizeOf],[Eq, SizeOf.sizeOf, DoResultSBC.break, HAdd.hAdd, OfNat.ofNat]]
[CommMonoid.noConfusionType,[],[]]
[Tactic.Ring.HornerExpr.xadd.inj,[And.intro],[And, Eq]]
[String.leftpad_length,[Eq, String.length, String.leftpad, max, of_eq_true, Eq.trans, congrFun, congrArg, List.leftpad_length, List.length, eq_self],[Eq, String.length, String.leftpad, max]]
[UInt64.toUInt8,[Nat.toUInt8, UInt64.toNat],[UInt8]]
[eq_false_of_decide,[propext, Iff.intro, absurd, of_decide_eq_false, False.elim],[Eq, False]]
[instToStringSubtype,[ToString.mk, ToString.toString, Subtype.val],[ToString, Subtype]]
[Acc.ndrec,[],[]]
[UInt8.instRingUInt8.proof_2,[congrArg, UInt8.mk, Ring.gsmul_zero', UInt8.val],[Eq, UInt8.mk, Ring.gsmul, OfNat.ofNat, UInt8.val]]
[List.groupByAux,[List.nil, List.cons, List, Unit.unit, PProd.fst, List.reverse],[List]]
[USize.instSemiringUSize.proof_2,[of_eq_true, Eq.trans, forall_congr, congrFun, congrArg, Eq, HAdd.hAdd, USize.zero_def, USize.add_def, USize.mk, OfNat.ofNat, zero_add, USize.val, USize.mk_val_eq, eq_self, propext, forall_const, USize],[Eq, HAdd.hAdd, OfNat.ofNat]]
[instOfNat_1,[OfNat.mk, One.one],[OfNat]]
[UInt16.modn,[UInt16.mk, HMod.hMod, UInt16.val],[UInt16]]
[MonadExceptOf.tryCatch,[],[]]
[instShiftRightUInt16,[ShiftRight.mk, UInt16.shiftRight],[ShiftRight, UInt16]]
[FloatArray.forIn.loop,[Pure.pure],[]]
[InvImage.wf.proof_1,[WellFounded.intro, InvImage.accessible, WellFounded.apply],[WellFounded, InvImage]]
[Ordering.noConfusion,[noConfusionEnum, Ordering.toCtorIdx],[Ordering.noConfusionType]]
[List.perm_middle,[List.Perm, HAppend.hAppend, List.cons, List.Perm.refl, List.nil, List.Perm.trans, List.Perm.cons, List.Perm.swap],[List.Perm, HAppend.hAppend, List.cons]]
[Nat.sub_le_sub_right,[Unit.unit, LE.le, HSub.hSub, Nat.pred_le_pred, PProd.fst],[LE.le, HSub.hSub]]
[UInt32.instSemiringUInt32.proof_9,[rfl],[Eq, OfNat.ofNat]]
[UInt16.decEq.proof_1,[rfl],[Eq, UInt16.mk]]
[instCoeDep,[CoeDep.mk, coeFun],[CoeDep]]
[And.elim,[And.left, And.right],[]]
[USize.add,[USize.mk, HAdd.hAdd, USize.val],[USize]]
[instRingFin.proof_2,[Fin.eq_of_val_eq, of_eq_true, Eq.trans, congr, congrArg, Eq, Fin.val, Fin.mul_def, Fin.mk, HMod.hMod, Nat.mod_lt, Fin.size_positive, congrFun, HMul.hMul, Nat.zero_mod, Nat.zero_mul, Fin.zero_def, eq_true_of_decide, Eq.refl, Bool.true],[Eq, Fin, Semiring.nsmul, Neg.neg, Nat.succ, OfNat.ofNat]]
[Equiv.toFun,[],[]]
[le_of_not_le,[Or.resolve_left, le_total],[LE.le]]
[UInt32.sub,[UInt32.mk, HSub.hSub, UInt32.val],[UInt32]]
[HPow.hPow,[],[]]
[OptionT.instMonadFunctorOptionT,[MonadFunctor.mk, Option],[MonadFunctor, OptionT]]
[Subtype.map,[Subtype.mk, Subtype.val, Subtype.map.proof_1],[Subtype]]
[Function.const_def,[rfl],[Eq, Function.const]]
[ReaderT.run_pure,[rfl],[Eq, ReaderT.run, Pure.pure]]
[Int.ofNat_add_ofNat,[rfl],[Eq, HAdd.hAdd, Int.ofNat]]
[StateRefT'.instMonadLiftStateRefT',[MonadLift.mk, StateRefT'.lift],[MonadLift, StateRefT']]
[Nat.dvd_trans,[Dvd.dvd, Exists.intro, HMul.hMul],[Dvd.dvd]]
[Int.add_assoc_aux2,[Eq.mpr, congr, congrArg, Eq, Eq.trans, congrFun, HAdd.hAdd, Int.negSucc_ofNat_add_negSucc_ofNat, Int.ofNat, Int.negSucc_ofNat_add_ofNat, Nat.succ, Int.negSucc, Eq.refl, Int.subNatNat, Int.add_comm, Int.subNatNat_add_negSucc_ofNat, of_eq_true, Nat.add_succ, Nat.succ_add, Nat.add_comm, eq_self],[Eq, HAdd.hAdd, Int.negSucc, Int.ofNat]]
[ExceptT.instMonadLiftExceptT,[MonadLift.mk, ExceptT.lift],[MonadLift, ExceptT]]
[coeOfHead,[CoeHTCT.mk, coeHead],[CoeHTCT]]
[dif_pos,[Eq, dite, rfl, absurd],[Eq, dite]]
[Decidable.and_iff_not_or_not,[Eq.mpr, Eq.refl, Iff, And, Not, Or, Eq.symm, propext, Decidable.not_and_distrib, Decidable.not_not, Iff.rfl],[Iff, And, Not, Or]]
[instAddCommSemigroupFin.proof_1,[Fin.eq_of_val_eq, of_eq_true, Eq.trans, congr, congrArg, Eq, Fin.val, Fin.add_def, congrFun, HMod.hMod, Nat.add_comm, eq_self, HAdd.hAdd],[Eq, HAdd.hAdd]]
[Fin.shiftRight,[Fin, Fin.mk, HMod.hMod, HShiftRight.hShiftRight, Fin.shiftRight.proof_1],[Fin]]
[Int.one_mul,[Eq, HMul.hMul, OfNat.ofNat],[Eq, HMul.hMul, OfNat.ofNat]]
[System.FilePath.mk.sizeOf_spec,[Eq.refl, HAdd.hAdd, OfNat.ofNat, SizeOf.sizeOf],[Eq, SizeOf.sizeOf, System.FilePath.mk, HAdd.hAdd, OfNat.ofNat]]
[usize_size_eq,[],[Or, Eq, USize.size, OfNat.ofNat]]
[UInt8.shiftRight,[UInt8.mk, HShiftRight.hShiftRight, UInt8.val, UInt8.modn, OfNat.ofNat],[UInt8]]
[UInt16.le,[LE.le, UInt16.val],[]]
[instReprAtomInt,[ReprAtom.mk],[ReprAtom, Int]]
[«stx_+»,[Lean.ParserDescr.trailingNode, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.symbol],[Lean.TrailingParserDescr]]
[FloatSpec.float,[],[]]
[neg_add_cancel_left,[Eq.mpr, Eq.refl, Eq, HAdd.hAdd, Neg.neg, Eq.symm, add_assoc, add_left_neg, OfNat.ofNat, zero_add, rfl],[Eq, HAdd.hAdd, Neg.neg]]
[PSum.inl.injEq,[Eq.propIntro, Eq.refl, PSum.inl, Eq.symm, eq_of_heq, HEq.refl],[Eq, PSum.inl]]
[Repr.reprPrec,[],[Std.Format]]
[List.contains,[List.elem],[Bool]]
[LawfulApplicative.seqRight_eq,[],[Eq, SeqRight.seqRight, Seq.seq, Functor.map, Function.const, id]]
[Not.decidable_imp_symm,[Decidable.not_imp_symm],[]]
[String.Iterator.pos,[String.Pos],[String.Pos]]
[DivInvMonoid.div_eq_mul_inv,[],[Eq, HDiv.hDiv, HMul.hMul, Inv.inv]]
[Semiring.zero_add,[],[Eq, HAdd.hAdd, OfNat.ofNat]]
[toBoolUsing_eq_true,[decide_eq_true],[Eq, toBoolUsing, Bool.true]]
[UInt8.instCommRingUInt8,[CommRing.mk, UInt8.instCommRingUInt8.proof_1],[CommRing, UInt8]]
[String.toName,[List.foldl, Lean.Name.mkStr, String.trim, Lean.Name.anonymous],[Lean.Name]]
[Task.pure.sizeOf_spec,[Eq.refl, HAdd.hAdd, OfNat.ofNat, SizeOf.sizeOf],[Eq, SizeOf.sizeOf, Task.pure, HAdd.hAdd, OfNat.ofNat]]
[Nat.mod_mod,[Or.elim, Nat.eq_zero_or_pos, of_eq_true, Eq.trans, congr, congrArg, Eq, HMod.hMod, Nat.mod_zero, eq_self, Nat.mod_eq_of_lt, Nat.mod_lt],[Eq, HMod.hMod]]
[tryFinally,[Functor.map, Prod.fst],[]]
[UInt8.instSemiringUInt8.proof_9,[rfl],[Eq, OfNat.ofNat]]
[List.append_subset_of_subset_of_subset,[Or.elim, Iff.mp, List.mem_append],[Subset.subset, HAppend.hAppend]]
[List.zip,[List.zipWith, Prod.mk],[List, Prod]]
[Nat.mul_pred_right,[Eq.mpr, Eq.refl, Eq, HMul.hMul, Nat.pred, HSub.hSub, Nat.mul_comm, Nat.mul_pred_left, rfl],[Eq, HMul.hMul, Nat.pred, HSub.hSub]]
[and_iff_left_iff_imp,[Iff.intro, And.right, Iff.mpr, and_iff_left_of_imp],[Iff, And]]
[toBoolUsing,[Decidable.decide],[Bool]]
[UInt32.instSemiringUInt32.proof_3,[congrArg, UInt32.mk, Semiring.nsmul_zero', UInt32.val],[Eq, UInt32.mk, Semiring.nsmul, OfNat.ofNat, UInt32.val]]
[ByteSliceT.off,[],[Nat]]
[Function.injective.of_comp_iff,[Iff.intro, Function.injective.of_comp, Function.injective.comp],[Iff, Function.injective, Function.comp]]
[coeOfHeadOfTC,[CoeHTCT.mk, coeTC, coeHead],[CoeHTCT]]
[ByteArray.uset,[ByteArray, ByteArray.mk, Array.uset],[ByteArray]]
[instHAnd,[HAnd.mk, AndOp.and],[HAnd]]
[USize.instAddSemigroupUSize.proof_1,[congrArg, USize.mk, AddSemigroup.add_assoc, USize.val],[Eq, USize.mk]]
[Nat.forM.loop,[Unit.unit, Unit, Pure.pure, Bind.bind, HSub.hSub, OfNat.ofNat, PProd.fst],[Unit]]
[Function.swap,[],[]]
[Array.getSepElems,[Array.getEvenElems],[Array]]
[BaseIO.mapTasks,[List.nil, BaseIO.mapTasks.go],[BaseIO, Task]]
[instReprSourceInfo,[Repr.mk, Unit.unit, Std.Format, Repr.addAppParen, Std.Format.group, Std.Format.nest, ite, GE.ge, OfNat.ofNat, HAppend.hAppend, Std.Format.text, Std.Format.line, reprArg, Std.Format.FlattenBehavior.allOrNone],[Repr, Lean.SourceInfo]]
[Nat.eq_zero_of_mul_eq_zero,[Or, Eq, OfNat.ofNat, Or.inl, rfl, Or.inr, Nat.eq_zero_of_add_eq_zero_left, Eq.mp, Eq.refl, HMul.hMul, HAdd.hAdd, Nat.succ_mul],[Or, Eq, OfNat.ofNat]]
[commandSudoSet_option___,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.symbol, Lean.ParserDescr.const, Lean.ParserDescr.cat],[Lean.ParserDescr]]
[UInt16.instAddCommSemigroupUInt16,[AddCommSemigroup.mk, UInt16.instAddCommSemigroupUInt16.proof_1],[AddCommSemigroup, UInt16]]
[Quotient.recOnSubsingleton₂,[Quot.recOnSubsingleton],[]]
[by_contra,[Decidable.by_contradiction],[]]
[iff_not_self,[Iff.mpr],[Not, Iff]]
[Fin.ofNat.proof_1,[Nat.mod_lt, Nat.zero_lt_succ],[LT.lt, HMod.hMod, Nat.succ]]
[List.length_pos_of_mem,[LT.lt, OfNat.ofNat, List.length, List.nil, Eq.refl, Eq.mpr, List.cons, List.length_cons, Nat.zero_lt_succ],[LT.lt, OfNat.ofNat, List.length]]
[instReprFin,[Repr.mk, repr, Fin.val],[Repr, Fin]]
[instCommSemiring,[CommSemiring.mk, CommRing.mul_comm],[CommSemiring]]
[Semiring.toSemigroup,[],[Semigroup]]
[forall_prop_of_true,[forall_const],[Iff]]
[Function.bijective.surjective,[And.right],[Function.surjective]]
[FloatArray.size,[Nat, Array.size],[Nat]]
[InvImage,[],[]]
[Prod.ext,[rfl, Eq.symm, Eq.refl],[Eq, Prod.mk, Prod.fst, Prod.snd]]
[zero_lt_of_lt,[LT.lt, OfNat.ofNat, Nat.lt_trans, Nat.zero_lt_succ],[LT.lt, OfNat.ofNat]]
[MonadWithReaderOf.noConfusionType,[],[]]
[instToStringDecidable,[ToString.mk, String],[ToString, Decidable]]
[StateCpsT.instLawfulMonadStateCpsT.proof_1,[LawfulMonad.mk, rfl],[LawfulMonad, StateCpsT]]
[MonadExceptOf.throw,[],[]]
[congrArg,[rfl],[Eq]]
[Nat.repeat,[Nat.repeat.loop],[]]
[exists_prop_decidable,[dite, decidable_of_decidable_of_iff, exists_prop_decidable.proof_1, Decidable.isFalse, exists_prop_decidable.proof_2],[Decidable, Exists]]
[UInt64.lt,[LT.lt, UInt64.val],[]]
[List.cons.sizeOf_spec,[Eq.refl, HAdd.hAdd, OfNat.ofNat, SizeOf.sizeOf],[Eq, SizeOf.sizeOf, List.cons, HAdd.hAdd, OfNat.ofNat]]
[Array.getLit,[Array.get, Fin.mk, Array.getLit.proof_1],[]]
[instDecidableIff,[dite, Decidable.isTrue, instDecidableIff.proof_1, Decidable.isFalse, instDecidableIff.proof_2, instDecidableIff.proof_3, instDecidableIff.proof_4],[Decidable, Iff]]
[lt_by_cases.proof_1,[le_antisymm, le_of_not_gt],[Eq]]
[Nat.eq_zero_of_gcd_eq_zero_left,[Eq, OfNat.ofNat, Nat.eq_zero_or_pos, absurd, Eq.symm, ne_of_lt, Nat.gcd_pos_of_pos_left],[Eq, OfNat.ofNat]]
[Function.comp_const,[rfl],[Eq, Function.comp, Function.const]]
[instOrdUInt16,[Ord.mk, compareOfLessAndEq],[Ord, UInt16]]
[String.dropRight,[Substring.toString, Substring.dropRight, String.toSubstring],[String]]
[Mathlib.ExtendedBinder.«term∃ᵉ_,_»,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.symbol, Mathlib.ExtendedBinder.extBinders, Lean.ParserDescr.cat],[Lean.ParserDescr]]
[le_max_left,[dite, LT.lt, of_eq_true, Eq.trans, congrArg, LE.le, if_pos, eq_true, le_refl, Eq.mpr, if_neg, le_of_not_lt],[LE.le, max]]
[Nat.ble_succ_eq_true,[Eq.refl, Bool.true, HEq.refl, Eq, Nat.ble, Nat.succ, rfl, PProd.fst],[Eq, Nat.ble, Nat.succ, Bool.true]]
[Int.sign_zero,[rfl],[Eq, Int.sign, OfNat.ofNat]]
[CommSemiring.mul_comm,[],[Eq, HMul.hMul]]
[Mathlib.Tactic.Lint.«command#lintMathlibAll+-*Only__»,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.symbol, Lean.ParserDescr.unary, Lean.ParserDescr.nonReservedSymbol, Bool.false, Lean.ParserDescr.const],[Lean.ParserDescr]]
[USize.shiftLeft,[USize.mk, HShiftLeft.hShiftLeft, USize.val, USize.modn, System.Platform.numBits],[USize]]
[ReaderT.failure,[Alternative.failure],[ReaderT]]
[iff_not_comm,[Decidable.iff_not_comm],[Iff, Not]]
[not_and,[and_imp],[Iff, Not, And]]
[ST.Ref.mk.sizeOf_spec,[Eq.refl, HAdd.hAdd, OfNat.ofNat, SizeOf.sizeOf],[Eq, SizeOf.sizeOf, ST.Ref.mk, HAdd.hAdd, OfNat.ofNat]]
[false_iff,[propext, Iff.intro, Iff.mpr, False.elim],[Eq, Iff, False, Not]]
[UInt16.lor,[UInt16.mk, Fin.lor, UInt16.val],[UInt16]]
[List.set,[List, List.cons, PProd.fst, List.nil],[List]]
[List.length_nil,[rfl],[Eq, List.length, List.nil, OfNat.ofNat]]
[UInt16.add,[UInt16.mk, HAdd.hAdd, UInt16.val],[UInt16]]
[LinearOrder.le_total,[],[Or, LE.le]]
[Nat.le.intro,[Nat.le_add_right],[LE.le]]
[Function.injective.decidable_eq,[decidable_of_iff, Eq, Function.injective.eq_iff],[DecidableEq]]
[Mathlib.Tactic.Ext.tacticSplitAnds,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.nonReservedSymbol, Bool.false],[Lean.ParserDescr]]
[Function.update_idem,[funext, Decidable.em, Eq, of_eq_true, Eq.trans, congr, congrArg, dite_congr, congrFun, eq_self, Eq.refl, Eq.symm, Eq.mpr_prop, dite_true, True.intro, eq_false, dite_false],[Eq, Function.update]]
[Nat.mul_div_cancel',[Eq.mp, Eq.refl, Eq, HAdd.hAdd, OfNat.ofNat, HMul.hMul, HDiv.hDiv, Nat.zero_add, HMod.hMod, Nat.mod_eq_zero_of_dvd],[Eq, HMul.hMul, HDiv.hDiv]]
[Mathlib.Tactic.Lint.SimpLemmaInfo.hyps,[],[Array, Lean.Expr]]
[Mathlib.ExtendedBinder.«termSatisfiesBinderPred%__»,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.symbol, Lean.ParserDescr.cat],[Lean.ParserDescr]]
[List.subset.trans,[],[Subset.subset]]
[UInt16.instSemiringUInt16.proof_5,[of_eq_true, Eq.trans, forall_congr, congr, congrArg, Eq, congrFun, HMul.hMul, UInt16.zero_def, UInt16.mul_def, UInt16.mk, OfNat.ofNat, MonoidWithZero.zero_mul, UInt16.val, eq_true_of_decide, Eq.refl, Bool.true, propext, forall_const, UInt16],[Eq, HMul.hMul, OfNat.ofNat]]
[Nat.add_sub_cancel,[],[Eq, HSub.hSub, HAdd.hAdd]]
[forall_prop_decidable,[dite, decidableOfDecidableOfIff, forall_prop_decidable.proof_1, Decidable.isTrue, forall_prop_decidable.proof_2],[Decidable]]
[Int.ofNat_succ,[rfl],[Eq, Int.ofNat, Nat.succ, HAdd.hAdd, OfNat.ofNat]]
[EmptyCollection.emptyCollection,[],[]]
[Nat.coprime.gcd_eq_one,[id],[Eq, Nat.gcd, OfNat.ofNat]]
[Subtype.simps.coe,[Subtype.val],[]]
[Int.instCommRingInt.proof_6,[Eq.mpr, Eq.refl, Eq, HMul.hMul, Int.ofNat, Nat.succ, HAdd.hAdd, Int.ofNat_succ, OfNat.ofNat, Int.distrib_right, Int.add_comm, Int.one_mul, rfl],[Eq, HMul.hMul, Int.ofNat, Nat.succ, HAdd.hAdd]]
[Tactic.DeclCache,[Prod, Tactic.Cache, Lean.Meta.MetaM],[]]
[instReprSubarray,[Repr.mk, HAppend.hAppend, repr, Subarray.toArray, Std.Format.text],[Repr, Subarray]]
[iff_and_self,[Eq.mpr, Eq.refl, Iff, And, propext, and_comm, iff_self_and, Iff.rfl],[Iff, And]]
[instHashableList,[Hashable.mk, List.foldl, mixHash, Hashable.hash, OfNat.ofNat],[Hashable, List]]
[Prod.exists,[Iff.intro, Exists, Prod.mk, Exists.intro],[Iff, Exists, Prod.mk]]
[if_ctx_congr_prop,[Iff, ite, absurd, Iff.mp, not_iff_not_of_iff, Iff.mpr],[Iff, ite]]
[decidableOfDecidableOfEq,[],[Decidable]]
[FloatArray.forIn.loop.proof_2,[Nat.le_of_lt, Nat.lt_of_lt_of_le, Nat.lt_succ_self],[LE.le, FloatArray.size]]
[Nat.lcm_self,[Eq, Nat.lcm, Nat.eq_zero_or_pos, Eq.mpr, Eq.refl, OfNat.ofNat, Nat.lcm_zero_left, rfl],[Eq, Nat.lcm]]
[List.subset_cons_of_subset,[Or.inr],[Subset.subset, List.cons]]
[instSizeOfNat,[SizeOf.mk],[SizeOf, Nat]]
[Mathlib.Tactic.Lint.SimpLemmaInfo.noConfusionType,[],[]]
[Array.eraseIdx'.proof_1,[rfl],[Eq, Array.size]]
[Function.involutive.eq_iff,[Function.injective.eq_iff', Function.involutive.injective],[Iff, Eq]]
[instCoeStringError,[Coe.mk, IO.userError],[Coe, String, IO.Error]]
[Nat.gcd_zero_right,[of_eq_true, Eq.trans, congr, congrArg, Eq, congrFun, Nat.gcd, Nat.zero_eq, OfNat.ofNat, Nat.gcd_zero_left, eq_true_of_decide, Eq.refl, Bool.true, Eq.symm, Nat.gcd_succ, Nat.zero_mod, Nat.succ, eq_self],[Eq, Nat.gcd, OfNat.ofNat]]
[instToStringUSize,[ToString.mk, ToString.toString, USize.toNat],[ToString, USize]]
[Mod.noConfusionType,[],[]]
[List.span,[List.spanAux, List.nil],[Prod, List]]
[autoParam,[],[]]
[AddMonoid.zero_add,[],[Eq, HAdd.hAdd, OfNat.ofNat]]
[Equiv.apply_symm_apply,[Equiv.rightInv],[Eq, Equiv.toFun, Equiv.symm]]
[instLEUInt64,[LE.mk, UInt64.le],[LE, UInt64]]
[UInt64.instAddCommSemigroupUInt64,[AddCommSemigroup.mk, UInt64.instAddCommSemigroupUInt64.proof_1],[AddCommSemigroup, UInt64]]
[instLTOption,[LT.mk, Option.lt, LT.lt],[LT, Option]]
[Int.instLEInt,[LE.mk, Int.le],[LE, Int]]
[List.equiv_iff_subset_and_subset,[Iff.intro, And.intro, Iff.mp, Iff.mpr, Iff, Mem.mem],[Iff, List.equiv, And, Subset.subset]]
[instLTUSize,[LT.mk, USize.lt],[LT, USize]]
[AddSemigroup.add_assoc,[],[Eq, HAdd.hAdd]]
[UInt16.decLe,[Decidable, LE.le, inferInstanceAs],[Decidable, LE.le]]
[UInt32.instSemiringUInt32.proof_12,[Eq.mpr, congr, congrArg, Eq, Eq.trans, congrFun, HMul.hMul, UInt32.add_def, UInt32.mul_def, UInt32.mk, HAdd.hAdd, UInt32.val, UInt32.eq_of_val_eq, Semiring.add_mul],[Eq, HMul.hMul, HAdd.hAdd]]
[Function.injective.of_comp,[],[Function.injective]]
[UInt16.mul,[UInt16.mk, HMul.hMul, UInt16.val],[UInt16]]
[false_implies_iff,[Iff.intro, trivial, False.elim],[Iff, True]]
[Function.involutive.injective,[Function.left_inverse.injective, Function.involutive.left_inverse],[Function.injective]]
[instInhabitedDepArrow,[Inhabited.mk, arbitrary],[Inhabited]]
[Char.isValidCharNat,[Or, LT.lt, OfNat.ofNat, And],[]]
[«term_%_»,[Lean.ParserDescr.trailingNode, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.symbol, Lean.ParserDescr.cat],[Lean.TrailingParserDescr]]
[Int.sign,[Unit.unit, Int, OfNat.ofNat, Neg.neg],[Int]]
[mul_left_inv,[Group.mul_left_inv],[Eq, HMul.hMul, Inv.inv, OfNat.ofNat]]
[UInt64.val,[],[Fin, UInt64.size]]
[String.Iterator.nextn,[String.Iterator, PProd.fst, String.Iterator.next],[String.Iterator]]
[List.singleton_append,[rfl],[Eq, HAppend.hAppend, List.cons, List.nil]]
[UInt16.toUInt32,[Nat.toUInt32, UInt16.toNat],[UInt32]]
[instNonempty,[instNonempty.proof_1],[Nonempty]]
[Nat.all,[not, Nat.any],[Bool]]
[StateCpsT.runK_pure,[rfl],[Eq, StateCpsT.runK, Pure.pure]]
[HEq.rfl,[HEq.rfl.proof_1],[HEq]]
[Int.subNatNat_of_lt,[Eq.mpr, Eq.refl, Eq, Int.subNatNat, Int.negSucc, Nat.pred, HSub.hSub, Int.subNatNat_of_sub_eq_succ, Nat.succ, Nat.succ_pred_eq_of_pos, Nat.sub_pos_of_lt, rfl],[Eq, Int.subNatNat, Int.negSucc, Nat.pred, HSub.hSub]]
[Function.surjective_to_subsingleton,[Exists, Eq, Exists.intro, Subsingleton.elim],[Function.surjective]]
[Substring.atEnd,[Bool, BEq.beq, HAdd.hAdd],[Bool]]
[Function.comp_left,[],[]]
[Nat.coprime.mul_dvd_of_dvd_of_dvd,[Dvd.dvd, HMul.hMul, Nat.mul_dvd_mul_left, Nat.coprime.dvd_of_dvd_mul_left, Nat.coprime.symm, Eq.symm],[Dvd.dvd, HMul.hMul]]
[dbgTrace,[Unit.unit],[]]
[instHAndThen,[HAndThen.mk, AndThen.andThen],[HAndThen]]
[List.forM,[Unit.unit, PUnit, Pure.pure, PUnit.unit, Bind.bind, PProd.fst],[PUnit]]
[Nat.add_le_add_iff_le_right,[Iff.intro, Nat.le_of_add_le_add_right, Nat.add_le_add_right],[Iff, LE.le, HAdd.hAdd]]
[StateRefT'.run,[Bind.bind, ST.mkRef, ST.Ref.get, Pure.pure, Prod.mk],[Prod]]
[Nat.add_lt_add_left,[Nat.lt_of_succ_le, Nat.add_le_add_left, Nat.succ_le_of_lt, Nat.add_succ],[LT.lt, HAdd.hAdd]]
[Nat.dvd_mul_right,[Exists.intro, rfl],[Dvd.dvd, HMul.hMul]]
[instAddCommGroup.proof_4,[Semiring.nsmul_succ'],[Eq, Semiring.nsmul, Nat.succ, HAdd.hAdd]]
[LawfulApplicative.seq_assoc,[],[Eq, Seq.seq, Functor.map, Function.comp]]
[HXor.hXor,[],[]]
[GE.ge,[LE.le],[]]
[Semiring.npow,[],[]]
[instTransEq.proof_1,[Eq.symm],[]]
[Substring.isEmpty,[BEq.beq, Substring.bsize, OfNat.ofNat],[Bool]]
[instHModUSizeNatUSize,[HMod.mk, USize.modn],[HMod, USize, Nat]]
[Nat.div_lt_iff_lt_mul,[Eq.mpr, Eq.refl, Iff, LT.lt, HDiv.hDiv, HMul.hMul, Eq.symm, propext, not_le, Not, LE.le, not_congr, Nat.le_div_iff_mul_le],[Iff, LT.lt, HDiv.hDiv, HMul.hMul]]
[Function.surj_inv_eq,[Classical.choose_spec],[Eq, Function.surj_inv]]
[inferInstance,[],[]]
[ToBool.toBool,[],[Bool]]
[CoeT.coe,[],[]]
[Trans.noConfusionType,[],[]]
[Substring.startPos,[],[String.Pos]]
[List.card_map_eq_of_inj_on,[of_eq_true, Eq.trans, implies_congr, Eq.refl, List.inj_on, List.nil, congr, congrArg, Eq, List.card, List.map_nil, List.card_nil, eq_true_of_decide, Bool.true, implies_true, Decidable.em, Mem.mem, List.map, List.exists_of_mem_map, Eq.symm],[Eq, List.card, List.map]]
[right_cancelative,[Eq],[]]
[Char.utf8Size,[ite, LE.le, UInt32.ofNatCore, OfNat.ofNat, Char.utf8Size.proof_1, Char.utf8Size.proof_2, Char.utf8Size.proof_3, Char.utf8Size.proof_4, Char.utf8Size.proof_5, Char.utf8Size.proof_6, Char.utf8Size.proof_7],[UInt32]]
[Nat.find,[Subtype.val, Nat.find_x],[Nat]]
[InvImage.accessible.proof_1,[Acc.intro, rfl],[Acc, InvImage]]
[Fin.land,[Fin, Fin.mk, HMod.hMod, Nat.land, Fin.land.proof_1],[Fin]]
[«term_≈_»,[Lean.ParserDescr.trailingNode, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.symbol, Lean.ParserDescr.cat],[Lean.TrailingParserDescr]]
[UInt8.instSemiringUInt8.proof_7,[of_eq_true, Eq.trans, forall_congr, congrFun, congrArg, Eq, HMul.hMul, UInt8.one_def, UInt8.mul_def, UInt8.mk, OfNat.ofNat, one_mul, UInt8.val, UInt8.mk_val_eq, eq_self, propext, forall_const, UInt8],[Eq, HMul.hMul, OfNat.ofNat]]
[Tactic.Ring.State.mk.sizeOf_spec,[Eq.refl, HAdd.hAdd, OfNat.ofNat, SizeOf.sizeOf],[Eq, SizeOf.sizeOf, Tactic.Ring.State.mk, HAdd.hAdd, OfNat.ofNat]]
[instShiftRightUInt8,[ShiftRight.mk, UInt8.shiftRight],[ShiftRight, UInt8]]
[ExceptT.seqRight_eq,[],[Eq, SeqRight.seqRight, Seq.seq, Functor.map, Function.const, id]]
[Command.simpsProj,[Lean.ParserDescr.nodeWithAntiquot, Lean.Name.mkStr, Lean.Name.anonymous, Lean.ParserDescr.binary, Lean.ParserDescr.const, Lean.ParserDescr.unary, Lean.ParserDescr.symbol, Lean.ParserDescr.sepBy1, Command.simpsRule, Bool.false],[Lean.ParserDescr]]
[List.card_eq_of_equiv,[Nat.le_antisymm, List.card_subset_le, And.left, And.right],[Eq, List.card]]
[not_imp,[Decidable.not_imp],[Iff, Not, And]]
[List.map_cons,[rfl],[Eq, List.map, List.cons]]
[SubNegMonoid.gsmul,[],[]]
[true_iff_false,[iff_false_intro, Iff.mp, trivial],[Iff, True, False]]
[OfScientific.noConfusionType,[],[]]
[Float.mk.injEq,[Eq.propIntro, Eq.refl, Float.mk, Eq.symm, eq_of_heq, HEq.refl],[Eq, Float.mk]]
[instXorUInt64,[Xor.mk, UInt64.xor],[Xor, UInt64]]
[Prod.map_snd,[of_eq_true, Eq.trans, congrFun, congrArg, Eq, Prod.snd, prod_map, eq_self],[Eq, Prod.snd, Prod.map]]
[List.lengthTR,[List.lengthTRAux, OfNat.ofNat],[Nat]]
[Int.negOfNat_add,[Unit.unit, Eq, HAdd.hAdd, Int.negOfNat, of_eq_true, Eq.trans, congr, congrArg, Nat.zero_eq, Nat.add_zero, OfNat.ofNat, eq_true_of_decide, Eq.refl, Bool.true, Eq.mpr, congrFun, Nat.succ, Nat.zero_add, rfl, Nat.succ_add],[Eq, HAdd.hAdd, Int.negOfNat]]
[Union.noConfusionType,[],[]]
[Eq.substr,[Eq.symm],[]]
[false_of_ne,[Ne.irrefl],[False]]
[instReprSigma,[Repr.mk, Std.Format, Std.Format.bracket, HAppend.hAppend, repr, Std.Format.text],[Repr, Sigma]]
[exacts,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.nonReservedSymbol, Bool.false, Lean.ParserDescr.symbol, Lean.ParserDescr.sepBy, Lean.ParserDescr.cat],[Lean.ParserDescr]]
[Nat.fold,[Nat.foldAux],[]]
[Bool.false.sizeOf_spec,[Eq.refl, OfNat.ofNat],[Eq, SizeOf.sizeOf, Bool.false, OfNat.ofNat]]
[List.length_replicate.aux,[of_eq_true, Eq.trans, congrArg, Eq, List.length, congrFun, HAdd.hAdd, Nat.zero_eq, Nat.zero_add, eq_self, congr, List.cons, List.length_cons, Nat.add_succ, Nat.succ_add, Nat.succ],[Eq, List.length, List.replicate.loop, HAdd.hAdd]]
[Exists.nonempty,[Nonempty, Nonempty.intro],[Nonempty]]
[Array.zipWith,[Array.zipWithAux, OfNat.ofNat, List.toArray, List.nil],[Array]]
[Nat.coprime.coprime_mul_left_right,[Nat.coprime.coprime_dvd_right, Nat.dvd_mul_left],[Nat.coprime]]
[Subarray.mk.injEq,[Eq.propIntro, And.intro, Eq.refl, Subarray.mk, Eq.symm, eq_of_heq, HEq.refl],[Eq, Subarray.mk, And]]
[List.head?,[Unit.unit, Option, Option.none, Option.some],[Option]]
[ST.Prim.Ref.modifyGet,[Bind.bind, ST.Prim.Ref.get, ST, ST.Prim.Ref.set, Pure.pure],[ST]]
[ByteArray.size,[Nat, Array.size],[Nat]]
[UInt64.ofNat,[UInt64.mk, Fin.ofNat],[UInt64]]
[instDecidableXor.proof_3,[Or.inr, And.intro],[Or, And, Not]]
[Function.inv_fun_on_eq',[],[Eq, Function.inv_fun_on]]
[bfix5,[PProd.fst],[]]
[fixCore5,[bfix5, USize.size],[]]
[USize.instCommRingUSize.proof_1,[USize.eq_of_val_eq, Eq.mpr, congr, congrArg, Eq, USize.val, USize.mul_def, CommSemiring.mul_comm],[Eq, HMul.hMul]]
[Function.surjective.exists₃,[Iff.trans, Function.surjective.exists, exists_congr, Function.surjective.exists₂],[Iff, Exists]]
[HDiv.hDiv,[],[]]
[CoeFun.coe,[],[]]
[Except.error.injEq,[Eq.propIntro, Eq.refl, Except.error, Eq.symm, eq_of_heq, HEq.refl],[Eq, Except.error]]
[List.mem_bind,[Eq.mpr, congrFun, congrArg, Iff, Eq.trans, propext, List.mem_join, Exists, funext, And, List.mem_map, Mem.mem, Iff.intro, Eq.symm, eq_of_heq, Eq.refl, HEq.refl, Exists.intro, And.intro, Eq, rfl],[Iff, Mem.mem, List.bind, Exists, And]]
[Nat.gcd_eq_right_iff_dvd,[Eq.mpr, Eq.refl, Iff, Dvd.dvd, Eq, Nat.gcd, Nat.gcd_comm, Nat.gcd_eq_left_iff_dvd],[Iff, Dvd.dvd, Eq, Nat.gcd]]
[le_of_not_gt,[le_of_not_lt],[LE.le]]
[ReaderT.tryFinally,[MonadFinally.mk, MonadFinally.tryFinally'],[MonadFinally, ReaderT]]
[instHDiv,[HDiv.mk, Div.div],[HDiv]]
[coeOfHTCT,[CoeT.mk, CoeHTCT.coe],[CoeT]]
[UInt32.instAddSemigroupUInt32,[AddSemigroup.mk, UInt32.instAddSemigroupUInt32.proof_1],[AddSemigroup, UInt32]]
[Function.inv_fun_neg,[Function.inv_fun_on_neg, mt, Exists, Eq, Exists.intro],[Eq, Function.inv_fun, Classical.choice]]
[List.mem_append_eq,[propext, List.mem_append],[Eq, Mem.mem, HAppend.hAppend, Or]]
[List.card_cons_of_mem,[Eq.mpr, Eq.refl, Eq, ite, Mem.mem, List.card, HAdd.hAdd, OfNat.ofNat, if_pos, rfl],[Eq, List.card, List.cons]]
[Int.neg_eq_neg_one_mul,[Unit.unit, Eq, Neg.neg, HMul.hMul, OfNat.ofNat, rfl],[Eq, Neg.neg, HMul.hMul, OfNat.ofNat]]
[Nat.decEq,[Decidable, Eq, Nat.beq, Nat.decEq.proof_1, Decidable.isTrue, Nat.eq_of_beq_eq_true, Decidable.isFalse, Nat.ne_of_beq_eq_false],[Decidable, Eq]]
[Numeric.OfNat,[OfNat.mk, Numeric.ofNat],[OfNat]]
[Thunk.get,[Unit.unit],[]]
[Subarray.h₁,[],[LE.le, Subarray.start, Subarray.stop]]
[Classical.propDecidable.proof_1,[Nonempty, Decidable, Classical.em, Nonempty.intro, Decidable.isTrue, Decidable.isFalse],[Nonempty, Decidable]]
[List.minimum?,[Unit.unit, Option, Option.none, Option.some, List.foldl, min],[Option]]
[Nat.gcd_eq_right,[Eq.mpr, Eq.refl, Eq, Nat.gcd, Nat.gcd_comm, Nat.gcd_eq_left, rfl],[Eq, Nat.gcd]]
[instSemigroupFin.proof_1,[Fin.eq_of_val_eq, Eq.mpr, congr, congrArg, Eq, Fin.val, Eq.trans, congrFun, HMul.hMul, Fin.mul_def, Fin.mk, HMod.hMod, Nat.mod_lt, Fin.size_positive, Eq.refl, Eq.symm, Eq.mp, Nat.mul_mod, Nat.mod_eq_of_lt, Fin.isLt, Nat.mul_assoc, rfl],[Eq, HMul.hMul]]
[instDecidablePredComp,[inferInstanceAs, DecidablePred],[DecidablePred, Function.comp]]
[coeOfTCOfTail,[CoeHTCT.mk, coeTail, coeTC],[CoeHTCT]]
[TC.wf,[TC.wf.proof_1],[WellFounded, TC]]
[Function.surjective.forall₃,[Iff.trans, Function.surjective.forall, forall_congr', Function.surjective.forall₂],[Iff]]
[Tactic.Ring.horner,[HAdd.hAdd, HMul.hMul, HPow.hPow],[]]
[PNonScalar.noConfusionType,[],[]]
[MProd.fst,[],[]]
[UInt8.instCommRingUInt8.proof_1,[UInt8.eq_of_val_eq, Eq.mpr, congr, congrArg, Eq, UInt8.val, UInt8.mul_def, CommSemiring.mul_comm],[Eq, HMul.hMul]]
[Prod.mk.sizeOf_spec,[Eq.refl, HAdd.hAdd, OfNat.ofNat, SizeOf.sizeOf],[Eq, SizeOf.sizeOf, Prod.mk, HAdd.hAdd, OfNat.ofNat]]
[timeCmd,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.symbol, Lean.ParserDescr.cat],[Lean.ParserDescr]]
[AddCommSemigroup.add_comm,[],[Eq, HAdd.hAdd]]
[Nat.le_of_ble_eq_true,[Eq.refl, Bool.true, HEq.refl, LE.le, Nat.zero_le, Nat.succ_le_succ, PProd.fst],[LE.le]]
[Int.decEq.proof_4,[absurd],[False]]
[StateT.ext,[funext],[Eq]]
[UInt8.mul,[UInt8.mk, HMul.hMul, UInt8.val],[UInt8]]
[MonadStateOf.noConfusionType,[],[]]
[LawfulMonad.toLawfulApplicative,[],[LawfulApplicative]]
[RandomGen.next,[],[Prod, Nat]]
[List.map_singleton,[rfl],[Eq, List.map, List.cons, List.nil]]
[instTransEq_1.proof_1,[],[]]
[String.offsetOfPos,[String.offsetOfPosAux, OfNat.ofNat],[Nat]]
[UInt64.instInhabitedFinSize,[Inhabited.mk, Fin.ofNat', OfNat.ofNat, UInt64.size_positive],[Inhabited, Fin, UInt64.size]]
[Nat.pow_succ,[rfl],[Eq, HPow.hPow, Nat.succ, HMul.hMul]]
[not_and_of_not_left,[mt, And.left],[Not, And]]
[EIO,[EStateM, IO.RealWorld],[]]
[Nat.mul_eq,[rfl],[Eq, Nat.mul, HMul.hMul]]
[StateT.run_get,[rfl],[Eq, StateT.run, MonadState.get, Pure.pure, Prod.mk]]
[FloatArray.foldlM.loop.proof_1,[Nat.lt_of_lt_of_le],[LT.lt, FloatArray.size]]
[List.isInfix,[Exists, Eq, HAppend.hAppend],[]]
[Iff.elim_left,[Iff.elim_left.proof_1],[]]
[ReaderT.instLawfulMonadReaderT,[ReaderT.instLawfulMonadReaderT.proof_1],[LawfulMonad, ReaderT]]
[«term_$__»,[Lean.ParserDescr.trailingNode, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.unary, Lean.ParserDescr.symbol, Lean.ParserDescr.const, Lean.ParserDescr.cat],[Lean.TrailingParserDescr]]
[Fin.shiftLeft.proof_1,[LT.lt, HMod.hMod, Nat.mod_lt],[LT.lt, HMod.hMod, HShiftLeft.hShiftLeft]]
[Nat.zero_le,[Unit.unit, LE.le, OfNat.ofNat, Nat.le.refl, Nat.le.step, PProd.fst],[LE.le, OfNat.ofNat]]
[instComplementUInt32,[Complement.mk, UInt32.complement],[Complement, UInt32]]
[Task.Priority.default,[OfNat.ofNat],[Task.Priority]]
[Nat.log2,[WellFounded.fix, Nat.log2.proof_1, dite, GE.ge, OfNat.ofNat, HAdd.hAdd, HDiv.hDiv, Eq.refl, Nat.zero, HEq.refl, absurd, of_decide_eq_false, Decidable.decide, Nat.succ, LT.lt, of_decide_eq_true, Bool.true, Eq.mpr, Nat.div_eq, ite, And, LE.le, HSub.hSub, if_pos, And.intro, Nat.succ_lt_succ, Nat.zero_lt_succ, Nat.lt_trans, PProd.fst, PProd.snd, Nat.lt_succ_self],[Nat]]
[hasOfNatOfCoe,[OfNat.mk, coe, OfNat.ofNat],[OfNat]]
[UInt32.instSemiringUInt32.proof_7,[of_eq_true, Eq.trans, forall_congr, congrFun, congrArg, Eq, HMul.hMul, UInt32.one_def, UInt32.mul_def, UInt32.mk, OfNat.ofNat, one_mul, UInt32.val, UInt32.mk_val_eq, eq_self, propext, forall_const, UInt32],[Eq, HMul.hMul, OfNat.ofNat]]
[Subtype.ext_iff_val,[Subtype.ext_iff],[Iff, Eq, Subtype.val]]
[instHAppend,[HAppend.mk, Append.append],[HAppend]]
[List.card_cons_of_not_mem,[Eq.mpr, Eq.refl, Eq, ite, Mem.mem, List.card, HAdd.hAdd, OfNat.ofNat, if_neg, rfl],[Eq, List.card, List.cons, HAdd.hAdd, OfNat.ofNat]]
[List.cons_ne_self,[mt, congr_arg, List.length', Nat.succ_ne_self],[Ne, List.cons]]
[Decidable.iff_iff_and_or_not_and_not,[Iff.intro, Eq.mpr, Eq.refl, Or, And, Not, propext, Decidable.em, Or.inl, And.intro, Eq.symm, Or.inr, Iff, And.right, And.left, False.elim],[Iff, Or, And, Not]]
[String.toAsciiByteArray.loop.proof_1,[Nat.Up.WF, String.utf8ByteSize],[WellFounded, Nat.Up, String.utf8ByteSize]]
[MonadLift.noConfusionType,[],[]]
[Prod.swap_swap_eq,[funext, Prod.swap_swap],[Eq, Function.comp, Prod.swap, id]]
[Decidable.of_not_imp,[Decidable.by_contradiction, not_not_of_not_imp],[]]
[UInt32.mod_def,[rfl],[Eq, HMod.hMod, UInt32.mk, UInt32.val]]
[String.toUpper,[String.map, Char.toUpper],[String]]
[Equiv.instCoeFunEquivArrow,[CoeFun.mk, Equiv.toFun],[CoeFun, Equiv]]
[decidableOfDecidableOfIff.proof_1,[absurd, Iff.mpr],[False]]
[Or.resolve_right,[Or.elim, id, absurd],[]]
[CoeFun.noConfusionType,[],[]]
[Except.mapError,[Except, Except.error, Except.ok],[Except]]
[List.forIn_nil,[rfl],[Eq, ForIn.forIn, List.nil, Pure.pure]]
[ltOfOrd,[LT.mk, Eq, BEq.beq, Ord.compare, Ordering.lt, Bool.true],[LT]]
[Xor.noConfusionType,[],[]]
[Array.findSome!,[Unit.unit, Array.findSome?, panicWithPosWithDecl, OfNat.ofNat],[]]
[Prod.forall',[Prod.forall],[Iff, Prod.fst, Prod.snd]]
[List.ne_nil_of_length_pos,[Nat.lt_irrefl, OfNat.ofNat, Eq.subst, Iff.mpr, List.length_eq_zero],[Ne, List.nil]]
[StateT.instLawfulMonadStateT,[StateT.instLawfulMonadStateT.proof_1],[LawfulMonad, StateT]]
[ExceptT.mk,[],[ExceptT]]
[GroupWithZero.inv_zero,[],[Eq, Inv.inv, OfNat.ofNat]]
[instIsAddRightCancel,[IsAddRightCancel.mk, instIsAddRightCancel.proof_1],[IsAddRightCancel]]
[termℕ,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.symbol],[Lean.ParserDescr]]
[map_congr,[of_eq_true, Eq.trans, congrFun, congrArg, Eq, Functor.map, funext, eq_self],[Eq, Functor.map]]
[Int.decLt,[Decidable, Int.NonNeg, Decidable.isTrue, Int.NonNeg.mk, Decidable.isFalse, Eq.refl, Int.negSucc, HEq.refl, False, HSub.hSub, HAdd.hAdd, OfNat.ofNat],[Decidable, LT.lt]]
[mt,[],[Not]]
[String.foldr,[String.foldrAux, String.bsize, OfNat.ofNat],[]]
[Mathlib.Tactic.Lint.Linter.mk.inj,[And.intro],[And, Eq]]
[List.erase_nil,[rfl],[Eq, List.erase, List.nil]]
[List.exists_mem_cons_of,[Exists.intro, And.intro, List.mem_cons_self],[Exists, And, Mem.mem, List.cons]]
[String.set,[String, String.mk, List, Char, List.nil, ite, Eq, List.cons, PProd.fst, HAdd.hAdd, String.csize, OfNat.ofNat],[String]]
[instDecidableRelLeLeOfOrd,[inferInstanceAs, DecidableRel, Eq, Ordering.isLE, Ord.compare, Bool.true],[DecidableRel, LE.le]]
[List.disjoint_comm,[Iff.intro, List.disjoint_symm],[Iff, List.disjoint]]
[Nat.mod_lt,[Nat.mod.inductionOn],[LT.lt, HMod.hMod]]
[List.erase_eq_erasep,[rfl, Classical.em, Eq, of_eq_true, Eq.trans, congr, congrArg, List.erase, List.cons, List.erase_cons_head, List.erasep_cons_of_pos, congrFun, eq_self, Eq.symm, List.erase_cons_tail, ne_eq, Not, eq_false, Ne.symm, eq_true_of_decide, Eq.refl, Bool.true, List.erasep_cons_of_neg, List.erasep],[Eq, List.erase, List.erasep]]
[Nat.add_le_add_left,[LE.le, HAdd.hAdd, Nat.le.dest],[LE.le, HAdd.hAdd]]
[List.partition,[List.partitionAux, Prod.mk, List.nil],[Prod, List]]
[instOrOpUSize,[OrOp.mk, USize.lor],[OrOp, USize]]
[HAnd.noConfusionType,[],[]]
[Char.utf16Size,[ite, LE.le, Char.val, OfNat.ofNat],[UInt32]]
[not_true,[iff_false_intro, not_not_intro, trivial],[Iff, Not, True, False]]
[Subtype.noConfusionType,[],[]]
[instReprProd,[Repr.mk, Std.Format, Std.Format.bracket, Std.Format.joinSep, List.reverse, ReprTuple.reprTuple, List.cons, repr, List.nil, HAppend.hAppend, Std.Format.text, Std.Format.line],[Repr, Prod]]
[Sigma.snd,[],[Sigma.fst]]
[Array.toArrayLit.proof_1,[Nat.le_refl, Array.size],[LE.le, Array.size]]
[iff_false,[propext, Iff.intro, Iff.mp, False.elim],[Eq, Iff, False, Not]]
[UInt16.instSemigroupUInt16.proof_1,[congrArg, UInt16.mk, Semigroup.mul_assoc, UInt16.val],[Eq, UInt16.mk]]
[String.anyAux,[String.anyAux.loop],[Bool]]
[«command_ClassAbbrev__:_:=__,»,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.const, Lean.ParserDescr.symbol, Lean.ParserDescr.unary, Lean.ParserDescr.cat],[Lean.ParserDescr]]
[exists_eq_left,[Iff.intro, Exists.intro, And.intro, rfl],[Iff, Exists, And, Eq]]
[ByteArray.instInhabitedByteArray,[Inhabited.mk, ByteArray.empty],[Inhabited, ByteArray]]
[List.exists_mem_cons_iff,[Iff.intro, List.or_exists_of_exists_mem_cons, Or.elim, List.exists_mem_cons_of, List.exists_mem_cons_of_exists],[Iff, Exists, And, Mem.mem, List.cons, Or]]
[Prod.noConfusionType,[],[]]
[pow_one,[Eq.mpr, Eq.refl, Eq, HPow.hPow, OfNat.ofNat, Nat.one_eq_succ_zero, Nat.succ, pow_succ, HMul.hMul, pow_zero, one_mul, rfl],[Eq, HPow.hPow, OfNat.ofNat]]
[Prod.fst_eq_iff,[Iff, Eq, Prod.fst, Prod.mk, Prod.snd, of_eq_true, Eq.trans, congrArg, Prod.mk.injEq, And, eq_self, and_true, iff_self],[Iff, Eq, Prod.fst, Prod.mk, Prod.snd]]
[Mathlib.Tactic.Lint.getChecks,[ite, Eq, Bool.true, Bind.bind, Pure.pure, List.nil, Lean.MonadEnv.getEnv, Lean.TagAttribute.getDecls, Mathlib.Tactic.Lint.mathlibLinterAttr, Mathlib.Tactic.Lint.getLinters, Array.toList],[Lean.Core.CoreM, List, Mathlib.Tactic.Lint.NamedLinter]]
[mul_right_inv,[Eq.mpr, Eq.refl, Eq, HMul.hMul, Inv.inv, OfNat.ofNat, Eq.symm, mul_left_inv, inv_inv, rfl],[Eq, HMul.hMul, Inv.inv, OfNat.ofNat]]
[List.append_eq_appendTR,[funext, rfl, of_eq_true, Eq.trans, congr, congrArg, Eq, List.cons, List.reverseAux_reverseAux, List.nil, eq_self, List.reverseAux],[Eq, List.append, List.appendTR]]
[max,[ite, LT.lt],[]]
[System.SearchPath.toString,[String.intercalate, Char.toString, System.SearchPath.separator, List.map, System.FilePath.toString],[String]]
[Dvd.noConfusionType,[],[]]
[Int.subNatNat_sub,[Eq.mpr, Eq.refl, Eq, Int.subNatNat, HSub.hSub, HAdd.hAdd, Eq.symm, Int.subNatNat_add_add, Nat.sub_add_cancel, rfl],[Eq, Int.subNatNat, HSub.hSub, HAdd.hAdd]]
[List.card_nil,[rfl],[Eq, List.card, List.nil, OfNat.ofNat]]
[Mathlib.Tactic.Lint.NamedLinter.mk.injEq,[Eq.propIntro, And.intro, Eq.refl, Mathlib.Tactic.Lint.NamedLinter.mk, Eq.symm, eq_of_heq, HEq.refl],[Eq, Mathlib.Tactic.Lint.NamedLinter.mk, And]]
[Nat.pred_lt,[LT.lt, Nat.pred, absurd, rfl, Nat.lt_succ_of_le, Nat.le_refl, Nat.succ],[LT.lt, Nat.pred]]
[PSigma.revLexAccessible.proof_1,[Acc.intro, PSigma.mk, Eq.symm, eq_of_heq, Eq.refl, HEq.refl],[Acc, PSigma.RevLex, PSigma.mk]]
[or_not,[em],[Or, Not]]
[instInhabitedExcept,[Inhabited.mk, Except.error, arbitrary],[Inhabited, Except]]
[Nat.instCommSemiringNat.proof_1,[of_eq_true, Eq.trans, congr, congrArg, Eq, Nat.succ_mul, Nat.add_comm, HMul.hMul, eq_self, HAdd.hAdd],[Eq, HMul.hMul, Nat.succ, HAdd.hAdd]]
[Function.surjective.has_right_inverse,[Exists.intro, Function.surj_inv, Function.right_inverse_surj_inv],[Function.has_right_inverse]]
[not_forall,[Decidable.not_forall],[Iff, Not, Exists]]
[String.Iterator.extract,[String, ite, Eq, or, Decidable.decide, Ne, GT.gt, Bool.true, String.extract],[String]]
[Nat.gcd,[WellFounded.fix, Nat.gcd.proof_1, Unit.unit, Nat, HMod.hMod, Nat.succ, Nat.mod_lt, Nat.zero_lt_succ],[Nat]]
[ExceptCpsT.instLawfulMonadExceptCpsT.proof_1,[LawfulMonad.mk, rfl],[LawfulMonad, ExceptCpsT]]
[instAddUInt16,[Add.mk, UInt16.add],[Add, UInt16]]
[String.codepointPosToUtf16Pos,[String.codepointPosToUtf16PosFrom, OfNat.ofNat],[Nat]]
[Prod.map_snd',[funext, Prod.map_snd],[Eq, Function.comp, Prod.snd, Prod.map]]
[STWorld.noConfusionType,[],[]]
[Ord.noConfusionType,[],[]]
[List.exists_of_mem_join,[Iff.mp, List.mem_join],[Exists, And, Mem.mem]]
[UInt64.instAddSemigroupUInt64.proof_1,[congrArg, UInt64.mk, AddSemigroup.add_assoc, UInt64.val],[Eq, UInt64.mk]]
[String.append,[String, String.mk, HAppend.hAppend],[String]]
[Nat.sub_zero,[rfl],[Eq, HSub.hSub, OfNat.ofNat]]
[Array.eraseIdxSzAuxInstance,[Inhabited.mk, Subtype.mk, Array.pop, Array.size_pop],[Inhabited, Subtype, Eq, Array.size, HSub.hSub, OfNat.ofNat]]
[Char.instInhabitedChar,[Inhabited.mk, Char.ofNat],[Inhabited, Char]]
[ToBool.noConfusionType,[],[]]
[List.erasep_append_left,[List.nil, Eq, List.erasep, HAppend.hAppend, Classical.em, of_eq_true, Eq.trans, congr, congrArg, List.cons_append, List.erasep_cons_of_pos, eq_true, congrFun, eq_self, Eq.symm, Eq.mpr, List.erasep_cons_of_neg, Not, eq_false, eq_true_of_decide, Eq.refl, Bool.true, List.cons.injEq, And, true_and, PProd.fst, List.mem_of_ne_of_mem, mt, eq_of_heq, HEq.refl, rfl],[Eq, List.erasep, HAppend.hAppend]]
[Decidable.or_iff_not_imp_left,[Iff.intro, Or.resolve_left, dite, Or.inl, Function.comp, Or.inr],[Iff, Or]]
[EStateM.instInhabitedEStateM,[Inhabited.mk, EStateM.Result.error, arbitrary],[Inhabited, EStateM]]
[Hashable.hash,[],[UInt64]]
[List.insert_equiv_cons,[of_eq_true, Eq.trans, congr, congrArg, Iff, propext, List.mem_insert_iff, List.mem_cons_iff, iff_self, Or, Eq, Mem.mem],[List.equiv, List.insert, List.cons]]
[instInhabitedStdGen,[Inhabited.mk, StdGen.mk, OfNat.ofNat],[Inhabited, StdGen]]
[Nat.instDecidableCoprime,[dite, Eq, Nat.gcd, OfNat.ofNat, Decidable.isTrue, Decidable.isFalse],[Decidable, Nat.coprime]]
[UInt64.instSemiringUInt64.proof_4,[congrArg, UInt64.mk, AddMonoid.nsmul_succ', UInt64.val],[Eq, UInt64.mk, Semiring.nsmul, Nat.succ, UInt64.val]]
[not_congr,[Iff.intro, mt, Iff.mpr, Iff.mp],[Iff, Not]]
[FloatArray.set,[FloatArray, FloatArray.mk, Array.set],[FloatArray]]
[instDecidableLe,[UInt32.decLe],[Decidable, LE.le]]
[Decidable.eq_or_lt_of_le,[Or.symm, Decidable.lt_or_eq_of_le],[Or, Eq, LT.lt]]
[EStateM.run,[],[EStateM.Result]]
[unsafeBaseIO,[EStateM.Result.error, EStateM.run, Unit.unit],[]]
[Int.natAbs_zero,[rfl],[Eq, Int.natAbs, OfNat.ofNat]]
[System.FilePath.fileName,[ite, Eq, or, String.isEmpty, BEq.beq, Bool.true, Option.none, Option.some],[Option, String]]
[Fin.instAddFin,[Add.mk, Fin.add],[Add, Fin]]
[tacticIterate___,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.nonReservedSymbol, Bool.false, Lean.ParserDescr.unary, Lean.ParserDescr.const, Lean.ParserDescr.parser],[Lean.ParserDescr]]
[UInt8.instSemiringUInt8,[Semiring.mk, UInt8.instSemiringUInt8.proof_1, UInt8.instSemiringUInt8.proof_2, UInt8.mk, Semiring.nsmul, UInt8.val, UInt8.instSemiringUInt8.proof_3, UInt8.instSemiringUInt8.proof_4, UInt8.instSemiringUInt8.proof_5, UInt8.instSemiringUInt8.proof_6, UInt8.instSemiringUInt8.proof_7, UInt8.instSemiringUInt8.proof_8, UInt8.instSemiringUInt8.proof_9, UInt8.instSemiringUInt8.proof_10, UInt8.instSemiringUInt8.proof_11, UInt8.instSemiringUInt8.proof_12, UInt8.instSemiringUInt8.proof_13],[Semiring, UInt8]]
[UInt64.size,[OfNat.ofNat],[Nat]]
[PSum.inr.sizeOf_spec,[Eq.refl, HAdd.hAdd, OfNat.ofNat, SizeOf.sizeOf],[Eq, SizeOf.sizeOf, PSum.inr, HAdd.hAdd, OfNat.ofNat]]
[withPtrEqDecEq.proof_2,[ofBoolUsing_eq_true],[Eq]]
[Array.uset,[Array.set, Fin.mk, USize.toNat],[Array]]
[List.length_insert_of_not_mem,[Eq.mpr, Eq.refl, Eq, List.length, List.insert, HAdd.hAdd, OfNat.ofNat, List.insert_of_not_mem, List.cons, Eq.symm, List.length'_eq_length, List.length', rfl],[Eq, List.length, List.insert, HAdd.hAdd, OfNat.ofNat]]
[Fin.modn_lt,[LT.lt, Fin.val, HMod.hMod, Nat.lt_of_le_of_lt, Nat.mod_le, Nat.mod_lt],[LT.lt, Fin.val, HMod.hMod]]
[List.disjoint_iff_ne,[of_eq_true, Eq.trans, congr, congrArg, Iff, propext, List.disjoint_left, forall_congr, implies_congr, Eq.refl, Mem.mem, ne_eq, imp_not_comm, forall_eq', iff_self, Not],[Iff, List.disjoint, Ne]]
[instMonadExceptOfExceptT,[MonadExceptOf.mk, ExceptT.mk, throwThe, tryCatchThe],[MonadExceptOf, ExceptT]]
[Nat.instCommSemiringNat.proof_3,[rfl],[Eq, Numeric.ofNat, HAdd.hAdd, OfNat.ofNat]]
[List.concat_eq_append',[Eq, List.concat, List.append', List.cons, List.nil, Eq.symm, List.append_nil, of_eq_true, Eq.trans, congrFun, congrArg, PProd.fst, eq_self],[Eq, List.concat, List.append', List.cons, List.nil]]
[add_mul,[Semiring.add_mul],[Eq, HMul.hMul, HAdd.hAdd]]
[Tactic.Ring.horner_pow,[of_eq_true, Eq.trans, congr, congrArg, Eq, congrFun, HPow.hPow, add_zero, HMul.hMul, mul_pow, HAdd.hAdd, Eq.symm, pow_mul, OfNat.ofNat, eq_self],[Eq, HPow.hPow, Tactic.Ring.horner, OfNat.ofNat]]
[HMod.hMod,[],[]]
[MonadControl.stM,[],[]]
[Array.modify,[Id.run, Array.modifyM],[Array]]
[List.card_subset_le,[LE.le, List.card, Eq.mpr, congrFun, congrArg, List.card_nil, Nat.zero_le, Decidable.em, Mem.mem, Eq.symm, Eq.refl],[LE.le, List.card]]
[Subtype.restrict_apply,[rfl],[Eq, Subtype.restrict, Subtype.val]]
[Tactic.LibrarySearch.lines,[Lean.MessageData.joinSep, Lean.MessageData.ofFormat, Std.Format.line],[Lean.MessageData]]
[instLTFin,[LT.mk, LT.lt, Fin.val],[LT, Fin]]
[«term_/\_»,[Lean.ParserDescr.trailingNode, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.symbol, Lean.ParserDescr.cat],[Lean.TrailingParserDescr]]
[decide_true_eq_true,[Eq, Decidable.decide, True, Bool.true, rfl, False.elim, True.intro],[Eq, Decidable.decide, True, Bool.true]]
[Nat.foldRev.loop,[PProd.fst],[]]
[instLEFloat,[LE.mk, Float.le],[LE, Float]]
[instMulUInt32,[Mul.mk, UInt32.mul],[Mul, UInt32]]
[List.card_map_le,[of_eq_true, Eq.trans, congr, congrArg, LE.le, List.card, List.map_nil, List.card_nil, eq_true_of_decide, Eq.refl, Bool.true, Decidable.em, Mem.mem, List.map, Eq.mpr, congrFun, List.map_cons, List.card_cons_of_mem, eq_true, List.cons, Nat.le_trans, List.card_le_card_cons, Eq.symm],[LE.le, List.card, List.map]]
[Quot.hrecOn,[Quot.recOn, Quot.hrecOn.proof_1],[]]
[Classical.indefiniteDescription,[Classical.choice, Classical.indefiniteDescription.proof_1],[Subtype]]
[CommSemiring.toSemiring,[],[Semiring]]
[List.toSSet,[List.foldl, Lean.SSet.insert, Lean.SMap.mk],[Lean.SSet]]
[List.mapIdxM,[OfNat.ofNat, List.mapIdxM.loop],[List]]
[Function.injective.ne_iff,[Iff.intro, mt, congr_arg, Function.injective.ne],[Iff, Ne]]
[Array.forRevM,[Array.foldrM, PUnit.unit],[PUnit]]
[false_or,[propext, Iff.intro, False.elim, Or.inr],[Eq, Or, False]]
[Array.shrink,[HSub.hSub, Array.size, Array.shrink.loop],[Array]]
[Or.intro_right,[Or.inr],[Or]]
[UInt16.zero_def,[rfl],[Eq, OfNat.ofNat, UInt16.mk]]
[Mathlib.Tactic.Lint.LintVerbosity.noConfusionType,[noConfusionTypeEnum, Mathlib.Tactic.Lint.LintVerbosity.toCtorIdx],[]]
[Nat.le_div_iff_mul_le,[Nat.mod.inductionOn, Eq.mpr, Eq.refl, Iff, LE.le, HDiv.hDiv, HMul.hMul, Nat.div_eq, congrFun, congrArg, Eq.trans, ite_congr, congr, And, eq_true, eq_true_of_decide, Bool.true, HAdd.hAdd, HSub.hSub, OfNat.ofNat, ite_true, of_eq_true, Nat.zero_eq, Nat.zero_le, Nat.zero_mul, Eq.symm, Nat.succ, Nat.add_one, propext, Nat.add_le_add_iff_le_right, Nat.succ_mul, Nat.add_sub_cancel, Nat.sub_le_sub_right_iff, And.right, Iff.rfl, eq_false, ite_false, Nat.not_succ_le_zero, Nat.add_comm, false_iff, not_le, Nat.lt_of_lt_of_le, Iff.mp, And.intro, Nat.le_add_right],[Iff, LE.le, HDiv.hDiv, HMul.hMul]]
[Nat.coprime.coprime_dvd_right,[Nat.coprime.symm, Nat.coprime.coprime_dvd_left],[Nat.coprime]]
[tacticAssumption',[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.nonReservedSymbol, Bool.false],[Lean.ParserDescr]]
[Union.union,[],[]]
[Array.toArrayLit_eq,[sorryAx, Eq, Array.toArrayLit, Bool.false],[Eq, Array.toArrayLit]]
[instInhabitedFloat,[Inhabited.mk, Float.mk, FloatSpec.val, floatSpec],[Inhabited, Float]]
[ExceptCpsT.instLawfulMonadExceptCpsT,[ExceptCpsT.instLawfulMonadExceptCpsT.proof_1],[LawfulMonad, ExceptCpsT]]
[ByteArray.mk.injEq,[Eq.propIntro, Eq.refl, ByteArray.mk, Eq.symm, eq_of_heq, HEq.refl],[Eq, ByteArray.mk]]
[IsMulRightCancel.mul_right_cancel,[],[Eq]]
[Int.decEq.proof_3,[rfl],[Eq, Int.negSucc]]
[not_of_not_imp,[mt, imp_intro],[Not]]
[instOne,[One.mk, OfNat.ofNat],[One]]
[ReaderT.instAlternativeReaderT,[Alternative.mk, ReaderT.failure, ReaderT.orElse],[Alternative, ReaderT]]
[Div.noConfusionType,[],[]]
[forall₃_congr,[forall_congr', forall₂_congr],[Iff]]
[Option.isEqSome,[Bool, BEq.beq, Bool.false],[Bool]]
[«stx_,*,?»,[Lean.ParserDescr.trailingNode, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.symbol],[Lean.TrailingParserDescr]]
[Or.left_comm,[Iff.trans, Iff.symm, Or.assoc, or_congr, Or.comm, Iff.refl],[Iff, Or]]
[Quotient.lift₂.proof_1,[Setoid.refl],[Eq]]
[List.instSetoidList,[Setoid.mk, List.Perm, List.Perm.Equivalence],[Setoid, List]]
[left_distributive,[Eq],[]]
[Alternative.toApplicative,[],[Applicative]]
[and_not_self,[False],[Not, And]]
[exists_unique_of_exists_of_unique,[Exists.elim, ExistsUnique.intro],[ExistsUnique]]
[Float.val,[],[FloatSpec.float, floatSpec]]
[Fin.subUnderflows?,[Decidable.decide, LT.lt, Fin.val],[Bool]]
[measure,[invImage, Nat.lt_wfRel],[WellFoundedRelation]]
[UInt8.noConfusionType,[],[]]
[left_commutative,[Eq],[]]
[Equiv.rightInv,[],[Function.right_inverse, Equiv.invFun, Equiv.toFun]]
[Mathlib.Tactic.Ext.mkIff,[Lean.mkApp2, Lean.mkConst, Lean.Name.mkStr, Lean.Name.anonymous, List.nil],[Lean.Expr]]
[UInt16.instAddSemigroupUInt16,[AddSemigroup.mk, UInt16.instAddSemigroupUInt16.proof_1],[AddSemigroup, UInt16]]
[SubNegMonoid.gsmul_neg',[],[Eq, SubNegMonoid.gsmul, Int.negSucc, Neg.neg, coe, Nat.succ]]
[List.count,[List.countp, Eq],[Nat]]
[Array.getOp,[Array.get!],[]]
[UInt64.instRingUInt64.proof_5,[UInt64.eq_of_val_eq, of_eq_true, Eq.trans, congr, congrArg, Eq, UInt64.val, congrFun, HAdd.hAdd, UInt64.neg_def, UInt64.add_def, UInt64.mk, Neg.neg, add_left_neg, UInt64.zero_def, eq_true_of_decide, Eq.refl, Bool.true],[Eq, HAdd.hAdd, Neg.neg, OfNat.ofNat]]
[guardExprStrict,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.nonReservedSymbol, Bool.false, Lean.ParserDescr.cat, Lean.ParserDescr.symbol],[Lean.ParserDescr]]
[Nat.coprime_div_gcd_div_gcd,[Eq.mpr, Eq.refl, Nat.coprime, HDiv.hDiv, Nat.gcd, propext, Nat.coprime_iff_gcd_eq_one, Eq, OfNat.ofNat, Nat.gcd_div, Nat.gcd_dvd_left, Nat.gcd_dvd_right, Nat.div_self, rfl],[Nat.coprime, HDiv.hDiv, Nat.gcd]]
[Nat.gcd_mul_left,[Nat.gcd.induction, of_eq_true, Eq.trans, congr, congrArg, Eq, congrFun, Nat.gcd, Nat.mul_zero, HMul.hMul, Nat.gcd_zero_left, eq_self, Eq.mp, Eq.refl, HMod.hMod, Eq.symm, Nat.gcd_rec, Nat.mul_mod_mul_left],[Eq, Nat.gcd, HMul.hMul]]
[And.congr_left_iff,[Eq.mpr, congrArg, Iff, And, Eq.trans, Eq.symm, propext, And.congr_right_iff, congr, and_comm, Iff.rfl],[Iff, And]]
[List.mem_filterAux,[Iff, Mem.mem, List.filterAux, Or, And, Eq, Bool.true, of_eq_true, Eq.trans, congr, congrArg, propext, List.mem_reverse, congrFun, List.mem_nil_iff, false_and, false_or, iff_self, Eq.mpr, Unit.unit, List, List.cons, List.mem_cons_iff, PProd.fst, Iff.intro, Or.inl, And.intro, Or.inr, And.left, And.right, Eq.symm, Eq.refl, Eq.mp, Bool.false],[Iff, Mem.mem, List.filterAux, Or, And, Eq, Bool.true]]
[Decidable.not_or_of_imp,[dite, Or.inr, Or.inl],[Or, Not]]
[Function.Equiv.refl,[rfl],[Function.Equiv]]
[Subtype.map_comp,[rfl],[Eq, Subtype.map, Function.comp]]
[min_le_right,[dite, LE.le, Eq.mpr, congrFun, congrArg, if_pos, of_eq_true, Eq.trans, if_neg, eq_true, le_refl],[LE.le, min]]
[«term_-_»,[Lean.ParserDescr.trailingNode, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.symbol, Lean.ParserDescr.cat],[Lean.TrailingParserDescr]]
[Function.hfunext,[],[HEq]]
[instAndOpUSize,[AndOp.mk, USize.land],[AndOp, USize]]
[Function.surjective.prod_map,[Exists, Eq, Prod.map, Exists.intro, Prod.mk, Prod.ext'],[Function.surjective, Prod.map]]
[System.mkFilePath,[System.FilePath.mk, String.intercalate, Char.toString, System.FilePath.pathSeparator],[System.FilePath]]
[Array.anyMUnsafe,[ite, LT.lt, LE.le, Array.size, USize.ofNat, Pure.pure, Bool.false, Array.anyMUnsafe.any],[Bool]]
[max_assoc,[eq_max, le_trans, le_max_left, max, max_le, le_max_right],[Eq, max]]
[Subtype.mk_eq_mk,[Subtype.ext_iff],[Iff, Eq, Subtype.mk]]
[EStateM.dummySave,[PUnit.unit],[PUnit]]
[instInhabitedSort,[Inhabited.mk, PUnit],[Inhabited]]
[Decidable.by_cases,[Decidable.byCases],[]]
[instOfNatUInt32,[OfNat.mk, UInt32.ofNat],[OfNat, UInt32]]
[Nat.toSuperscriptString,[List.asString, Nat.toSuperDigits],[String]]
[Equiv.trans.proof_2,[Function.right_inverse.comp, Equiv.rightInv],[Function.right_inverse, Function.comp, Equiv.invFun, Equiv.toFun]]
[Function.combine,[],[]]
[Nat.div_eq,[congrFun, WellFounded.fix_eq, WellFoundedRelation.wf, measure, id, dite, And, LT.lt, OfNat.ofNat, LE.le, HAdd.hAdd, HSub.hSub, Nat.sub_lt, Nat.lt_of_lt_of_le, Nat.zero, dif_eq_if, HDiv.hDiv],[Eq, HDiv.hDiv, ite, And, LT.lt, OfNat.ofNat, LE.le, HAdd.hAdd, HSub.hSub]]
[StateRefT'.instAlternativeStateRefT',[inferInstanceAs, Alternative, ReaderT, ST.Ref],[Alternative, StateRefT']]
[Subarray.start,[],[Nat]]
[ne_false_of_eq_true,[Not, Eq, Bool.false],[Not, Eq, Bool.false]]
[instLTUInt8,[LT.mk, UInt8.lt],[LT, UInt8]]
[Mathlib.Tactic.Lint.SimpLemmaInfo.mk.sizeOf_spec,[Eq.refl, HAdd.hAdd, OfNat.ofNat, SizeOf.sizeOf],[Eq, SizeOf.sizeOf, Mathlib.Tactic.Lint.SimpLemmaInfo.mk, HAdd.hAdd, OfNat.ofNat]]
[Mathlib.ExtendedBinder.«binderTerm≤_»,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.symbol, Lean.ParserDescr.cat],[Lean.ParserDescr]]
[ExceptT.pure,[ExceptT.mk, Pure.pure, Except.ok],[ExceptT]]
[Int.ofNat.sizeOf_spec,[Eq.refl, HAdd.hAdd, OfNat.ofNat, SizeOf.sizeOf],[Eq, SizeOf.sizeOf, Int.ofNat, HAdd.hAdd, OfNat.ofNat]]
[Function.injective.has_left_inverse,[Exists.intro, Function.inv_fun, Function.left_inverse_inv_fun],[Function.has_left_inverse]]
[instHashableBool,[Hashable.mk, Unit.unit, UInt64, OfNat.ofNat],[Hashable, Bool]]
[List.append_assoc,[rfl, of_eq_true, Eq.trans, congr, congrArg, Eq, congrFun, HAppend.hAppend, List.cons_append, List.cons, eq_self],[Eq, HAppend.hAppend]]
[Squash.ind,[Quot.ind],[]]
[Int.neg_ofNat_of_succ,[rfl],[Eq, Neg.neg, Int.ofNat, Nat.succ, Int.negSucc]]
[funext,[],[Eq]]
[List.hasDecEq.proof_6,[absurd],[False]]
[«term_<||>_»,[Lean.ParserDescr.trailingNode, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.symbol, Lean.ParserDescr.cat],[Lean.TrailingParserDescr]]
[USize.neg_def,[rfl],[Eq, Neg.neg, USize.mk, USize.val]]
[em,[Classical.em],[Or, Not]]
[eq_iff_iff,[Iff.symm, iff_iff_eq],[Iff, Eq]]
[Nat.not_le_of_lt,[Nat.not_le_of_gt],[Not, LE.le]]
[Float.lt,[FloatSpec.lt, floatSpec],[]]
[Int.le,[Int.NonNeg, HSub.hSub],[]]
[Eq.mpr_prop,[Eq.symm],[]]
[termSudoSet_option___In_,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.symbol, Lean.ParserDescr.const, Lean.ParserDescr.cat],[Lean.ParserDescr]]
[Nat.not_lt_zero,[Nat.not_succ_le_zero],[Not, LT.lt, OfNat.ofNat]]
[Ordering.noConfusionType,[noConfusionTypeEnum, Ordering.toCtorIdx],[]]
[Nat.ne_of_beq_eq_false,[False],[Not, Eq]]
[Char.instLEChar,[LE.mk, Char.le],[LE, Char]]
[Substring.next,[String.Pos, ite, Eq, HSub.hSub, String.next],[String.Pos]]
[«term∃_,_»,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.symbol, Lean.explicitBinders, Lean.ParserDescr.cat],[Lean.ParserDescr]]
[Function.involutive.surjective,[Exists.intro],[Function.surjective]]
[orM,[Bind.bind, Unit.unit, ToBool.toBool, Pure.pure],[]]
[List.mem_erasep_of_neg,[Iff.intro, List.mem_of_mem_erasep, Or.elim, List.exists_or_eq_self_of_erasep, Eq.mpr, Eq.refl, Mem.mem, List.erasep],[Iff, Mem.mem, List.erasep]]
[Substring.extract,[Substring, ite, GE.ge, Substring.mk, OfNat.ofNat, Nat.min, HAdd.hAdd],[Substring]]
[Mathlib.ExtendedBinder.extBinders,[Lean.ParserDescr.nodeWithAntiquot, Lean.Name.mkStr, Lean.Name.anonymous, Lean.ParserDescr.binary, Mathlib.ExtendedBinder.extBinder, Mathlib.ExtendedBinder.extBinderCollection],[Lean.ParserDescr]]
[le_total,[LinearOrder.le_total],[Or, LE.le]]
[instReprStdGen,[Repr.mk, Std.Format, Std.Format.bracket, HAppend.hAppend, repr, Std.Format.text],[Repr, StdGen]]
[String.modify,[String.set, String.get],[String]]
[instDivUInt8,[Div.mk, UInt8.div],[Div, UInt8]]
[Subtype.coe_eq_iff,[Iff.intro, Exists.intro, Subtype.property, Eq.symm, Subtype.coe_eta, Eq, Subtype.val, rfl],[Iff, Eq, Subtype.val, Exists, Subtype.mk]]
[Array.appendList,[List.foldl, Array.push],[Array]]
[instSemiringFin.proof_11,[rfl],[Eq, OfNat.ofNat]]
[StateT.instLawfulMonadStateT.proof_1,[LawfulMonad.mk, StateT.ext, Eq.mpr, congr, congrArg, Eq, Eq.trans, StateT.run_bind, Pure.pure, Bind.bind, StateT.run, funext, StateT.run_pure, Prod.fst, Prod.snd, StateT.run_map, LawfulMonad.bind_pure_comp, Prod.mk, rfl, of_eq_true, congrFun, LawfulMonad.pure_bind, eq_self, LawfulMonad.bind_assoc],[LawfulMonad, StateT]]
[Int.zero_ne_one,[sorryAx, False, Bool.true],[Ne, OfNat.ofNat]]
[Function.inv_fun_on_neg,[],[Eq, Function.inv_fun_on, Classical.choice]]
[«term_⊆_»,[Lean.ParserDescr.trailingNode, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.symbol, Lean.ParserDescr.cat],[Lean.TrailingParserDescr]]
[imp_congr,[imp_congr_ctx],[Iff]]
[Nat.div_eq_sub_div,[Eq.mpr, Eq.refl, Eq, HDiv.hDiv, HAdd.hAdd, HSub.hSub, OfNat.ofNat, Nat.div_eq, ite, And, LT.lt, LE.le, if_pos, And.intro, rfl],[Eq, HDiv.hDiv, HAdd.hAdd, HSub.hSub, OfNat.ofNat]]
[coeTrans,[CoeTC.mk, coeB, coeTC],[CoeTC]]
[instMonadST,[inferInstanceAs, Monad, EST, Empty],[Monad, ST]]
[ExceptT.bindCont,[Except, Pure.pure, Except.error],[Except]]
[instInhabitedTask,[Inhabited.mk, Task.pure, arbitrary],[Inhabited, Task]]
[Nat.not_lt,[Iff.intro, Nat.le_of_not_lt, Nat.not_lt_of_le],[Iff, Not, LT.lt, LE.le]]
[Stream.forIn,[Stream.forIn.visit],[]]
[List.reverseAux,[List, PProd.fst, List.cons],[List]]
[String.Iterator.prev,[String.Iterator, String.Iterator.mk, String.prev],[String.Iterator]]
[Function.uncurry_def,[rfl],[Eq, Function.uncurry, Prod.fst, Prod.snd]]
[not_lt_of_gt,[lt_asymm],[Not, LT.lt]]
[instDecidableEqUInt8,[UInt8.decEq],[DecidableEq, UInt8]]
[Subtype.map.proof_1,[Subtype.val, Subtype.prop],[Subtype.val]]
[plift.up.injEq,[Eq.propIntro, Eq.refl, plift.up, Eq.symm, eq_of_heq, HEq.refl],[Eq, plift.up]]
[Task.spawn,[Task.pure, Unit.unit],[Task]]
[Nat.add_div_right,[Eq.mpr, Eq.refl, Eq, HDiv.hDiv, HAdd.hAdd, Nat.succ, Nat.div_eq_sub_div, Nat.le_add_left, HSub.hSub, OfNat.ofNat, Nat.add_sub_cancel, rfl],[Eq, HDiv.hDiv, HAdd.hAdd, Nat.succ]]
[Int.natAbs_one,[rfl],[Eq, Int.natAbs, OfNat.ofNat]]
[Nat.succ_lt_succ,[Nat.succ_le_succ],[LT.lt, Nat.succ]]
[lt_asymm,[lt_irrefl, lt_trans],[Not, LT.lt]]
[Int.neg_add,[],[Eq, Neg.neg, HAdd.hAdd]]
[UInt16.instNegUInt16,[Neg.mk, UInt16.mk, Neg.neg, UInt16.val],[Neg, UInt16]]
[Semiring.npow_succ',[],[Eq, Semiring.npow, Nat.succ, HMul.hMul]]
[Function.on_fun,[],[]]
[instOrElseEIO,[OrElse.mk, MonadExcept.orElse],[OrElse, EIO]]
[Set.«term⋃₀_»,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.symbol, Lean.ParserDescr.cat],[Lean.ParserDescr]]
[dite,[],[]]
[String.take,[Substring.toString, Substring.take, String.toSubstring],[String]]
[instShiftLeftUInt32,[ShiftLeft.mk, UInt32.shiftLeft],[ShiftLeft, UInt32]]
[List.not_exists_mem_nil,[False, Eq.refl],[Not, Exists, And, Mem.mem, List.nil]]
[USize.instRingUSize.proof_2,[congrArg, USize.mk, Ring.gsmul_zero', USize.val],[Eq, USize.mk, Ring.gsmul, OfNat.ofNat, USize.val]]
[by_contradiction,[Decidable.by_contradiction],[]]
[Mathlib.Tactic.Lint.getLinters,[List.mapM, Mathlib.Tactic.Lint.getLinter],[Lean.Core.CoreM, List, Mathlib.Tactic.Lint.NamedLinter]]
[exists_imp_exists,[Exists.elim, Exists.intro],[Exists]]
[List.cons_bind,[of_eq_true, eq_self, HAppend.hAppend, List.join, List.map],[Eq, List.bind, List.cons, HAppend.hAppend]]
[Nat.find_x,[WellFounded.fix', WellFounded.intro, Acc, And, Eq, HAdd.hAdd, OfNat.ofNat, Not, dite, Subtype.mk, Nat.find_x.proof_1, Nat.find_x.proof_3],[Subtype, And, Not]]
[peirce,[Decidable.peirce],[]]
[instToStringSum,[ToString.mk, String, HAppend.hAppend, addParenHeuristic, ToString.toString],[ToString, Sum]]
[instMonoidWithZero,[MonoidWithZero.mk, Semiring.zero_mul, Semiring.mul_zero],[MonoidWithZero]]
[UInt16.div,[UInt16.mk, HDiv.hDiv, UInt16.val],[UInt16]]
[Not.elim,[absurd],[]]
[instInhabited,[Inhabited.mk, Pure.pure, arbitrary],[Inhabited]]
[DecidablePred,[Decidable],[]]
[List.cons_subset,[Eq.mpr, congr, congrArg, Iff, Eq.trans, propext, List.subset_def, forall_congr, implies_congr, List.mem_cons_iff, Eq.refl, Mem.mem, or_imp_distrib, forall_and_distrib, congrFun, And, forall_eq, Iff.rfl],[Iff, Subset.subset, List.cons, And, Mem.mem]]
[List.repeat_succ,[rfl],[Eq, List.repeat, HAdd.hAdd, OfNat.ofNat, List.cons]]
[Mathlib.Tactic.Lint.Linter.test,[],[Lean.Meta.MetaM, Option, Lean.MessageData]]
[instMonadLiftT,[MonadLiftT.mk, MonadLift.monadLift, MonadLiftT.monadLift],[MonadLiftT]]
[ofBoolUsing_eq_true,[of_decide_eq_true],[]]
[seq_eq_bind,[Eq.mpr, Eq.refl, Eq, Seq.seq, Bind.bind, Functor.map, LawfulMonad.bind_map, rfl],[Eq, Seq.seq, Bind.bind, Functor.map]]
[ST.Ref.modify,[liftM, ST.Prim.Ref.modify],[Unit]]
[ptrAddrUnsafe,[OfNat.ofNat],[USize]]
[List.dropLast,[Unit.unit, List.cons, List, List.nil, PProd.fst],[List]]
[exists_eq_left',[of_eq_true, Eq.trans, congrFun, congrArg, Iff, Exists, funext, And, propext, eq_comm, exists_eq_left, iff_self],[Iff, Exists, And, Eq]]
[Nat.pos_iff_ne_zero,[Iff.intro, absurd, of_decide_eq_false, Eq.refl, Decidable.decide, LT.lt, OfNat.ofNat, Nat.zero, Eq.symm, Nat.succ_ne_zero, Nat.pos_of_ne_zero],[Iff, LT.lt, OfNat.ofNat, Ne]]
[instDecidableAnd,[Decidable, And, Decidable.isTrue, And.intro, Decidable.isFalse, instDecidableAnd.proof_1, instDecidableAnd.proof_2],[Decidable, And]]
[termS!_,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.symbol, Lean.ParserDescr.unary, Lean.ParserDescr.cat],[Lean.ParserDescr]]
[exists_imp_exists',[Exists.elim, Exists.intro],[Exists]]
[Monoid.noConfusionType,[],[]]
[instReprChar,[Repr.mk, Std.Format.text, Char.quote],[Repr, Char]]
[Monoid.mul_one,[],[Eq, HMul.hMul, OfNat.ofNat]]
[UInt32.sub_def,[rfl],[Eq, HSub.hSub, UInt32.mk, UInt32.val]]
[String.bsize,[String.utf8ByteSize],[Nat]]
[Preorder.toLT,[],[LT]]
[Acc.brecOn,[Acc.below.intro],[]]
[Mathlib.Tactic.Lint.shouldBeLinted,[Bind.bind, Lean.MonadEnv.getEnv, Pure.pure, Lean.ParametricAttribute.getParam, Mathlib.Tactic.Lint.nolintAttr, not, Array.contains, Option.getD, EmptyCollection.emptyCollection],[Bool]]
[DecidableRel,[Decidable],[]]
[Nat.pred_zero,[rfl],[Eq, Nat.pred, OfNat.ofNat]]
[Nat.gcd_add_mul_self,[of_eq_true, Eq.trans, congr, congrArg, Eq, Nat.gcd_rec, HAdd.hAdd, HMul.hMul, congrFun, Nat.gcd, Nat.add_mul_mod_self_right, eq_self, HMod.hMod],[Eq, Nat.gcd, HAdd.hAdd, HMul.hMul]]
[instOfNatUInt8,[OfNat.mk, UInt8.ofNat],[OfNat, UInt8]]
[instAppendSubarray,[Append.mk, Array.toSubarray, OfNat.ofNat, Array.size],[Append, Subarray]]
[List.Perm.Equivalence,[Equivalence.mk, List.Perm.refl, List.Perm.symm, List.Perm.trans],[Equivalence, List.Perm]]
[Nat.coprime_mul_iff_right,[Eq.mpr, Eq.refl, Iff, Nat.coprime, HMul.hMul, And, propext, Nat.coprime_comm, Nat.coprime_mul_iff_left, Iff.rfl],[Iff, Nat.coprime, HMul.hMul, And]]
[List.mapTR,[List.mapTRAux, List.nil],[List]]
[USize.instRingUSize.proof_4,[congrArg, USize.mk, SubNegMonoid.gsmul_neg', USize.val],[Eq, USize.mk, Ring.gsmul, Int.negSucc, USize.val]]
[Not.imp_symm,[Not.decidable_imp_symm],[]]
[EStateM.Backtrackable.restore,[],[]]
[List.erase_append_right,[Eq.mpr, Eq.refl, Eq, List.erase, HAppend.hAppend, List.erase_eq_erasep, List.erasep, List.erasep_append_right, Eq.mp, Not, Mem.mem, rfl],[Eq, List.erase, HAppend.hAppend]]
[List.filterAuxM,[List, Pure.pure, Bind.bind, PProd.fst, cond, List.cons],[List]]
[Array.sequenceMap,[Array.size, OfNat.ofNat, Array.empty, Array.sequenceMap.loop],[Array]]
[instToStringUnit,[ToString.mk],[ToString, Unit]]
[UInt64.add,[UInt64.mk, HAdd.hAdd, UInt64.val],[UInt64]]
[Prod.swap,[Prod.mk, Prod.snd, Prod.fst],[Prod]]
[eqRec_heq,[Eq.symm, eq_of_heq, Eq.refl, HEq.refl, HEq],[HEq]]
[true_iff,[propext, Iff.intro, Iff.mp, trivial],[Eq, Iff, True]]
[ShiftLeft.shiftLeft,[],[]]
[List.get!,[Nat.zero, List.nil, Nat.succ, PProd.fst, panicWithPosWithDecl, OfNat.ofNat],[]]
[Fin.noConfusionType,[],[]]
[Decidable.imp_or_distrib',[Decidable.em, of_eq_true, Eq.trans, congr, congrArg, Iff, implies_congr, Eq.refl, congrFun, Or, eq_true, true_or, implies_true, eq_true_of_decide, Bool.true, Eq.symm, Eq.mpr, eq_false, False, false_or, Iff.symm, or_iff_right_of_imp, False.elim],[Iff, Or]]
[Array.split,[Array.foldl, Prod, Array, ite, Eq, Bool.true, Prod.mk, Array.push, List.toArray, List.nil, OfNat.ofNat, Array.size],[Prod, Array]]
[Tactic.instInhabitedCache,[inferInstanceAs, Inhabited, IO.Ref, Sum, Lean.Meta.MetaM, Task, Except, Lean.Exception],[Inhabited, Tactic.Cache]]
[List.bind_map,[Unit.unit, Eq, List.map, List.bind, rfl, of_eq_true, Eq.trans, congr, congrArg, List.cons_bind, List.map_append, HAppend.hAppend, PProd.fst, eq_self],[Eq, List.map, List.bind]]
[Nat.lcm_ne_zero,[],[Ne, Nat.lcm, OfNat.ofNat]]
[le_of_not_lt,[LE.le, lt_trichotomy, le_of_lt, le_refl, absurd],[LE.le]]
[fixCore3,[bfix3, USize.size],[]]
[max_eq_left,[Eq.symm, eq_max, le_refl],[Eq, max]]
[ofNat_add,[Eq, Numeric.ofNat, HAdd.hAdd, Eq.symm, add_zero, OfNat.ofNat, Trans.trans, Semiring.ofNat_succ, Nat.add, of_eq_true, Eq.trans, congr, congrArg, congrFun, Nat.add_eq, Nat.add_zero, PProd.fst, add_assoc, eq_self],[Eq, Numeric.ofNat, HAdd.hAdd]]
[Substring.dropRight,[Substring.mk, Substring, HAdd.hAdd, Substring.prevn, Substring.bsize],[Substring]]
[ne_of_gt,[absurd, lt_irrefl],[Ne]]
[lt_of_le_of_lt,[LT.lt, lt_of_le_not_le, le_trans],[LT.lt]]
[UInt16.instAddSemigroupUInt16.proof_1,[congrArg, UInt16.mk, AddSemigroup.add_assoc, UInt16.val],[Eq, UInt16.mk]]
[Nat.sub.right_comm,[Eq.mpr, Eq.refl, Eq, HSub.hSub, Nat.sub_sub, HAdd.hAdd, Nat.add_comm, rfl],[Eq, HSub.hSub]]
[Nat.lt_iff_le_not_le,[Iff.intro, And.intro, Nat.le_of_lt, Nat.not_le_of_gt, Nat.gt_of_not_le, And.right],[Iff, LT.lt, And, LE.le, Not]]
[instReprUInt8,[Repr.mk, repr, UInt8.toNat],[Repr, UInt8]]
[Except.ok.inj,[],[Eq]]
[eq_false',[propext, Iff.intro, absurd, False.elim],[Eq, False]]
[instAddCommGroup.proof_5,[AddCommSemigroup.add_comm],[Eq, HAdd.hAdd]]
[eq_true,[propext, Iff.intro, trivial],[Eq, True]]
[Substring.contains,[Substring.any, BEq.beq],[Bool]]
[System.instReprFilePath,[Repr.mk, Repr.addAppParen, HAppend.hAppend, Std.Format.text, repr, System.FilePath.toString],[Repr, System.FilePath]]
[Mathlib.Tactic.Lint.instDecidableEqLintVerbosity.proof_1,[],[Eq]]
[ByteSlice.arr,[],[ByteArray]]
[Nat.pos_of_dvd_of_pos,[Nat.pos_of_ne_zero, Nat.lt_irrefl, OfNat.ofNat, Eq.mp, Eq.refl, LT.lt, Nat.eq_zero_of_zero_dvd, Dvd.dvd],[LT.lt, OfNat.ofNat]]
[instToStreamStringSubstring,[ToStream.mk, String.toSubstring],[ToStream, String, Substring]]
[proof_irrel,[proofIrrel],[Eq]]
[Nat.div.inductionOn,[WellFounded.fix, WellFoundedRelation.wf, measure, id, dite, And, LT.lt, OfNat.ofNat, LE.le, HSub.hSub, Nat.sub_lt, Nat.lt_of_lt_of_le],[]]
[List.elem,[Unit.unit, Bool, Bool.false, BEq.beq, Bool.true, PProd.fst],[Bool]]
[Mathlib.Tactic.Lint.NamedLinter.mk.sizeOf_spec,[Eq.refl, HAdd.hAdd, OfNat.ofNat, SizeOf.sizeOf],[Eq, SizeOf.sizeOf, Mathlib.Tactic.Lint.NamedLinter.mk, HAdd.hAdd, OfNat.ofNat]]
[WellFounded.fixFEq,[WellFounded.fixFEq.proof_1],[Eq, WellFounded.fixF, Acc.inv]]
[Array.anyM.loop,[dite, LT.lt, Unit.unit, Bool, Pure.pure, Bool.false, Bind.bind, Array.get, Fin.mk, Array.anyM.loop.proof_1, ite, Eq, Bool.true, PProd.fst, HAdd.hAdd, OfNat.ofNat],[Bool]]
[Nat.instShiftLeftNat,[ShiftLeft.mk, Nat.shiftLeft],[ShiftLeft, Nat]]
[Function.right_inverse.comp,[Function.left_inverse.comp],[Function.right_inverse, Function.comp]]
[List.any,[List.foldr, or, Bool.false],[Bool]]
[List.ball_cons,[Iff.intro, And.intro, List.mem_cons_self, List.mem_cons_of_mem, Or.elim, Eq.mpr, Eq.refl],[Iff, And]]
[List.subset_of_cons_subset,[List.mem_cons_of_mem],[Subset.subset]]
[UInt32.instAddSemigroupUInt32.proof_1,[congrArg, UInt32.mk, AddSemigroup.add_assoc, UInt32.val],[Eq, UInt32.mk]]
[Mathlib.Tactic.Lint.LintVerbosity.medium.sizeOf_spec,[Eq.refl, OfNat.ofNat],[Eq, SizeOf.sizeOf, Mathlib.Tactic.Lint.LintVerbosity.medium, OfNat.ofNat]]
[ite_congr,[Decidable.em, Eq.mpr, Eq.refl, Eq, ite, if_pos, Eq.symm, if_neg],[Eq, ite]]
[prod_map,[rfl, Eq.symm, Eq.refl],[Eq, Prod.map, Prod.mk, Prod.fst, Prod.snd]]
[Nat.le_of_succ_le,[Nat.le_trans, Nat.le_succ],[LE.le]]
[List.decidablePairwise.proof_2,[],[False]]
[Array.foldlM,[dite, LE.le, Array.size, Array.foldlM.proof_1],[]]
[«term_×'_»,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.bracketedExplicitBinders, Lean.ParserDescr.symbol, Lean.ParserDescr.cat],[Lean.ParserDescr]]
[Nat.add_sub_cancel',[Eq.mpr, Eq.refl, Eq, HAdd.hAdd, HSub.hSub, Nat.add_comm, Nat.sub_add_cancel, rfl],[Eq, HAdd.hAdd, HSub.hSub]]
[EIO.asTask,[BaseIO.asTask, EIO.toBaseIO],[BaseIO, Task, Except]]
[Nat.le_of_lt,[Nat.le_of_succ_le],[LE.le]]
[UInt8.instSemigroupUInt8,[Semigroup.mk, UInt8.instSemigroupUInt8.proof_1],[Semigroup, UInt8]]
[Fin.sub_def,[Eq, HSub.hSub, Fin.mk, HMod.hMod, HAdd.hAdd, Fin.val, Nat.mod_lt, Fin.size_positive, rfl],[Eq, HSub.hSub, Fin.mk, HMod.hMod, HAdd.hAdd, Fin.val, Nat.mod_lt, Fin.size_positive]]
[Nat.div_mul_cancel,[Eq.mpr, Eq.refl, Eq, HMul.hMul, HDiv.hDiv, Nat.mul_comm, Nat.mul_div_cancel', rfl],[Eq, HMul.hMul, HDiv.hDiv]]
[lt_or_eq_of_le,[Decidable.lt_or_eq_of_le],[Or, LT.lt, Eq]]
[Nat.gcd_le_left,[Nat.le_of_dvd, Nat.gcd_dvd_left],[LE.le, Nat.gcd]]
[implies_of_if_pos,[],[]]
[decide_eq_true_iff,[Iff.intro, of_decide_eq_true, decide_eq_true],[Iff, Eq, Decidable.decide, Bool.true]]
[EStateM.Result.error.injEq,[Eq.propIntro, And.intro, Eq.refl, EStateM.Result.error, Eq.symm, eq_of_heq, HEq.refl],[Eq, EStateM.Result.error, And]]
[prioLow,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.nonReservedSymbol, Bool.false],[Lean.ParserDescr]]
[String.get,[Char, arbitrary, ite, Eq, PProd.fst, HAdd.hAdd, String.csize, OfNat.ofNat],[Char]]
[Int.subNatNat_of_sub_eq_zero,[],[Eq, Int.subNatNat, Int.ofNat, HSub.hSub]]
[List.forIn,[List.forIn.loop],[]]
[iff_of_false,[Iff.intro, Not.elim],[Iff]]
[Nat.min_succ_succ,[],[Eq, min, Nat.succ]]
[List.anyM,[Unit.unit, Bool, Pure.pure, Bool.false, Bind.bind, Bool.true, PProd.fst],[Bool]]
[UInt8.mk.sizeOf_spec,[Eq.refl, HAdd.hAdd, OfNat.ofNat, SizeOf.sizeOf],[Eq, SizeOf.sizeOf, UInt8.mk, HAdd.hAdd, OfNat.ofNat]]
[EStateM.seqRight,[EStateM.Result, Unit.unit, EStateM.Result.error],[EStateM]]
[Coe.noConfusionType,[],[]]
[String.Iterator.next,[String.Iterator, String.Iterator.mk, String.next],[String.Iterator]]
[InvImage.wf,[InvImage.wf.proof_1],[WellFounded, InvImage]]
[List.getLastD.proof_1,[],[List.noConfusionType, False, List.cons, List.nil]]
[EStateM.fromStateM,[EStateM.Result, StateT.run, EStateM.Result.ok],[EStateM]]
[Char.utf8Size.proof_2,[of_decide_eq_true, Eq.refl, Bool.true],[LT.lt, OfNat.ofNat, UInt32.size]]
[Prod.swap_prod_mk,[rfl],[Eq, Prod.swap, Prod.mk]]
[List.length_dropLast,[Unit.unit, Eq, List.length, List.dropLast, HSub.hSub, OfNat.ofNat, rfl],[Eq, List.length, List.dropLast, HSub.hSub, OfNat.ofNat]]
[congr_arg2,[rfl],[Eq]]
[or_iff_left_iff_imp,[Iff.intro, Iff.mp, Or.inr, or_iff_left_of_imp],[Iff, Or]]
[Complement.complement,[],[]]
[USize.instSemiringUSize.proof_4,[congrArg, USize.mk, AddMonoid.nsmul_succ', USize.val],[Eq, USize.mk, Semiring.nsmul, Nat.succ, USize.val]]
[Nat.exists_coprime',[Exists, And, LT.lt, OfNat.ofNat, Nat.coprime, Eq, HMul.hMul, Exists.intro, Nat.gcd, And.intro],[Exists, And, LT.lt, OfNat.ofNat, Nat.coprime, Eq, HMul.hMul]]
[ByteArray.set,[ByteArray, ByteArray.mk, Array.set],[ByteArray]]
[and_symm_right,[Iff.intro, And, Eq, And.intro, Eq.symm],[Iff, And, Eq]]
[xor_true,[of_eq_true, Eq.trans, congrFun, congrArg, Eq, funext, congr, Or, true_and, Not, And, eq_false_of_decide, Eq.refl, Bool.false, and_false, or_false, eq_self],[Eq, xor, True, Not]]
[String.utf16Length,[String.foldr, HAdd.hAdd, UInt32.toNat, Char.utf16Size, OfNat.ofNat],[Nat]]
[le_antisymm,[PartialOrder.le_antisymm],[Eq]]
[Mathlib.Tactic.Conv.convLHS,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.nonReservedSymbol, Bool.false, Lean.ParserDescr.unary, Lean.ParserDescr.symbol, Lean.ParserDescr.const, Lean.ParserDescr.cat, Lean.Parser.Tactic.Conv.convSeq],[Lean.ParserDescr]]
[imp_congr_right,[Iff.intro, Iff.mp, Iff.mpr],[Iff]]
[List.unzip,[Unit.unit, Prod, List, Prod.mk, List.nil, PProd.fst, List.cons],[Prod, List]]
[PartialOrder.toPreorder,[],[Preorder]]
[List.Perm.subset,[List.nil_subset, List.nil, List.cons_subset_cons, Eq.mpr, Eq.refl, Mem.mem, List.cons, propext, List.mem_cons, Or.inr, Or.inl, List.subset.trans],[Subset.subset]]
[Substring.foldr,[String.foldrAux],[]]
[Nat.zero_ne_one,[],[Ne, OfNat.ofNat]]
[or_congr_right,[or_congr, Iff.rfl],[Iff, Or]]
[instInhabitedUSize.proof_1,[Unit.unit, Eq.symm, eq_of_heq, Eq.refl, OfNat.ofNat, HEq.refl, LT.lt, USize.size, usize_size_eq, of_decide_eq_true, Bool.true],[LT.lt, OfNat.ofNat, USize.size]]
[System.FilePath.join,[ite, Eq, System.FilePath.isAbsolute, Bool.true, System.FilePath.mk, HAppend.hAppend, System.FilePath.toString, Char.toString, System.FilePath.pathSeparator],[System.FilePath]]
[false_iff_true,[iff_false_intro, Iff.mpr, trivial],[Iff, False, True]]
[Bind.bind,[],[]]
[Eq.mpr_not,[Eq.symm],[Not]]
[List.eq_nil_of_subset_nil,[Eq, List.nil, rfl, False.elim, List.mem_cons_self],[Eq, List.nil]]
[Nat.gcd_gcd_self_right_left,[Nat.dvd_antisymm, Nat.gcd_dvd_right, Nat.gcd, Nat.dvd_gcd, Nat.gcd_dvd_left, Nat.dvd_refl],[Eq, Nat.gcd]]
[List.reverseAux_reverseAux,[rfl, of_eq_true, Eq.trans, congr, congrArg, Eq, List.cons, List.reverseAux, List.nil, eq_self],[Eq, List.reverseAux, List.nil]]
[mul_right_cancel,[IsMulRightCancel.mul_right_cancel],[Eq]]
[Tactic.Ring.subst_into_pow,[Eq.mpr, Eq.refl, Eq, HPow.hPow, rfl],[Eq, HPow.hPow]]
[List.union_equiv_append,[of_eq_true, Eq.trans, congr, congrArg, Iff, propext, List.mem_union_iff, List.mem_append, iff_self, Or, Mem.mem],[List.equiv, List.union, HAppend.hAppend]]
[Mathlib.Tactic.Ext.«termExtIffType%__»,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.symbol, Lean.ParserDescr.const],[Lean.ParserDescr]]
[and_self_right,[Iff.intro, And.intro, And.left, And.right],[Iff, And]]
[Subarray.all,[Id.run, Subarray.allM],[Bool]]
[System.FilePath.isRelative,[not, System.FilePath.isAbsolute],[Bool]]
[Mathlib.Tactic.Lint.SimpLemmaInfo.isConditional,[],[Bool]]
[Quotient.ind,[Quot.ind],[]]
[«stx_<|>_»,[Lean.ParserDescr.trailingNode, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.symbol, Lean.ParserDescr.cat],[Lean.TrailingParserDescr]]
[Command.simpsRule.erase,[Lean.ParserDescr.nodeWithAntiquot, Lean.Name.mkStr, Lean.Name.anonymous, Lean.ParserDescr.binary, Lean.ParserDescr.symbol, Lean.ParserDescr.const],[Lean.ParserDescr]]
[unsafeEIO,[unsafeBaseIO, EIO.toBaseIO],[Except]]
[Prod.anyI,[Nat.anyAux, Prod.snd, HSub.hSub, Prod.fst],[Bool]]
[String.all,[not, String.any],[Bool]]
[Int.negSucc_ofNat_inj_iff,[Iff.intro, Int.negSucc.inj, of_eq_true, Eq.trans, congrFun, congrArg, Eq, Int.negSucc, eq_self],[Iff, Eq, Int.negSucc]]
[Task.Priority.max,[OfNat.ofNat],[Task.Priority]]
[decidable_of_bool.proof_1,[Iff.mp, rfl],[]]
[or_left_comm,[Eq.mpr, Eq.refl, Iff, Or, Eq.symm, propext, or_assoc, or_comm, Iff.rfl],[Iff, Or]]
[lt_or_le,[dite, LE.le, Or.inr, Or.inl, lt_of_not_ge],[Or, LT.lt, LE.le]]
[HXor.noConfusionType,[],[]]
[instStreamList,[Stream.mk, Unit.unit, Option, Prod, List, Option.none, Option.some, Prod.mk],[Stream, List]]
[Nat.succ_sub_sub_succ,[Eq.mpr, Eq.refl, Eq, HSub.hSub, Nat.succ, Nat.sub_sub, HAdd.hAdd, Nat.add_succ, Nat.succ_sub_succ, rfl],[Eq, HSub.hSub, Nat.succ]]
[UInt16.shiftRight,[UInt16.mk, HShiftRight.hShiftRight, UInt16.val, UInt16.modn, OfNat.ofNat],[UInt16]]
[not_le,[Iff.symm, lt_iff_not_ge],[Iff, Not, LE.le, LT.lt]]
[Mathlib.ExtendedBinder.extBinder,[Lean.ParserDescr.nodeWithAntiquot, Lean.Name.mkStr, Lean.Name.anonymous, Lean.ParserDescr.binary, Lean.ParserDescr.const, Lean.ParserDescr.unary, Lean.ParserDescr.symbol, Lean.ParserDescr.cat, OfNat.ofNat],[Lean.ParserDescr]]
[Nat.left_distrib,[Eq.mpr, Eq.refl, Eq, HMul.hMul, Nat.zero, HAdd.hAdd, Nat.zero_mul, OfNat.ofNat, rfl, congr, congrArg, Eq.trans, Nat.succ_mul, congrFun, Nat.add_assoc, Nat.add_left_comm],[Eq, HMul.hMul, HAdd.hAdd]]
[not_not_em,[Or.inr, Or.inl],[Not, Or]]
[UInt32.instSemiringUInt32.proof_11,[Eq.mpr, congr, congrArg, Eq, Eq.trans, HMul.hMul, UInt32.add_def, UInt32.mul_def, UInt32.mk, HAdd.hAdd, UInt32.val, UInt32.eq_of_val_eq, Semiring.mul_add],[Eq, HMul.hMul, HAdd.hAdd]]
[Mathlib.Tactic.Lint.sortResults,[Bind.bind, ForIn.forIn, Lean.Core.CoreM, ForInStep, Std.HashMap, Lean.Name, Nat, Lean.findDeclarationRanges?, Option.none, Pure.pure, PUnit.unit, ForInStep.yield, Array.qsort, Std.HashMap.toArray, Bool, Decidable.decide, LT.lt, Std.HashMap.findD, OfNat.ofNat, HSub.hSub, Array.size],[Lean.Core.CoreM, Array, Prod, Lean.Name]]
[AddGroup.noConfusionType,[],[]]
[Nat.instTransLeArrowNatArrowNatPropLtArrowNatArrowNatPropLtArrowNatArrowNatProp,[Trans.mk, Nat.instTransLeArrowNatArrowNatPropLtArrowNatArrowNatPropLtArrowNatArrowNatProp.proof_1],[Trans, LE.le, LT.lt]]
[EStateM.Backtrackable.save,[],[]]
[instModUInt32,[Mod.mk, UInt32.mod],[Mod, UInt32]]
[iff_true,[propext, Iff.intro, Iff.mpr, trivial],[Eq, Iff, True]]
[EStateM.pure,[EStateM.Result.ok],[EStateM]]
[Function.comp,[],[]]
[ShiftRight.shiftRight,[],[]]
[List.foldr,[Unit.unit, PProd.fst],[]]
[Tactic.TryThis.addExactSuggestion,[Bind.bind, liftM, Tactic.TryThis.delabToRefinableSyntax, ite, Eq, Lean.Expr.hasExprMVar, Bool.true, Lean.MonadRef.mkInfoFromRefPos, Lean.MonadQuotation.getCurrMacroScope, Lean.MonadQuotation.getMainModule, Pure.pure, Lean.Syntax.node, Lean.SourceInfo.none, Lean.Name.mkStr, Lean.Name.anonymous, List.toArray, List.cons, Lean.Syntax.atom, List.nil],[Lean.Elab.Tactic.TacticM, Unit]]
[instInhabitedUInt32.proof_1,[of_decide_eq_true, Eq.refl, Bool.true],[LT.lt, OfNat.ofNat, UInt32.size]]
[WellFoundedRelation.noConfusionType,[],[]]
[GroupWithZero.zero_mul,[],[Eq, HMul.hMul, OfNat.ofNat]]
[ne_iff_lt_or_gt,[Iff.intro, lt_or_gt_of_ne, Ne, ne_of_lt, ne_of_gt],[Iff, Ne, Or, LT.lt, GT.gt]]
[Array.instAppendArray,[Append.mk, Array.append],[Append, Array]]
[Tactic.LibrarySearch.librarySearch',[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.nonReservedSymbol, Bool.false, Lean.ParserDescr.unary, Lean.ParserDescr.symbol, Lean.ParserDescr.cat, Lean.ParserDescr.sepBy, Lean.Parser.Tactic.simpArg, Lean.ParserDescr.const],[Lean.ParserDescr]]
[Decidable.not_and_distrib',[Iff.intro, dite, Or.inl, And.intro, Or.inr, not_and_of_not_or_not],[Iff, Not, And, Or]]
[UInt64.modn,[UInt64.mk, HMod.hMod, UInt64.val],[UInt64]]
[UInt16.instSemiringUInt16.proof_11,[Eq.mpr, congr, congrArg, Eq, Eq.trans, HMul.hMul, UInt16.add_def, UInt16.mul_def, UInt16.mk, HAdd.hAdd, UInt16.val, UInt16.eq_of_val_eq, Semiring.mul_add],[Eq, HMul.hMul, HAdd.hAdd]]
[UInt32.toUInt64,[Nat.toUInt64, UInt32.toNat],[UInt64]]
[List.tailD,[List],[List]]
[boolToSort,[CoeSort.mk, Eq, Bool.true],[CoeSort, Bool]]
[iff_of_eq,[Iff.rfl],[Iff]]
[List.erase_append_left,[Eq.mpr, congr, congrArg, Eq, List.erase_eq_erasep, HAppend.hAppend, congrFun, List.erasep_append_left, rfl],[Eq, List.erase, HAppend.hAppend]]
[Subsingleton.elim,[Subsingleton.elim.proof_1],[Eq]]
[Not.intro,[],[Not]]
[Substring.dropWhile,[Substring, Substring.mk],[Substring]]
[Function.bijective.of_comp_iff',[and_congr, Function.injective.of_comp_iff, Function.bijective.injective, Function.surjective.of_comp_iff'],[Iff, Function.bijective, Function.comp]]
[implies_of_if_neg,[],[]]
[Semiring.mul_add,[],[Eq, HMul.hMul, HAdd.hAdd]]
[String.substrEq,[and, Decidable.decide, LE.le, HAdd.hAdd, String.bsize, String.substrEq.loop],[Bool]]
[DoResultPRBC.break.sizeOf_spec,[Eq.refl, HAdd.hAdd, OfNat.ofNat, SizeOf.sizeOf],[Eq, SizeOf.sizeOf, DoResultPRBC.break, HAdd.hAdd, OfNat.ofNat]]
[UInt32.one_def,[rfl],[Eq, OfNat.ofNat, UInt32.mk]]
[UInt16.instRingUInt16.proof_5,[UInt16.eq_of_val_eq, of_eq_true, Eq.trans, congr, congrArg, Eq, UInt16.val, congrFun, HAdd.hAdd, UInt16.neg_def, UInt16.add_def, UInt16.mk, Neg.neg, add_left_neg, UInt16.zero_def, eq_true_of_decide, Eq.refl, Bool.true],[Eq, HAdd.hAdd, Neg.neg, OfNat.ofNat]]
[String.length_append,[Eq, String.length, HAppend.hAppend, HAdd.hAdd, Eq.mpr, Eq.refl, String.mk, String.congr_append, List.length_append],[Eq, String.length, HAppend.hAppend, HAdd.hAdd]]
[Mathlib.Tactic.Lint.SimpLemmaInfo.mk.injEq,[Eq.propIntro, And.intro, Eq.refl, Mathlib.Tactic.Lint.SimpLemmaInfo.mk, Eq.symm, eq_of_heq, HEq.refl],[Eq, Mathlib.Tactic.Lint.SimpLemmaInfo.mk, And]]
[DivInvMonoid.noConfusionType,[],[]]
[Nat.instTransLtArrowNatArrowNatPropLeArrowNatArrowNatPropLtArrowNatArrowNatProp.proof_1,[Nat.lt_of_lt_of_le],[LT.lt]]
[UInt8.instRingUInt8,[Ring.mk, UInt8.instRingUInt8.proof_1, UInt8.mk, Ring.gsmul, UInt8.val, UInt8.instRingUInt8.proof_2, UInt8.instRingUInt8.proof_3, UInt8.instRingUInt8.proof_4, UInt8.instRingUInt8.proof_5],[Ring, UInt8]]
[UInt64.instSemiringUInt64.proof_1,[of_eq_true, Eq.trans, forall_congr, congrFun, congrArg, Eq, HAdd.hAdd, UInt64.zero_def, UInt64.add_def, UInt64.mk, OfNat.ofNat, add_zero, UInt64.val, UInt64.mk_val_eq, eq_self, propext, forall_const, UInt64],[Eq, HAdd.hAdd, OfNat.ofNat]]
[UInt16.instInhabitedFinSize,[Inhabited.mk, Fin.ofNat', OfNat.ofNat, UInt16.size_positive],[Inhabited, Fin, UInt16.size]]
[Nat.mul_mod,[],[Eq, HMod.hMod, HMul.hMul]]
[PSigma.SkipLeft,[PSigma.RevLex, emptyRelation],[]]
[Decidable.em,[Decidable.byCases, Or.inl, Or.inr],[Or, Not]]
[Array.insertionSort.swapLoop.proof_1,[Nat.lt_trans, Nat.lt_succ_self, Eq.symm],[LT.lt, Array.size]]
[and_congr_left',[and_congr, Iff.rfl],[Iff, And]]
[if_true,[if_pos, trivial],[Eq, ite, True]]
[Subarray.toArray,[Array.ofSubarray],[Array]]
[le_antisymm_iff,[Iff.intro, And.intro, le_of_eq, Eq.symm, Eq, le_antisymm],[Iff, Eq, And, LE.le]]
[Array.toListLitAux,[List, PProd.fst, Array.toListLitAux.proof_1, List.cons, Array.getLit, Array.toListLitAux.proof_2],[List]]
[add_left_comm,[Eq.mpr, Eq.refl, Eq, HAdd.hAdd, Eq.symm, add_assoc, add_comm, rfl],[Eq, HAdd.hAdd]]
[Nat.lt_of_le_of_ne,[LT.lt, Nat.lt_or_ge, absurd, Nat.le_antisymm],[LT.lt]]
[Nat.le_of_not_lt,[Or.resolve_left, Nat.lt_or_ge],[LE.le]]
[Monoid.one_mul,[],[Eq, HMul.hMul, OfNat.ofNat]]
[List.pwFilter,[Unit.unit, List, List.nil, ite, List.cons],[List]]
[Nat.coprime.gcd_left,[Nat.coprime.coprime_dvd_left, Nat.gcd_dvd_right],[Nat.coprime, Nat.gcd]]
[le_of_lt_or_eq,[LE.le, le_of_lt, le_refl],[LE.le]]
[one_mul,[Monoid.one_mul],[Eq, HMul.hMul, OfNat.ofNat]]
[String.isNat,[String.all, Char.isDigit],[Bool]]
[PSigma.mk.sizeOf_spec,[Eq.refl, HAdd.hAdd, OfNat.ofNat, SizeOf.sizeOf],[Eq, SizeOf.sizeOf, PSigma.mk, HAdd.hAdd, OfNat.ofNat]]
[PSigma.lex.proof_1,[WellFounded.intro, Acc, PSigma.Lex, PSigma.lexAccessible, WellFounded.apply],[WellFounded, PSigma.Lex]]
[List.card_remove_of_mem,[Eq, List.card, HAdd.hAdd, List.remove, OfNat.ofNat, False.elim, List.not_mem_nil, Decidable.em, Eq.mpr, congrArg, List.cons, congrFun, if_pos, List, Mem.mem, Eq.symm, Eq.refl],[Eq, List.card, HAdd.hAdd, List.remove, OfNat.ofNat]]
[Bool.true.sizeOf_spec,[Eq.refl, OfNat.ofNat],[Eq, SizeOf.sizeOf, Bool.true, OfNat.ofNat]]
[Mathlib.Tactic.Ext.tacticSubstEqs,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.nonReservedSymbol, Bool.false],[Lean.ParserDescr]]
[List.asString,[String.mk],[String]]
[eq_false_of_ne_true,[Eq, Bool.false, False.elim, rfl],[Eq, Bool.false]]
[Subset.subset,[],[]]
[dbgTraceVal,[dbgTrace, ToString.toString],[]]
[String.Iterator.mk.inj,[And.intro],[And, Eq]]
[instReprDecidable,[Repr.mk, Std.Format, Repr.addAppParen, Std.Format.text],[Repr, Decidable]]
[Preorder.le_refl,[],[LE.le]]
[List.subset_append_left,[List.mem_append_left],[Subset.subset, HAppend.hAppend]]
[instDecidableEqFin,[Decidable, Eq, decEq, Fin.val, Decidable.isTrue, Fin.eq_of_val_eq, Decidable.isFalse, Fin.ne_of_val_ne],[DecidableEq, Fin]]
[add_right_comm,[Eq.mpr, Eq.refl, Eq, HAdd.hAdd, add_assoc, add_comm, rfl],[Eq, HAdd.hAdd]]
[List.head!,[Unit.unit, panicWithPosWithDecl, OfNat.ofNat],[]]
[UInt16.noConfusionType,[],[]]
[ULift.up_down,[Eq, ULift.up, ULift.down, rfl],[Eq, ULift.up, ULift.down]]
[Subtype.val,[],[]]
[USize.decLe,[Decidable, LE.le, inferInstanceAs],[Decidable, LE.le]]
[Tactic.Ring.HornerExpr.xadd.injEq,[Eq.propIntro, And.intro, Eq.refl, Tactic.Ring.HornerExpr.xadd, Eq.symm, eq_of_heq, HEq.refl],[Eq, Tactic.Ring.HornerExpr.xadd, And]]
[lt_of_lt_of_le,[LT.lt, lt_of_le_not_le, le_trans],[LT.lt]]
[instSubFloat,[Sub.mk, Float.sub],[Sub, Float]]
[StateRefT'.modifyGet,[ST.Ref.modifyGet],[StateRefT']]
[UInt16.size_positive,[of_decide_eq_true, Eq.refl, Bool.true],[LT.lt, OfNat.ofNat, UInt16.size]]
[Function.left_inverse.right_inverse,[],[Function.right_inverse]]
[instOrOpUInt8,[OrOp.mk, UInt8.lor],[OrOp, UInt8]]
[Function.right_inverse.surjective,[Exists.intro],[Function.surjective]]
[Nat.Up,[And, LT.lt],[]]
[Char.eq_of_val_eq,[Eq.symm, eq_of_heq, Eq.refl, Char.val, Char.mk, HEq.refl, Eq, rfl],[Eq]]
[Nat.add_sub_assoc,[Eq, HSub.hSub, HAdd.hAdd, Eq.mpr, Eq.refl, Eq.symm, Nat.add_sub_cancel_left, Nat.add_comm, Nat.add_assoc, Nat.add_sub_cancel, rfl],[Eq, HSub.hSub, HAdd.hAdd]]
[true_or,[propext, Iff.intro, trivial, Or.inl],[Eq, Or, True]]
[ByteArray.data,[],[Array, UInt8]]
[List.mapIdx.loop,[List, List.nil, List.cons, PProd.fst, HAdd.hAdd, OfNat.ofNat],[List]]
[and_congr,[Iff.intro, And.imp, Iff.mp, Iff.mpr],[Iff, And]]
[ReaderT.run_seqLeft,[Eq.mpr, Eq.refl, Eq, ReaderT.run, SeqLeft.seqLeft, seqLeft_eq_bind, rfl],[Eq, ReaderT.run, SeqLeft.seqLeft]]
[String.Pos,[Nat],[]]
[ByteArray.foldlM,[dite, LE.le, ByteArray.size, ByteArray.foldlM.proof_1],[]]
[Equiv.symm_comp_self,[funext, Equiv.symm_apply_apply],[Eq, Function.comp, Equiv.toFun, Equiv.symm, id]]
[Fin.instXorFin,[Xor.mk, Fin.xor],[Xor, Fin]]
[String.Iterator.s,[],[String]]
[Int.decEq.proof_5,[],[Int.noConfusionType, False, Int.ofNat, Int.negSucc]]
[List.mem_map,[Unit.unit, Iff, Mem.mem, List.map, Exists, And, Eq, of_eq_true, Eq.trans, congr, congrArg, List.map_nil, propext, List.mem_nil_iff, funext, congrFun, false_and, eq_false, exists_false, eq_true_of_decide, Eq.refl, Bool.true, Eq.mpr, List.cons, List.map_cons, List.mem_cons, Or, PProd.fst, Iff.intro, Exists.intro, And.intro, Or.inl, rfl, Or.inr, Eq.symm, eq_of_heq, HEq.refl],[Iff, Mem.mem, List.map, Exists, And, Eq]]
[Int.fdiv,[Int.ofNat, Int.negSucc, Nat.succ, Int, OfNat.ofNat, HDiv.hDiv],[Int]]
[Equiv.coe_fn_mk,[rfl],[Eq, Equiv.toFun, Equiv.mk]]
[Squash.mk,[Quot.mk, True],[Squash]]
[ulift.up.inj,[],[Eq]]
[Nat.lt_succ_of_le,[Nat.succ_le_succ],[LT.lt, Nat.succ]]
[implies_congr_ctx,[propext, Iff.intro],[Eq]]
[StateRefT'.instMonadStateOfStateRefT',[MonadStateOf.mk, StateRefT'.get, StateRefT'.set, StateRefT'.modifyGet],[MonadStateOf, StateRefT']]
[decidableLt_of_decidableLe,[Decidable, LT.lt, dite, LE.le, Decidable.isFalse, decidableLt_of_decidableLe.proof_1, Decidable.isTrue, lt_of_le_not_le, decidableLt_of_decidableLe.proof_2],[DecidableRel, LT.lt]]
[List.partitionAux,[Prod, List, Prod.mk, List.reverse, Unit.unit, PProd.fst, List.cons],[Prod, List]]
[Function.injective2.eq_iff,[Iff.intro, Eq, congr_arg2],[Iff, Eq, And]]
[Int.instAddInt,[Add.mk, Int.add],[Add, Int]]
[IsMulLeftCancel.mul_left_cancel,[],[Eq]]
[Or.neg_resolve_left,[Or.elim, absurd, id],[]]
[not_iff_not,[Decidable.not_iff_not],[Iff, Not]]
[Or.imp,[Or.elim, Function.comp, Or.inl, Or.inr],[Or]]
[USize.land,[USize.mk, Fin.land, USize.val],[USize]]
[ST.Ref.modifyGet,[liftM, ST.Prim.Ref.modifyGet],[]]
[instDecidableEqChar,[Decidable, Eq, decEq, Char.val, Decidable.isTrue, Char.eq_of_val_eq, Decidable.isFalse, Char.ne_of_val_ne],[DecidableEq, Char]]
[instXorUInt16,[Xor.mk, UInt16.xor],[Xor, UInt16]]
[Array.swapAt,[Prod.mk],[Prod, Array]]
[Attr.simps,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.nonReservedSymbol, Bool.false, Lean.ParserDescr.unary, Lean.ParserDescr.symbol, Lean.ParserDescr.cat, Lean.ParserDescr.const],[Lean.ParserDescr]]
[gt_of_ge_of_gt,[lt_of_lt_of_le],[GT.gt]]
[Array.shrink.loop,[Array, PProd.fst, Array.pop],[Array]]
[mul_left_comm,[Eq.mpr, Eq.refl, Eq, HMul.hMul, Eq.symm, mul_assoc, mul_comm, rfl],[Eq, HMul.hMul]]
[instMonadControlExceptT,[MonadControl.mk, Except, liftM, ExceptT.run],[MonadControl, ExceptT]]
[withPtrAddrUnsafe,[ptrAddrUnsafe],[]]
[MonadControlT.restoreM,[],[]]
[Mathlib.ExtendedBinder.«term∃___,_»,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.symbol, Lean.ParserDescr.const, Lean.ParserDescr.cat],[Lean.ParserDescr]]
[MonadState.modifyGet,[],[]]
[not_and_of_not_or_not,[False, Or.elim, absurd],[Not, And]]
[Prod.map_map,[of_eq_true, Eq.trans, congr, congrArg, Eq, Prod.map, prod_map, Prod.mk, Prod.fst, Prod.snd, Function.comp, Function.comp_apply, eq_self],[Eq, Prod.map, Function.comp]]
[ExceptCpsT.run,[Except, Pure.pure, Except.ok, Except.error],[Except]]
[withPtrEq,[Unit.unit],[Bool]]
[Array.findSomeRevM?.find,[Option, Pure.pure, Option.none],[Option]]
[Mathlib.Tactic.Lint.decorateError,[MonadExcept.tryCatch, MonadExcept.throw],[Lean.Meta.MetaM]]
[UInt16.instSemiringUInt16.proof_8,[of_eq_true, Eq.trans, forall_congr, congrFun, congrArg, Eq, HMul.hMul, UInt16.one_def, UInt16.mul_def, UInt16.mk, OfNat.ofNat, mul_one, UInt16.val, UInt16.mk_val_eq, eq_self, propext, forall_const, UInt16],[Eq, HMul.hMul, OfNat.ofNat]]
[Int.decEq,[Decidable, Eq, Int.ofNat, decEq, Decidable.isTrue, Int.decEq.proof_1, Decidable.isFalse, Int.decEq.proof_2, Int.negSucc, Int.decEq.proof_3, Int.decEq.proof_4, Int.decEq.proof_5, Int.decEq.proof_6],[Decidable, Eq]]
[Nat.add_mod_right,[Eq.mpr, Eq.refl, Eq, HMod.hMod, HAdd.hAdd, Nat.mod_eq_sub_mod, Nat.le_add_left, HSub.hSub, Nat.add_sub_cancel, rfl],[Eq, HMod.hMod, HAdd.hAdd]]
[HShiftLeft.noConfusionType,[],[]]
[Subtype.mk.injEq,[Eq.propIntro, Eq.refl, Subtype.mk, Eq.symm, eq_of_heq, HEq.refl],[Eq, Subtype.mk]]
[ExceptT.adapt,[ExceptT.mk, Functor.map, Except.mapError],[ExceptT]]
[Function.left_inverse.id,[funext],[Eq, Function.comp, id]]
[fix6,[fixCore6, arbitrary],[]]
[Bool.toLBool,[Unit.unit, Lean.LBool, Lean.LBool.true, Lean.LBool.false],[Lean.LBool]]
[Nat.succ.injEq,[Eq.propIntro, Eq.refl, Nat.succ, Eq.symm, eq_of_heq, HEq.refl],[Eq, Nat.succ]]
[PLift.up_down,[Eq, PLift.up, PLift.down, rfl],[Eq, PLift.up, PLift.down]]
[implies,[],[]]
[EqIffBeqTrue,[Iff.intro, decide_eq_true, of_decide_eq_true],[Iff, Eq, BEq.beq, Bool.true]]
[DoResultBC.break.sizeOf_spec,[Eq.refl, HAdd.hAdd, OfNat.ofNat, SizeOf.sizeOf],[Eq, SizeOf.sizeOf, DoResultBC.break, HAdd.hAdd, OfNat.ofNat]]
[randBool,[Prod, Bool, Prod.mk, Decidable.decide, Eq, OfNat.ofNat],[Prod, Bool]]
[Function.comp_right,[],[]]
[Array.toArrayLit_eq',[Array.toArrayLit_eq'.aux],[Eq, Array.toArrayLit]]
[Function.partial_inv_of_injective,[Iff, Eq, Function.partial_inv, Option.some, Iff.intro],[Function.is_partial_inv, Function.partial_inv]]
[ShiftRight.noConfusionType,[],[]]
[instReprAtomNat,[ReprAtom.mk],[ReprAtom, Nat]]
[Set.subset,[Mem.mem],[]]
[instDecidableEqQuotient,[Quotient.recOnSubsingleton₂, Decidable, Eq, Quotient.mk, Decidable.isTrue, Quotient.sound, Decidable.isFalse, instDecidableEqQuotient.proof_2],[DecidableEq, Quotient]]
[instInhabitedUInt8,[Inhabited.mk, UInt8.ofNatCore, OfNat.ofNat, instInhabitedUInt8.proof_1],[Inhabited, UInt8]]
[Tactic.Ring.Cache.noConfusionType,[],[]]
[Nat.dvd_of_mod_eq_zero,[Exists.intro, HDiv.hDiv],[Dvd.dvd]]
[List.join_cons,[rfl],[Eq, List.join, List.cons, HAppend.hAppend]]
[instHashableProd,[Hashable.mk, UInt64, mixHash, Hashable.hash],[Hashable, Prod]]
[List.forall_mem_append,[Eq.mpr, congrFun, congrArg, Iff, Eq.trans, forall_congr, implies_congr, propext, List.mem_append, Eq.refl, or_imp_distrib, forall_and_distrib, And, Iff.rfl],[Iff, And]]
[WellFoundedRelation.mk.sizeOf_spec,[Eq.refl, HAdd.hAdd, OfNat.ofNat, SizeOf.sizeOf],[Eq, SizeOf.sizeOf, WellFoundedRelation.mk, HAdd.hAdd, OfNat.ofNat]]
[List.toArray_data,[List.toArrayAux_data, Array.mkEmpty, List.redLength],[Eq, Array.data, List.toArray]]
[instHPow,[HPow.mk, Pow.pow],[HPow]]
[Tactic.Ring.Cache.mk.sizeOf_spec,[Eq.refl, HAdd.hAdd, OfNat.ofNat, SizeOf.sizeOf],[Eq, SizeOf.sizeOf, Tactic.Ring.Cache.mk, HAdd.hAdd, OfNat.ofNat]]
[HasEquiv.noConfusionType,[],[]]
[Subrelation.wf.proof_1,[WellFounded.intro, Subrelation.accessible, WellFounded.apply],[WellFounded]]
[Nat.add_mul_div_left,[Eq.mpr, Eq.refl, Eq, HDiv.hDiv, HAdd.hAdd, HMul.hMul, Nat.zero, Nat.mul_zero, OfNat.ofNat, Nat.add_zero, rfl, Nat.succ, Nat.mul_succ, Eq.symm, Nat.add_assoc, Nat.add_div_right],[Eq, HDiv.hDiv, HAdd.hAdd, HMul.hMul]]
[LawfulFunctor.noConfusionType,[],[]]
[Array.zip,[Array.zipWith, Prod.mk],[Array, Prod]]
[instZero,[Zero.mk, OfNat.ofNat],[Zero]]
[commutative,[Eq],[]]
[pow_zero,[Monoid.npow_zero'],[Eq, HPow.hPow, OfNat.ofNat]]
[Nat.lt_irrefl,[Nat.not_succ_le_self],[Not, LT.lt]]
[ByteArray.append,[ByteArray.copySlice, OfNat.ofNat, ByteArray.size, Bool.false],[ByteArray]]
[instReprAtomUInt16,[ReprAtom.mk],[ReprAtom, UInt16]]
[Semiring.npow_zero',[],[Eq, Semiring.npow, OfNat.ofNat]]
[«term_⊕_»,[Lean.ParserDescr.trailingNode, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.symbol, Lean.ParserDescr.cat],[Lean.TrailingParserDescr]]
[Int.add_assoc_aux1,[Eq, HAdd.hAdd, Int.ofNat, of_eq_true, Eq.trans, congr, congrArg, congrFun, Int.ofNat_add_ofNat, Nat.add_assoc, eq_self, Int.negSucc, Int.ofNat_add_negSucc_ofNat, Int.subNatNat_add, Nat.succ, Int.subNatNat],[Eq, HAdd.hAdd, Int.ofNat]]
[instToStringSubarray,[ToString.mk, ToString.toString, Subarray.toArray],[ToString, Subarray]]
[Nat.not_succ_le_self,[Unit.unit, Not, LE.le, Nat.succ, Nat.not_succ_le_zero, OfNat.ofNat, absurd, Nat.le_of_succ_le_succ, PProd.fst],[Not, LE.le, Nat.succ]]
[Nat.one_pos,[Nat.zero_lt_one],[LT.lt, OfNat.ofNat]]
[Nat.eq_of_mul_eq_mul_right,[Nat.eq_of_mul_eq_mul_left, Eq.mp, Eq.refl, Eq, HMul.hMul, Nat.mul_comm],[Eq]]
[List.nil_bind,[of_eq_true, eq_self, List.nil],[Eq, List.bind, List.nil]]
[ByteSlice.instForInByteSliceUInt8,[ForIn.mk, ByteSlice.forIn.loop, HAdd.hAdd],[ForIn, ByteSlice, UInt8]]
[EStateM.nonBacktrackable,[EStateM.Backtrackable.mk, EStateM.dummySave, EStateM.dummyRestore],[EStateM.Backtrackable, PUnit]]
[UInt32.decEq.proof_2,[absurd],[False]]
[AddGroup.toSubNegMonoid,[],[SubNegMonoid]]
[PSigma.revLex,[PSigma.revLex.proof_1],[WellFounded, PSigma.RevLex]]
[Int.neg_neg_ofNat_succ,[rfl],[Eq, Neg.neg, Int.negSucc, Int.ofNat, Nat.succ]]
[UInt16.mul_def,[rfl],[Eq, HMul.hMul, UInt16.mk, UInt16.val]]
[List.dropWhile,[Unit.unit, List, List.nil, PProd.fst, List.cons],[List]]
[And.congr_right_iff,[Iff.intro, Eq.mp, congr, congrArg, Iff, Eq.trans, congrFun, And, eq_true, true_and, and_congr_right],[Iff, And]]
[instRingFin.proof_4,[of_eq_true, Eq.trans, forall_congr, eq_self, Neg.neg, HMul.hMul, Fin.ofNat', Nat.succ, Fin.size_positive, propext, forall_const, Fin, Nat],[Eq, Neg.neg, HMul.hMul, Fin.ofNat', Nat.succ, Fin.size_positive]]
[Array.findSomeRevM?.find.proof_2,[Nat.le_of_lt, Nat.lt_of_lt_of_le, Nat.lt_succ_self],[LE.le, Array.size]]
[min_eq_right,[Eq.mpr, Eq.refl, Eq, min, min_comm, min_eq_left],[Eq, min]]
[UInt8.instSemiringUInt8.proof_8,[of_eq_true, Eq.trans, forall_congr, congrFun, congrArg, Eq, HMul.hMul, UInt8.one_def, UInt8.mul_def, UInt8.mk, OfNat.ofNat, mul_one, UInt8.val, UInt8.mk_val_eq, eq_self, propext, forall_const, UInt8],[Eq, HMul.hMul, OfNat.ofNat]]
[add_left_cancel_iff,[Iff.intro, add_left_cancel, congrArg, HAdd.hAdd],[Iff, Eq, HAdd.hAdd]]
[ByteArray.set!,[ByteArray, ByteArray.mk, Array.set!],[ByteArray]]
[One.noConfusionType,[],[]]
[List.mapTRAux_eq,[of_eq_true, Eq.trans, congrArg, Eq, List.reverse, List.append_nil, eq_self, Eq.mpr, Eq.refl, List.mapTRAux, List.cons, HAppend.hAppend, List.map, List.reverse_cons, List.nil, List.append_assoc, rfl],[Eq, List.mapTRAux, HAppend.hAppend, List.reverse, List.map]]
[instSubsingletonSquash,[instSubsingletonSquash.proof_1],[Subsingleton, Squash]]
[ByteArray.foldlM.loop,[dite, LT.lt, Unit.unit, Pure.pure, Bind.bind, ByteArray.get, Fin.mk, ByteArray.foldlM.loop.proof_1, PProd.fst, HAdd.hAdd, OfNat.ofNat],[]]
[imp_iff_not_or,[Decidable.imp_iff_not_or],[Iff, Or, Not]]
[List.toArrayAux_data,[Eq, Array.data, List.toArrayAux, HAppend.hAppend, Eq.symm, List.append_nil, List.nil, Eq.trans, PProd.fst, Array.push, of_eq_true, congrFun, congrArg, Array.mk, List.concat_eq_append, List.append_assoc, List.cons, List.singleton_append, eq_self],[Eq, Array.data, List.toArrayAux, HAppend.hAppend]]
[instDecidableEqNat,[Nat.decEq],[DecidableEq, Nat]]
[List.cons_subset_of_subset_of_mem,[Iff.mpr, List.cons_subset, And.intro],[Subset.subset, List.cons]]
[RandomGen.range,[],[Prod, Nat]]
[instPowNatNat,[Pow.mk, Nat.pow],[Pow, Nat]]
[ExceptT.run,[],[Except]]
[Function.right_inverse_of_injective_of_left_inverse,[],[Function.right_inverse]]
[Acc.noConfusionType,[],[]]
[Int.add_left_neg,[Unit.unit, Eq, HAdd.hAdd, Neg.neg, OfNat.ofNat, rfl, of_eq_true, Eq.trans, congrFun, congrArg, Int.neg_ofNat_of_succ, Int.ofNat, Nat.succ, Int.negSucc_ofNat_add_ofNat, Int.sub_nat_self, eq_true_of_decide, Eq.refl, Bool.true, Int.neg_neg_ofNat_succ, Int.negSucc, Int.ofNat_add_negSucc_ofNat],[Eq, HAdd.hAdd, Neg.neg, OfNat.ofNat]]
[ByteSlice.toString,[Id.run, Bind.bind, ForIn.forIn, Pure.pure, PUnit.unit, ForInStep.yield],[String]]
[coeOfTail,[CoeHTCT.mk, coeTail],[CoeHTCT]]
[Nat.gcd_mul_left_right,[Eq.mpr, Eq.refl, Eq, Nat.gcd, HMul.hMul, Nat.gcd_comm, Nat.gcd_mul_left_left, rfl],[Eq, Nat.gcd, HMul.hMul]]
[Functor.map_equiv.proof_2,[of_eq_true, Eq.trans, congrFun, congrArg, Eq, Functor.map_map, Equiv.toFun, Equiv.symm, Functor.map, Equiv.self_comp_symm, LawfulFunctor.id_map, eq_self],[Eq, Functor.map, Equiv.toFun, Equiv.symm]]
[StateCpsT.runK_set,[rfl],[Eq, StateCpsT.runK, MonadStateOf.set, PUnit.unit]]
[Nat.mod_add_div,[Nat.mod.inductionOn, Eq.mpr, Eq.refl, Eq, HAdd.hAdd, HMod.hMod, HMul.hMul, HDiv.hDiv, Nat.div_eq, ite, And, LT.lt, OfNat.ofNat, LE.le, HSub.hSub, Nat.mod_eq, congrFun, congrArg, congr, Eq.trans, ite_congr, eq_true, eq_true_of_decide, Bool.true, ite_true, Nat.mul_succ, Eq.symm, Nat.add_assoc, Nat.sub_add_cancel, And.right, rfl, of_eq_true, eq_false, ite_false, Nat.mul_zero, Nat.add_zero, eq_self],[Eq, HAdd.hAdd, HMod.hMod, HMul.hMul, HDiv.hDiv]]
[String.instDecidableEqIterator,[Decidable, Eq, dite, Decidable.isTrue, rfl, Decidable.isFalse],[DecidableEq, String.Iterator]]
[instCoeTail_1,[CoeTail.mk, coeSort],[CoeTail]]
[elabVariables,[ite, Eq, Lean.Syntax.isOfKind, Lean.Name.mkStr, Lean.Name.anonymous, Bool.true, Bind.bind, Lean.Elab.logWarningAt, Function.comp, Lean.MessageData.ofFormat, Std.ToFormat.format, Lean.MonadRef.mkInfoFromRefPos, Lean.MonadQuotation.getCurrMacroScope, Lean.MonadQuotation.getMainModule, Pure.pure, Lean.Syntax.node, Lean.SourceInfo.none, List.toArray, List.cons, Lean.Syntax.atom, Option.getD, Lean.Syntax.getHeadInfo?, Array.append, List.nil, Lean.Elab.Command.elabVariable, Lean.Elab.throwUnsupportedSyntax],[Lean.Elab.Command.CommandElab]]
[CoeHead.coe,[],[]]
[Function.injective_id,[id],[Function.injective, id]]
[Decidable.not_and,[Decidable.not_and_iff_or_not],[Iff, Not, And, Or]]
[Nat.ne_of_lt,[Nat.not_le_of_lt, Nat.le_refl, Eq.symm],[Ne]]
[String.instInhabitedString,[Inhabited.mk],[Inhabited, String]]
[List.replace,[List, List.nil, Unit.unit, BEq.beq, List.cons, PProd.fst],[List]]
[StateT.run_bind,[of_eq_true, eq_self, Bind.bind],[Eq, StateT.run, Bind.bind, Prod.fst, Prod.snd]]
[OptionT.lift,[OptionT.mk, Bind.bind, Pure.pure, Option.some],[OptionT]]
[Function.inv_fun,[Function.inv_fun_on, Set.univ],[]]
[instHOr,[HOr.mk, OrOp.or],[HOr]]
[readThe,[MonadReaderOf.read],[]]
[String.isPrefix,[List.isPrefix],[]]
[exists_and_distrib_left,[Iff.intro, And, Exists, And.intro, Exists.intro],[Iff, Exists, And]]
[Or.swap,[Or.inr, Or.inl],[Or]]
[Decidable.byContradiction,[Decidable.byCases, id, False.elim],[]]
[RandomGen.noConfusionType,[],[]]
[Nat.lt_or_eq_of_le,[Or.imp_right, Nat.le_antisymm, Nat.lt_or_ge],[Or, LT.lt, Eq]]
[StateRefT'.instMonadExceptOfStateRefT',[MonadExceptOf.mk, Function.comp, StateRefT'.lift, throwThe, tryCatchThe],[MonadExceptOf, StateRefT']]
[Quot.liftBeta,[rfl],[Eq, Quot.lift, Quot.mk]]
[Array.filterM,[Array.foldlM, Bind.bind, ite, Eq, Bool.true, Pure.pure, Array.push, List.toArray, List.nil],[Array]]
[Decidable.iff_not_comm,[Eq.mpr, Eq.refl, Iff, Not, propext, iff_def, And, and_congr, imp_not_comm, Decidable.not_imp_comm],[Iff, Not]]
[instDecidableOr.proof_1,[False],[False]]
[And.left,[],[]]
[strictOr,[or],[Bool]]
[Nat.instTransLeArrowNatArrowNatPropLeArrowNatArrowNatPropLeArrowNatArrowNatProp,[Trans.mk, Nat.instTransLeArrowNatArrowNatPropLeArrowNatArrowNatPropLeArrowNatArrowNatProp.proof_1],[Trans, LE.le]]
[Nat.add_le_of_le_sub_left,[Iff.mp, Nat.not_lt, Iff.mpr, Nat.sub_lt_left_of_lt_add],[LE.le, HAdd.hAdd]]
[DoResultSBC.continue.sizeOf_spec,[Eq.refl, HAdd.hAdd, OfNat.ofNat, SizeOf.sizeOf],[Eq, SizeOf.sizeOf, DoResultSBC.continue, HAdd.hAdd, OfNat.ofNat]]
[UInt32.instRingUInt32.proof_2,[congrArg, UInt32.mk, Ring.gsmul_zero', UInt32.val],[Eq, UInt32.mk, Ring.gsmul, OfNat.ofNat, UInt32.val]]
[instDecidableArrow.proof_1,[],[]]
[liftExcept,[Pure.pure, MonadExcept.throw],[]]
[Prod.lex.proof_1,[WellFounded.intro, Acc, Prod.Lex, WellFoundedRelation.rel, Prod.lexAccessible, WellFounded.apply, WellFoundedRelation.wf],[WellFounded, Prod.Lex, WellFoundedRelation.rel]]
[Nat.sub_self_add,[],[Eq, HSub.hSub, HAdd.hAdd, OfNat.ofNat]]
[subtypeCoe,[CoeHead.mk, Subtype.val],[CoeHead, Subtype]]
[instAddUInt64,[Add.mk, UInt64.add],[Add, UInt64]]
[List.length_append,[of_eq_true, Eq.trans, congr, congrArg, Eq, List.length, List.nil_append, congrFun, HAdd.hAdd, List.length_nil, Nat.zero_add, eq_self, List.cons_append, List.length_cons, HAppend.hAppend, Nat.succ, Nat.succ_add],[Eq, List.length, HAppend.hAppend, HAdd.hAdd]]
[instSubsingleton,[instSubsingleton.proof_1],[Subsingleton]]
[heq_self_iff_true,[iff_true_intro, HEq.rfl],[Iff, HEq, True]]
[Int.instSubInt,[Sub.mk, Int.sub],[Sub, Int]]
[List.eq_or_mem_of_mem_cons,[],[Or, Eq, Mem.mem]]
[Nat.instLinearOrderNat,[LinearOrder.mk, Nat.le_total, inferInstance],[LinearOrder, Nat]]
[ByteArray.forInUnsafe.loop,[ite, LT.lt, Bind.bind, Pure.pure, ByteArray.forInUnsafe.loop, HAdd.hAdd, OfNat.ofNat],[]]
[Function.left_id,[rfl],[Eq, Function.comp, id]]
[Array.setD,[dite, LT.lt, Array.size, Array.set, Fin.mk],[Array]]
[Int.instCommRingInt.proof_5,[Int.sub_eq_add_neg],[Eq, HSub.hSub, HAdd.hAdd, Neg.neg]]
[Ne.intro,[],[Ne]]
[instInhabitedUInt16.proof_1,[of_decide_eq_true, Eq.refl, Bool.true],[LT.lt, OfNat.ofNat, UInt16.size]]
[or_of_or_of_imp_left,[Or.imp_left],[Or]]
[Nat.instTransLtArrowNatArrowNatPropLtArrowNatArrowNatPropLtArrowNatArrowNatProp.proof_1,[Nat.lt_trans],[LT.lt]]
[charToHex,[HAppend.hAppend, hexDigitRepr],[String]]
[Dvd.dvd,[],[]]
[BaseIO.toEIO,[EStateM.Result.error, EStateM.Result, IO.RealWorld, EStateM.Result.ok],[EIO]]
[Quotient.lift₂,[Quotient.lift, Quotient.lift₂.proof_1, Quotient.lift₂.proof_2],[]]
[Semiring.mul_one,[],[Eq, HMul.hMul, OfNat.ofNat]]
[Array.findSomeRevM?,[Array.size, Nat.le_refl, Array.findSomeRevM?.find],[Option]]
[List.findSomeM?,[Unit.unit, Option, Pure.pure, Option.none, Bind.bind, Option.some, PProd.fst],[Option]]
[Task.noConfusionType,[],[]]
[UInt8.toUInt16,[Nat.toUInt16, UInt8.toNat],[UInt16]]
[Fin.mod_eq,[Fin.eq_of_val_eq, Eq.mpr, congrFun, congrArg, Eq, Eq.trans, Fin.val, Fin.modn_def, Nat.mod_mod, Nat.mod_eq_of_lt, Fin.isLt],[Eq, HMod.hMod]]
[Int.natAbs_neg,[Unit.unit, Eq, Int.natAbs, Neg.neg, rfl],[Eq, Int.natAbs, Neg.neg]]
[Subtype.heq_iff_coe_eq,[Iff.trans, heq_iff_eq, Subtype.ext_iff, funext, propext],[Iff, HEq, Eq, Subtype.val]]
[UInt16.complement,[HSub.hSub, OfNat.ofNat, HAdd.hAdd],[UInt16]]
[instLTUInt16,[LT.mk, UInt16.lt],[LT, UInt16]]
[Char.isValidChar_zero,[Or.inl, of_decide_eq_true, Eq.refl, Bool.true],[isValidChar, OfNat.ofNat]]
[«term_>=_»,[Lean.ParserDescr.trailingNode, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.symbol, Lean.ParserDescr.cat],[Lean.TrailingParserDescr]]
[instMonadBaseIO,[inferInstanceAs, Monad, EIO, Empty],[Monad, BaseIO]]
[Decidable.decide,[Bool.false, Bool.true],[Bool]]
[Int.sign_one,[rfl],[Eq, Int.sign, OfNat.ofNat]]
[Ring.toSemiring,[],[Semiring]]
[String.foldlAux,[String.foldlAux.loop],[]]
[Fin.instMulFin,[Mul.mk, Fin.mul],[Mul, Fin]]
[Nat.lt_or_ge,[Unit.unit, Or, LT.lt, GE.ge, Or.inr, Nat.zero_le, Nat.succ, PProd.fst, Or.inl, Nat.le_succ_of_le, Nat.eq_or_lt_of_le, Nat.le_refl],[Or, LT.lt, GE.ge]]
[StateRefT'.run',[Bind.bind, StateRefT'.run, Pure.pure],[]]
[instSemiringFin.proof_5,[Fin.eq_of_val_eq, Eq.mpr, congrFun, congrArg, Eq, Eq.trans, Fin.val, Fin.mul_def, OfNat.ofNat, HMod.hMod, HMul.hMul, Fin.one_def, False.elim, Fin.elim0, Eq.symm, Nat.succ, Nat.lt_or_eq_of_le, Nat.mod_le, of_eq_true, Nat.mul_one, Nat.mod_eq_of_lt, Fin.isLt, eq_self, Eq.refl],[Eq, HMul.hMul, OfNat.ofNat]]
[Monoid.HPow,[HPow.mk, Monoid.npow],[HPow, Nat]]
[instDecidableEqSum.proof_1,[rfl],[Eq, Sum.inl]]
[List.disjoint,[False],[]]
[Function.has_right_inverse,[Exists, Function.right_inverse],[]]
[EStateM.instMonadFinallyEStateM,[MonadFinally.mk, EStateM.Result, Prod, Option.some, EStateM.Result.ok, Prod.mk, EStateM.Result.error, Option.none],[MonadFinally, EStateM]]
[UInt16.ofNatCore,[UInt16.mk, Fin.mk],[UInt16]]
[Nat.lt_add_right,[lt_of_lt_of_le, Nat.le_add_right],[LT.lt, HAdd.hAdd]]
[Char.utf8Size.proof_1,[of_decide_eq_true, Eq.refl, Bool.true],[LT.lt, OfNat.ofNat, UInt32.size]]
[ST.Prim.Ref.modifyGetUnsafe,[Bind.bind, ST.Prim.Ref.take, ST, ST.Prim.Ref.set, Pure.pure],[ST]]
[Bool.or_true,[rfl, Eq.symm, Eq.refl],[Eq, or, Bool.true]]
[Int.negSucc.injEq,[Eq.propIntro, Eq.refl, Int.negSucc, Eq.symm, eq_of_heq, HEq.refl],[Eq, Int.negSucc]]
[lt_iff_not_ge,[Iff.intro, not_le_of_gt, lt_of_not_ge],[Iff, LT.lt, Not, GE.ge]]
[System.FilePath.fileStem,[Option.map, Unit.unit, dite, Eq, Eq.symm, String, String.revPosOf, Char.ofNat, String.extract, OfNat.ofNat, System.FilePath.fileName],[Option, String]]
[Function.left_inverse,[Eq],[]]
[Function.bijective_id,[And.intro, Function.injective_id, Function.surjective_id],[Function.bijective, id]]
[FloatArray.get?,[dite, LT.lt, FloatArray.size, Option.some, FloatArray.get, Fin.mk, Option.none],[Option, Float]]
[List.replicate.loop,[List, PProd.fst, List.cons],[List]]
[or_self_left,[Iff.intro, Or.elim, Or.inl, id, Function.comp, Or.inr],[Iff, Or]]
[Inv.inv,[],[]]
[toLOptionM,[Bind.bind, Pure.pure, Option.toLOption],[Lean.LOption]]
[EStateM.instToStringResult,[ToString.mk, String, HAppend.hAppend, ToString.toString],[ToString, EStateM.Result]]
[List.erase_subset,[Eq.mpr, Eq.refl, Subset.subset, List.erase, List.erase_eq_erasep, List.erasep_subset],[Subset.subset, List.erase]]
[«term_≃_»,[Lean.ParserDescr.trailingNode, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.symbol, Lean.ParserDescr.cat],[Lean.TrailingParserDescr]]
[AddSemigroup.noConfusionType,[],[]]
[HMod.noConfusionType,[],[]]
[UInt32.instSemiringUInt32,[Semiring.mk, UInt32.instSemiringUInt32.proof_1, UInt32.instSemiringUInt32.proof_2, UInt32.mk, Semiring.nsmul, UInt32.val, UInt32.instSemiringUInt32.proof_3, UInt32.instSemiringUInt32.proof_4, UInt32.instSemiringUInt32.proof_5, UInt32.instSemiringUInt32.proof_6, UInt32.instSemiringUInt32.proof_7, UInt32.instSemiringUInt32.proof_8, UInt32.instSemiringUInt32.proof_9, UInt32.instSemiringUInt32.proof_10, UInt32.instSemiringUInt32.proof_11, UInt32.instSemiringUInt32.proof_12, UInt32.instSemiringUInt32.proof_13],[Semiring, UInt32]]
[String.noConfusionType,[],[]]
[Equivalence.symm,[],[]]
[PSum.inr.injEq,[Eq.propIntro, Eq.refl, PSum.inr, Eq.symm, eq_of_heq, HEq.refl],[Eq, PSum.inr]]
[UInt8.instInhabitedFinSize,[Inhabited.mk, Fin.ofNat', OfNat.ofNat, UInt8.size_positive],[Inhabited, Fin, UInt8.size]]
[Nat.min_eq_right,[Eq.mpr, Eq.refl, Eq, Nat.min, Nat.min_comm, Nat.min_eq_left],[Eq, Nat.min]]
[List.concat,[List, List.cons, List.nil, PProd.fst],[List]]
[String.decLt,[List.hasDecidableLt, String.data],[Decidable, LT.lt]]
[Array.toPArray,[Array.toPersistentArray],[Std.PersistentArray]]
[Nat.le_total,[Or, LE.le, Nat.lt_or_ge, Or.inl, Nat.le_of_lt, Or.inr],[Or, LE.le]]
[EIO.toIO,[EStateM.adaptExcept],[IO]]
[Classical.«tacticByCases__:_»,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.nonReservedSymbol, Bool.false, Lean.ParserDescr.const, Lean.ParserDescr.symbol, Lean.ParserDescr.cat],[Lean.ParserDescr]]
[Eq.symm,[rfl],[Eq]]
[List.get,[absurd, Nat.not_lt_zero],[]]
[Quot.recOnSubsingleton,[Quot.rec, Quot.recOnSubsingleton.proof_1],[]]
[instInhabitedReaderT,[Inhabited.mk, arbitrary],[Inhabited, ReaderT]]
[List.toArray,[List.toArrayAux, Array.mkEmpty, List.redLength],[Array]]
[and_iff_left_of_imp,[Iff.intro, And.left, And.intro],[Iff, And]]
[Int.instDivInt,[Div.mk, Int.div],[Div, Int]]
[USize.toUInt32,[Nat.toUInt32, USize.toNat],[UInt32]]
[Nat.eq_one_of_dvd_one,[Nat.le_antisymm, Nat.le_of_dvd, of_decide_eq_true, rfl, Nat.pos_of_dvd_of_pos],[Eq, OfNat.ofNat]]
[SubNegMonoid.sub_eq_add_neg,[],[Eq, HSub.hSub, HAdd.hAdd, Neg.neg]]
[Nat.add_mul_div_right,[Eq.mpr, Eq.refl, Eq, HDiv.hDiv, HAdd.hAdd, HMul.hMul, Nat.mul_comm, Nat.add_mul_div_left, rfl],[Eq, HDiv.hDiv, HAdd.hAdd, HMul.hMul]]
[UInt8.instAddSemigroupUInt8,[AddSemigroup.mk, UInt8.instAddSemigroupUInt8.proof_1],[AddSemigroup, UInt8]]
[instSTWorldEST,[STWorld.mk],[STWorld, EST]]
[Nat.mod.proof_1,[WellFoundedRelation.wf, measure, id],[WellFounded, WellFoundedRelation.rel, measure, id]]
[String.Range.contains,[and, Decidable.decide, LE.le, String.Range.start, LT.lt, String.Range.stop],[Bool]]
[Nat.foldRevM,[Nat.foldRevM.loop],[]]
[SubNegMonoid.toNeg,[],[Neg]]
[List.eraseIdx,[List, List.nil, List.cons, PProd.fst],[List]]
[Nat.instTransLeArrowNatArrowNatPropLeArrowNatArrowNatPropLeArrowNatArrowNatProp.proof_1,[Nat.le_trans],[LE.le]]
[Int.ofNat.injEq,[Eq.propIntro, Eq.refl, Int.ofNat, Eq.symm, eq_of_heq, HEq.refl],[Eq, Int.ofNat]]
[UInt32.toNat,[Fin.val, UInt32.val],[Nat]]
[Subtype.existsOfSubtype.proof_1,[Exists, Exists.intro],[Exists]]
[«term_∘_»,[Lean.ParserDescr.trailingNode, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.symbol, Lean.ParserDescr.cat],[Lean.TrailingParserDescr]]
[not_or,[Iff.intro, And.intro, mt, Or.inl, Or.inr, False, Or.elim],[Iff, Not, Or, And]]
[instHashableOption,[Hashable.mk, Unit.unit, UInt64, OfNat.ofNat, mixHash, Hashable.hash],[Hashable, Option]]
[UInt32.size_positive,[of_decide_eq_true, Eq.refl, Bool.true],[LT.lt, OfNat.ofNat, UInt32.size]]
[List.enum,[List.enumFrom, OfNat.ofNat],[List, Prod, Nat]]
[Nat.eq_zero_of_add_eq_zero_left,[Nat.eq_zero_of_add_eq_zero_right, Nat.add_comm],[Eq, OfNat.ofNat]]
[Option.lt,[Option.none, Option.some, True, False],[]]
[Array.findRevM?,[Array.findSomeRevM?, Bind.bind, Pure.pure, ite, Eq, Bool.true, Option.some, Option.none],[Option]]
[Nat.succ_le_of_lt,[],[LE.le, Nat.succ]]
[List.not_mem_nil,[not_false],[Not, Mem.mem, List.nil]]
[Nat.dvd_add,[Exists.elim, Exists.intro, HAdd.hAdd, of_eq_true, Eq.trans, congr, congrArg, Eq, Nat.left_distrib, eq_self, HMul.hMul],[Dvd.dvd, HAdd.hAdd]]
[Id.instLawfulMonadId.proof_1,[LawfulMonad.mk, rfl],[LawfulMonad, Id]]
[instRandomGenStdGen,[RandomGen.mk, stdRange, stdNext, stdSplit],[RandomGen, StdGen]]
[Subtype.instInhabitedSubtype,[Inhabited.mk, Subtype.mk],[Inhabited, Subtype]]
[List.toArrayAux,[Array, PProd.fst, Array.push],[Array]]
[List.ne_nil_of_length_eq_succ,[],[Ne, List.nil]]
[pow_mul_comm,[of_eq_true, Eq.trans, congr, congrArg, Eq, congrFun, HMul.hMul, HPow.hPow, Nat.zero_eq, pow_zero, one_mul, mul_one, eq_self, pow_succ', mul_assoc],[Eq, HMul.hMul, HPow.hPow]]
[Subtype.forall',[Iff.symm, Subtype.forall],[Iff, Subtype.val, Subtype.property]]
[Nat.mul_mod_mul_left,[dite, Eq, OfNat.ofNat, Eq.mpr, Eq.refl, HMod.hMod, HMul.hMul, Nat.mul_zero, Nat.mod_zero, rfl, Nat.zero_mul, Nat.strong_rec_on],[Eq, HMod.hMod, HMul.hMul]]
[xor_self,[of_eq_true, Eq.trans, congrFun, congrArg, Eq, congr, Or, eq_false, and_not_self, eq_false_of_decide, Eq.refl, Bool.false, False, eq_true_of_decide, Bool.true],[Eq, xor, False]]
[iff_def',[Iff.trans, iff_def, And.comm],[Iff, And]]
[List.isSuffix,[Exists, Eq, HAppend.hAppend],[]]
[Int.instCommRingInt.proof_7,[Eq.mpr, Eq.refl, Eq, HMul.hMul, Int.negSucc, Int.ofNat, Neg.neg, Nat.succ, Int.negSucc_ofNat_ofNat, Int.negOfNat, Int.ofNat_mul_ofNat, rfl, Eq.symm, Int.mul_negSucc_ofNat_negSucc_ofNat, Int.ofNat_mul_negSucc_ofNat],[Eq, HMul.hMul, Int.negSucc, Neg.neg, Int.ofNat, Nat.succ]]
[Fin.mul.proof_1,[LT.lt, HMod.hMod, Nat.mod_lt],[LT.lt, HMod.hMod, HMul.hMul]]
[bind_pure_unit,[Eq.mpr, Eq.refl, Eq, Bind.bind, Pure.pure, PUnit.unit, bind_pure, rfl],[Eq, Bind.bind, Pure.pure, PUnit.unit]]
[instHModUInt16NatUInt16,[HMod.mk, UInt16.modn],[HMod, UInt16, Nat]]
[instMulUInt16,[Mul.mk, UInt16.mul],[Mul, UInt16]]
[Nat.lt_wfRel,[WellFoundedRelation.mk, Nat.lt, Nat.lt_wfRel.proof_1],[WellFoundedRelation, Nat]]
[implies_congr,[rfl],[Eq]]
[Nat.coprime,[Eq, Nat.gcd, OfNat.ofNat],[]]
[instInhabitedProp,[Inhabited.mk, True],[Inhabited]]
[Fin.lor.proof_1,[LT.lt, HMod.hMod, Nat.mod_lt],[LT.lt, HMod.hMod, Nat.lor]]
[USize.instSemiringUSize,[Semiring.mk, USize.instSemiringUSize.proof_1, USize.instSemiringUSize.proof_2, USize.mk, Semiring.nsmul, USize.val, USize.instSemiringUSize.proof_3, USize.instSemiringUSize.proof_4, USize.instSemiringUSize.proof_5, USize.instSemiringUSize.proof_6, USize.instSemiringUSize.proof_7, USize.instSemiringUSize.proof_8, USize.instSemiringUSize.proof_9, USize.instSemiringUSize.proof_10, USize.instSemiringUSize.proof_11, USize.instSemiringUSize.proof_12, USize.instSemiringUSize.proof_13],[Semiring, USize]]
[StateT.run_modify,[rfl],[Eq, StateT.run, modify, Pure.pure, Prod.mk, PUnit.unit]]
[Quotient.hrecOn,[Quot.hrecOn],[]]
[instMonadWithReaderOfReaderT,[MonadWithReaderOf.mk],[MonadWithReaderOf, ReaderT]]
[Nat.mod_le,[LE.le, HMod.hMod, Nat.lt_or_ge, Eq.mpr, Eq.refl, Nat.mod_eq_of_lt, Nat.le_refl, Nat.eq_zero_or_pos, OfNat.ofNat, Nat.mod_zero, Nat.le_trans, Nat.le_of_lt, Nat.mod_lt],[LE.le, HMod.hMod]]
[Int.negOfNat,[Unit.unit, Int, OfNat.ofNat, Int.negSucc],[Int]]
[instDecidableLe_1,[UInt8.decLe],[Decidable, LE.le]]
[Int.distrib_right,[of_eq_true, Eq.trans, congrFun, congrArg, Eq, Int.mul_comm, HAdd.hAdd, Int.distrib_left, congr, HMul.hMul, eq_self],[Eq, HMul.hMul, HAdd.hAdd]]
[Set.inter,[setOf, And, Mem.mem],[Set]]
[Array.get?,[dite, LT.lt, Array.size, Option.some, Array.get, Fin.mk, Option.none],[Option]]
[ExceptCpsT.run_lift,[rfl],[Eq, ExceptCpsT.run, ExceptCpsT.lift, Bind.bind, Pure.pure, Except.ok]]
[USize.div,[USize.mk, HDiv.hDiv, USize.val],[USize]]
[instHashableString,[Hashable.mk, String.hash],[Hashable, String]]
[exists_and_distrib_right,[of_eq_true, Eq.trans, congr, congrArg, Iff, Exists, funext, propext, and_comm, exists_and_distrib_left, iff_self, And],[Iff, Exists, And]]
[GroupWithZero.exists_pair_ne,[],[Exists, Ne]]
[USize.val_eq_of_lt,[Fin.val_eq_of_lt],[Eq, Fin.val, USize.val, USize.ofNat]]
[StateT.instMonadStateT,[Monad.mk],[Monad, StateT]]
[and_symm_left,[Iff.intro, And, Eq, And.intro, Eq.symm],[Iff, And, Eq]]
[instInhabitedOption,[Inhabited.mk, Option.none],[Inhabited, Option]]
[Int.sub,[HAdd.hAdd, Neg.neg],[Int]]
[UInt16.instSemiringUInt16.proof_9,[rfl],[Eq, OfNat.ofNat]]
[Nat.lt_wfRel.proof_1,[WellFounded.intro, Acc.intro, OfNat.ofNat, absurd, Nat.not_lt_zero, Nat.succ],[WellFounded, Nat.lt]]
[inv_mul_cancel_left,[Eq.mpr, Eq.refl, Eq, HMul.hMul, Inv.inv, Eq.symm, mul_assoc, mul_left_inv, OfNat.ofNat, one_mul, rfl],[Eq, HMul.hMul, Inv.inv]]
[Function.injective_of_partial_inv_right,[Eq.trans, Eq.symm, Iff.mp],[Eq]]
[List.append_eq_has_append,[rfl],[Eq, List.append, HAppend.hAppend]]
[Command.simpsRule,[Lean.ParserDescr.nodeWithAntiquot, Lean.Name.mkStr, Lean.Name.anonymous, Lean.ParserDescr.binary, Command.simpsRule.rename, Command.simpsRule.erase, Lean.ParserDescr.unary, Lean.ParserDescr.nonReservedSymbol, Bool.false],[Lean.ParserDescr]]
[Subtype.mk.sizeOf_spec,[Eq.refl, HAdd.hAdd, OfNat.ofNat, SizeOf.sizeOf],[Eq, SizeOf.sizeOf, Subtype.mk, HAdd.hAdd, OfNat.ofNat]]
[Mathlib.Tactic.Lint.simpVarHead,[Mathlib.Tactic.Lint.Linter.mk, Bind.bind, Mathlib.Tactic.Lint.isSimpLemma, ite, Eq, Bool.true, Pure.pure, PUnit.unit, Option.none, Function.comp, Lean.MessageData.ofFormat, Std.ToFormat.format],[Mathlib.Tactic.Lint.Linter]]
[Alternative.noConfusionType,[],[]]
[Int.subNatNat_add_left,[],[Eq, Int.subNatNat, HAdd.hAdd, Int.ofNat]]
[Fin.decLt,[Nat.decLt, Fin.val],[Decidable, LT.lt]]
[not_imp_comm,[Decidable.not_imp_comm],[Iff]]
[ST.Ref.swap,[liftM, ST.Prim.Ref.swap],[]]
[Subarray.allM,[Array.allM, Subarray.as, Subarray.start, Subarray.stop],[Bool]]
[lt_or_gt_of_ne,[Or, LT.lt, GT.gt, lt_trichotomy, Or.inl, absurd, Or.inr],[Or, LT.lt, GT.gt]]
[instDivUInt64,[Div.mk, UInt64.div],[Div, UInt64]]
[Quotient.ind₂,[Quotient.ind],[]]
[UInt16.decLt,[Decidable, LT.lt, inferInstanceAs],[Decidable, LT.lt]]
[Nonempty.elim,[Nonempty.elim.proof_1],[]]
[instCommMonoid_1,[CommMonoid.mk, CommSemiring.mul_comm],[CommMonoid]]
[StateCpsT.instMonadStateCpsT,[Monad.mk],[Monad, StateCpsT]]
[Iff.elim.proof_1,[Iff.mp, Iff.mpr],[]]
[Array.instForInArray,[ForIn.mk, Array.forIn],[ForIn, Array]]
[ExceptT,[Except],[]]
[Mul.noConfusionType,[],[]]
[ShiftLeft.noConfusionType,[],[]]
[Functor.discard,[Functor.mapConst, PUnit.unit],[PUnit]]
[Function.update_comp_eq_of_forall_ne',[funext, Function.update_noteq],[Eq, Function.update]]
[Fin.modn.proof_1,[LT.lt, HMod.hMod, Nat.mod_lt],[LT.lt, HMod.hMod]]
[Substring.bsize,[Nat, Nat.sub],[Nat]]
[plift.down_up,[rfl],[Eq, plift.down, plift.up]]
[Fin.decLe,[Nat.decLe, Fin.val],[Decidable, LE.le]]
[lt_iff_le_not_le,[Preorder.lt_iff_le_not_le],[Iff, LT.lt, And, LE.le, Not]]
[UInt32.mul_def,[rfl],[Eq, HMul.hMul, UInt32.mk, UInt32.val]]
[UInt16.neg_def,[rfl],[Eq, Neg.neg, UInt16.mk, UInt16.val]]
[List.length,[Unit.unit, Nat, OfNat.ofNat, HAdd.hAdd, PProd.fst],[Nat]]
[Substring.noConfusionType,[],[]]
[non_contradictory_intro,[absurd],[Not]]
[StateRefT'.set,[ST.Ref.set],[StateRefT', PUnit]]
[Array.forIn,[Array.size, Nat.le_refl, Array.forIn.loop],[]]
[instInhabitedUInt8.proof_1,[of_decide_eq_true, Eq.refl, Bool.true],[LT.lt, OfNat.ofNat, UInt8.size]]
[exists₃_congr,[exists_congr, exists₂_congr],[Iff, Exists]]
[Array.instInhabitedArray,[Inhabited.mk, Array.empty],[Inhabited, Array]]
[Array.filterSepElemsM,[OfNat.ofNat, List.toArray, List.nil],[Array, Lean.Syntax]]
[UInt64.neg_def,[rfl],[Eq, Neg.neg, UInt64.mk, UInt64.val]]
[not_imp_not,[Decidable.not_imp_not],[Iff, Not]]
[coeFun,[CoeFun.coe],[]]
[Fin.mod,[Fin, Fin.mk, HMod.hMod, Fin.mod.proof_1],[Fin]]
[instDecidableEqProd.proof_1,[rfl],[Eq, Prod.mk]]
[Nat.sub_lt_of_pos_le,[Nat.sub_lt, lt_of_lt_of_le],[LT.lt, HSub.hSub]]
[ByteArray.toList,[OfNat.ofNat, List.nil, ByteArray.toList.loop],[List, UInt8]]
[Array.getEvenElems,[Prod.snd, Array.foldl, Prod, Bool, Array, ite, Eq, Bool.true, Prod.mk, Bool.false, Array.push, Array.empty, OfNat.ofNat, Array.size],[Array]]
[List.mem_reverseAux,[Iff, Mem.mem, List.reverseAux, Or, of_eq_true, Eq.trans, congrArg, congrFun, propext, List.mem_nil_iff, false_or, iff_self, Eq.mpr, congr, PProd.fst, List.cons, List.mem_cons_iff, Eq.refl, Eq, Eq.symm, or_assoc, or_comm, Iff.rfl],[Iff, Mem.mem, List.reverseAux, Or]]
[Nat.mul_div_right,[of_eq_true, Eq.trans, congr, congrArg, Eq, congrFun, HDiv.hDiv, HMul.hMul, Nat.zero_eq, Nat.mul_zero, Nat.zero_div, eq_true_of_decide, Eq.refl, Bool.true, Nat.mul_succ, Nat.add_div_right, eq_true, Nat.succ, eq_self],[Eq, HDiv.hDiv, HMul.hMul]]
[System.FilePath.toString,[],[String]]
[instToStringFloatArray,[ToString.mk, List.toString, FloatArray.toList],[ToString, FloatArray]]
[List.removeAll,[List.filter, List.notElem],[List]]
[apply_ite,[apply_dite],[Eq, ite]]
[NeqIffBeqFalse,[Iff.intro, decide_eq_false, of_decide_eq_false],[Iff, Ne, Eq, BEq.beq, Bool.false]]
[instDecidableAnd.proof_1,[And.right],[False]]
[instSemiringFin.proof_6,[Eq.mpr, Eq.refl, Eq, HAdd.hAdd, OfNat.ofNat, add_comm, instSemiringFin.proof_1],[Eq, HAdd.hAdd, OfNat.ofNat]]
[instBEqOrdering,[BEq.mk, BEq.beq, Ordering.toCtorIdx],[BEq, Ordering]]
[Array.eraseIdx,[ite, LT.lt, Array.size, Array.eraseIdxAux, HAdd.hAdd, OfNat.ofNat],[Array]]
[Quotient.recOnSubsingleton₂.proof_1,[Quot.recOnSubsingleton],[Subsingleton, Quot.mk, Setoid.r]]
[Command.simpsRule.rename,[Lean.ParserDescr.nodeWithAntiquot, Lean.Name.mkStr, Lean.Name.anonymous, Lean.ParserDescr.binary, Lean.ParserDescr.const, Lean.ParserDescr.symbol],[Lean.ParserDescr]]
[bne,[not, BEq.beq],[Bool]]
[AddCommGroup.add_comm,[],[Eq, HAdd.hAdd]]
[Int.mul_comm,[Eq, HMul.hMul, of_eq_true, Eq.trans, congr, congrArg, Int.ofNat_mul_ofNat, Int.ofNat, Nat.mul_comm, eq_self, Eq.symm, Int.ofNat_mul_negSucc_ofNat, Int.negSucc_ofNat_ofNat, Int.negOfNat, Nat.succ, Eq.refl, Int.mul_negSucc_ofNat_negSucc_ofNat],[Eq, HMul.hMul]]
[forall_congr',[Iff.intro, Iff.mp, Iff.mpr],[Iff]]
[MonadLiftT.monadLift,[],[]]
[HEq.noConfusionType,[],[]]
[Inv.noConfusionType,[],[]]
[Fin.lor,[Fin, Fin.mk, HMod.hMod, Nat.lor, Fin.lor.proof_1],[Fin]]
[Prod.fst_surjective,[Nonempty.elim, Exists.intro, Prod.mk, rfl],[Function.surjective, Prod.fst]]
[Or.resolve_left,[Or.elim, absurd, id],[]]
[«termΣ'_,_»,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.symbol, Lean.explicitBinders, Lean.ParserDescr.cat],[Lean.ParserDescr]]
[Subtype.property,[],[Subtype.val]]
[Prod.mk.inj,[And.intro],[And, Eq]]
[String.Iterator.hasNext,[Bool, Decidable.decide, LT.lt, String.utf8ByteSize],[Bool]]
[PSigma.fst,[],[]]
[«term_∨_»,[Lean.ParserDescr.trailingNode, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.symbol, Lean.ParserDescr.cat],[Lean.TrailingParserDescr]]
[Array.foldrM.fold.proof_2,[Nat.le_of_lt, Nat.lt_of_lt_of_le, Nat.lt_succ_self],[LE.le, Array.size]]
[instMonadWithReaderOf,[MonadWithReaderOf.mk, MonadFunctorT.monadMap, withTheReader],[MonadWithReaderOf]]
[Nat.add_mul_mod_self_right,[Eq.mpr, Eq.refl, Eq, HMod.hMod, HAdd.hAdd, HMul.hMul, Nat.mul_comm, Nat.add_mul_mod_self_left, rfl],[Eq, HMod.hMod, HAdd.hAdd, HMul.hMul]]
[add_assoc,[AddSemigroup.add_assoc],[Eq, HAdd.hAdd]]
[Nat.le_of_sub_eq_zero,[Nat.zero, Nat.succ, LE.le, of_eq_true, Eq.trans, congrFun, congrArg, Eq.mp, Eq.refl, Eq, HSub.hSub, OfNat.ofNat, Nat.sub_zero, eq_true_of_decide, Bool.true, Nat.zero_le, HAdd.hAdd, Nat.add_le_add_right, PProd.fst, Nat.add_sub_add_right],[LE.le]]
[Nat.dvd_iff_mod_eq_zero,[Iff.intro, Nat.mod_eq_zero_of_dvd, Nat.dvd_of_mod_eq_zero],[Iff, Dvd.dvd, Eq, HMod.hMod, OfNat.ofNat]]
[le_refl,[Preorder.le_refl],[LE.le]]
[Bool.true_and,[rfl, Eq.symm, Eq.refl],[Eq, and, Bool.true]]
[Nat.gcd_eq_left_iff_dvd,[Iff.intro, Eq.mpr, Eq.refl, Eq, Nat.gcd, Nat.gcd_rec, HMod.hMod, Nat.mod_eq_zero_of_dvd, OfNat.ofNat, Nat.gcd_zero_left, rfl, Nat.gcd_dvd_right],[Iff, Dvd.dvd, Eq, Nat.gcd]]
[EIO.toIO',[liftM, EIO.toBaseIO],[IO, Except]]
[Nat.gcd.induction,[WellFounded.induction, WellFoundedRelation.wf, Nat.lt_wfRel, HAdd.hAdd, OfNat.ofNat, Nat.succ_pos, HMod.hMod, Nat.mod_lt],[]]
[Array.findSomeRevM?.find.proof_1,[Nat.lt_of_lt_of_le, Nat.lt_succ_self],[LT.lt, Array.size]]
[DoResultPRBC.return.sizeOf_spec,[Eq.refl, HAdd.hAdd, OfNat.ofNat, SizeOf.sizeOf],[Eq, SizeOf.sizeOf, DoResultPRBC.return, HAdd.hAdd, OfNat.ofNat]]
[UInt32.instSemiringUInt32.proof_10,[rfl],[Eq, Nat.succ]]
[Function.right_inverse.injective,[Function.left_inverse.injective, Function.right_inverse.left_inverse],[Function.injective]]
[Classical.byCases,[Decidable.byCases],[]]
[Nat.min_zero,[min_eq_right, Nat.zero_le],[Eq, Nat.min, OfNat.ofNat]]
[instDecidableEqProd.proof_3,[absurd],[False]]
[iff_def,[iff_iff_implies_and_implies],[Iff, And]]
[Array.ext.extAux,[rfl, Eq.symm, Eq.mp, Eq.refl, Eq, List.length, List.nil, List.cons, List.length_cons],[Eq]]
[HasEquiv.Equiv,[],[]]
[MonadControl.noConfusionType,[],[]]
[Ordering.eq.sizeOf_spec,[Eq.refl, OfNat.ofNat],[Eq, SizeOf.sizeOf, Ordering.eq, OfNat.ofNat]]
[gt_of_gt_of_ge,[lt_of_le_of_lt],[GT.gt]]
[BaseIO,[EIO, Empty],[]]
[Nat.gcd_gcd_self_left_left,[Eq.mpr, Eq.refl, Eq, Nat.gcd, Nat.gcd_comm, Nat.gcd_gcd_self_left_right, rfl],[Eq, Nat.gcd]]
[Nat.forRevM.loop,[Unit.unit, Unit, Pure.pure, Bind.bind, PProd.fst],[Unit]]
[ne_true_of_not,[],[Ne, True]]
[mul_right_cancel_iff,[Iff.intro, mul_right_cancel, rfl],[Iff, Eq, HMul.hMul]]
[instDecidableEqProd,[Decidable, Eq, Prod.mk, decEq, Decidable.isTrue, instDecidableEqProd.proof_1, Decidable.isFalse, instDecidableEqProd.proof_2, instDecidableEqProd.proof_3],[DecidableEq, Prod]]
[List.format,[Unit.unit, List.cons, Std.Format, Std.Format.text, Std.Format.sbracket, Std.Format.joinSep, HAppend.hAppend, Std.Format.line],[Std.Format]]
[Int.add_right_neg,[Eq.mpr, Eq.refl, Eq, HAdd.hAdd, Neg.neg, OfNat.ofNat, Int.add_comm, Int.add_left_neg, rfl],[Eq, HAdd.hAdd, Neg.neg, OfNat.ofNat]]
[StateCpsT.runK_bind_lift,[rfl],[Eq, StateCpsT.runK, Bind.bind, StateCpsT.lift]]
[UInt64.decEq.proof_2,[absurd],[False]]
[Nat.mul_dvd_mul_left,[Nat.mul_dvd_mul, Nat.dvd_refl],[Dvd.dvd, HMul.hMul]]
[Prod.fst_injective,[Prod.ext', Subsingleton.elim, Prod.snd],[Function.injective, Prod.fst]]
[List.forM_nil,[rfl],[Eq, ForM.forM, List.nil, Pure.pure, PUnit.unit]]
[instSubsingletonPUnit,[Subsingleton.intro, PUnit.subsingleton],[Subsingleton, PUnit]]
[USize.lt,[LT.lt, USize.val],[]]
[add_right_eq_self,[Eq.mpr, Eq.refl, Iff, Eq, HAdd.hAdd, OfNat.ofNat, Eq.symm, propext, add_left_cancel_iff, add_zero, Iff.rfl],[Iff, Eq, HAdd.hAdd, OfNat.ofNat]]
[List.decidableMem.proof_2,[Or.inr],[Or, Eq, List.mem]]
[instSubsingletonStateM,[instSubsingletonStateM.proof_1],[Subsingleton, StateM]]
[Function.surjective,[Exists, Eq],[]]
[Function.const_apply,[rfl],[Eq, Function.const]]
[Tactic.Ring.evalHorner,[Tactic.Ring.HornerExpr.const, Tactic.Ring.HornerExpr.xadd, Tactic.Ring.RingM, Prod, Tactic.Ring.HornerExpr, Lean.Expr, ite, Eq, OfNat.ofNat, Bind.bind, Tactic.Ring.mkAppCS, Lean.Name.mkStr, Lean.Name.anonymous, List.toArray, List.cons, Prod.fst, Tactic.Ring.HornerExpr.e, List.nil, Pure.pure, Prod.mk, Tactic.Ring.HornerExpr.xadd', Tactic.Ring.HornerExpr.reflConv, And, Prod.snd, Lean.Expr.numeral?, Option.some, Lean.mkRawNatLit, HAdd.hAdd, liftM, Lean.Meta.mkEqRefl],[Tactic.Ring.RingM, Prod, Tactic.Ring.HornerExpr, Lean.Expr]]
[AndThen.noConfusionType,[],[]]
[OptionT.instAlternativeOptionT,[Alternative.mk, OptionT.fail, OptionT.orElse],[Alternative, OptionT]]
[decidable_eq_inl_refl,[Eq, Decidable.isTrue, Eq.refl, rfl, absurd],[Eq, Decidable.isTrue, Eq.refl]]
[Fin.mul,[Fin, Fin.mk, HMod.hMod, HMul.hMul, Fin.mul.proof_1],[Fin]]
[Command.initializeSimpsProjections,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.symbol, Lean.ParserDescr.unary, Lean.ParserDescr.const, Command.simpsProj],[Lean.ParserDescr]]
[instReprNat,[Repr.mk, Std.Format.text, Nat.repr],[Repr, Nat]]
[Tactic.Ring.const_add_horner,[of_eq_true, Eq.trans, congr, congrArg, Eq, add_comm, HAdd.hAdd, HMul.hMul, HPow.hPow, add_assoc, Eq.symm, eq_self],[Eq, HAdd.hAdd, Tactic.Ring.horner]]
[StateT.run_seqRight,[],[Eq, StateT.run, SeqRight.seqRight, Bind.bind, Prod.snd]]
[ReaderT.run_map,[rfl],[Eq, ReaderT.run, Functor.map]]
[instHashableUInt64,[Hashable.mk],[Hashable, UInt64]]
[CommRing.toRing,[],[Ring]]
[Subtype.ext_iff,[Iff.intro, congrArg, Subtype.val, Subtype.ext],[Iff, Eq, Subtype.val]]
[UInt8.toNat,[Fin.val, UInt8.val],[Nat]]
[Tactic.Ring.addAtom,[Bind.bind, MonadState.get, ForIn.forIn, MProd.mk, Option.none, PUnit.unit, liftM, Lean.Meta.isDefEq, Array.getOp, Tactic.Ring.State.atoms, ite, Eq, Bool.true, Pure.pure, ForInStep.done, Option.some, ForInStep.yield, Unit.unit, Tactic.Ring.RingM, Nat, MProd.fst],[Tactic.Ring.RingM, Nat]]
[Nat.case_strong_rec_on,[Nat.strong_rec_on, Nat.lt_succ_of_le],[]]
[throwThe,[MonadExceptOf.throw],[]]
[List.mem_insert_of_mem,[Iff.mpr, List.mem_insert_iff, Or.inr],[Mem.mem, List.insert]]
[Prod.map_def,[funext, of_eq_true, Eq.trans, forall_congr, congrFun, congrArg, Eq, prod_map, Prod.mk, Prod.fst, Prod.snd, eq_self, propext, implies_true_iff, Prod],[Eq, Prod.map, Prod.mk, Prod.fst, Prod.snd]]
[Fin.instDivFin,[Div.mk, Fin.div],[Div, Fin]]
[List.toAssocList,[Unit.unit, Std.AssocList, Std.AssocList.nil, Std.AssocList.cons, PProd.fst],[Std.AssocList]]
[Semiring.ofNat_succ,[],[Eq, Numeric.ofNat, HAdd.hAdd, OfNat.ofNat]]
[Monoid.npow,[],[]]
[Nat.sub_lt_succ,[Nat.lt_succ_of_le, Nat.sub_le],[LT.lt, HSub.hSub, Nat.succ]]
[UInt32.mod,[UInt32.mk, HMod.hMod, UInt32.val],[UInt32]]
[PSigma.mkSkipLeft,[PSigma.mkSkipLeft.proof_1],[PSigma.SkipLeft, PSigma.mk]]
[Bool.true_or,[rfl, Eq.symm, Eq.refl],[Eq, or, Bool.true]]
[EST,[EStateM],[]]
[Function.update,[dite, Eq, Eq.symm],[]]
[USize.shiftRight,[USize.mk, HShiftRight.hShiftRight, USize.val, USize.modn, System.Platform.numBits],[USize]]
[Nat.coprime.pow_right,[Nat.coprime.symm, Nat.coprime.pow_left],[Nat.coprime, HPow.hPow]]
[Nat.mod.inductionOn,[Nat.div.inductionOn],[]]
[Except.error.sizeOf_spec,[Eq.refl, HAdd.hAdd, OfNat.ofNat, SizeOf.sizeOf],[Eq, SizeOf.sizeOf, Except.error, HAdd.hAdd, OfNat.ofNat]]
[eq_true_of_ne_false,[Eq, Bool.true, rfl, False.elim],[Eq, Bool.true]]
[Tactic.Ring.RingM,[ReaderT, Tactic.Ring.Cache, StateRefT', IO.RealWorld, Tactic.Ring.State, Lean.Meta.MetaM],[]]
[Nat.instCommSemiringNat.proof_2,[of_eq_true, Eq.trans, congr, congrArg, Eq, Nat.pow_succ, Nat.mul_comm, HPow.hPow, eq_self, HMul.hMul],[Eq, HPow.hPow, Nat.succ, HMul.hMul]]
[Subset.noConfusionType,[],[]]
[String.Range.toLspRange,[Lean.Lsp.Range.mk, Lean.FileMap.utf8PosToLspPos, String.Range.start, String.Range.stop],[Lean.Lsp.Range]]
[instDecidableEqQuotient.proof_2,[absurd, Quotient.exact],[False]]
[AddMonoid.toZero,[],[Zero]]
[Array.getIdx?,[Array.findIdx?, BEq.beq],[Option, Nat]]
[forall_prop_decidable.proof_2,[absurd],[]]
[UInt16.instSemiringUInt16.proof_13,[UInt16.eq_of_val_eq, Eq.mpr, congrArg, Eq, Fin.ofNat', HAdd.hAdd, OfNat.ofNat, Fin.size_positive', UInt16.val, Eq.trans, UInt16.mk, UInt16.one_def, UInt16.add_def],[Eq, Numeric.ofNat, HAdd.hAdd, OfNat.ofNat]]
[rawNatLit,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.symbol, Lean.ParserDescr.const],[Lean.ParserDescr]]
[List.headD,[],[]]
[UInt8.instRingUInt8.proof_5,[UInt8.eq_of_val_eq, of_eq_true, Eq.trans, congr, congrArg, Eq, UInt8.val, congrFun, HAdd.hAdd, UInt8.neg_def, UInt8.add_def, UInt8.mk, Neg.neg, add_left_neg, UInt8.zero_def, eq_true_of_decide, Eq.refl, Bool.true],[Eq, HAdd.hAdd, Neg.neg, OfNat.ofNat]]
[Nat.sub_succ,[rfl],[Eq, HSub.hSub, Nat.succ, Nat.pred]]
[ST.Ref.get,[liftM, ST.Prim.Ref.get],[]]
[List.mapIdxM.loop,[List, Pure.pure, List.nil, Seq.seq, Functor.map, List.cons, PProd.fst, HAdd.hAdd, OfNat.ofNat],[List]]
[instToStringFormat,[ToString.mk, Std.Format.pretty, Std.Format.defWidth],[ToString, Std.Format]]
[List.product_spec,[Iff.intro, Eq.mpr, Eq.trans, implies_congr, propext, List.mem_bind, congrArg, Exists, funext, And, Mem.mem, List.mem_map, Prod.mk.injEq, exists_eq_right_right', Eq.refl, and_imp, And.intro, id],[Iff, Mem.mem, Prod.mk, List.product, And]]
[List.isPrefixOf,[List.nil, List.cons, Bool, Bool.true, Bool.false, and, BEq.beq, PProd.fst],[Bool]]
[instInhabitedPUnit,[Inhabited.mk, PUnit.unit],[Inhabited, PUnit]]
[List.mem_append_left,[Iff.mpr, List.mem_append, Or.inl],[Mem.mem, HAppend.hAppend]]
[instSubUInt64,[Sub.mk, UInt64.sub],[Sub, UInt64]]
[CommMonoid.toMonoid,[],[Monoid]]
[Fin.instSubFin,[Sub.mk, Fin.sub],[Sub, Fin]]
[Nat.add_right_cancel,[Nat.add_left_cancel, Eq.mp, Eq.refl, Eq, HAdd.hAdd, Nat.add_comm],[Eq]]
[DoResultSBC.pureReturn.sizeOf_spec,[Eq.refl, HAdd.hAdd, OfNat.ofNat, SizeOf.sizeOf],[Eq, SizeOf.sizeOf, DoResultSBC.pureReturn, HAdd.hAdd, OfNat.ofNat]]
[Array.map,[Id.run, Array.mapM],[Array]]
[Nat.zero_min,[min_eq_left, Nat.zero_le],[Eq, Nat.min, OfNat.ofNat]]
[UInt8.instSemiringUInt8.proof_5,[of_eq_true, Eq.trans, forall_congr, congr, congrArg, Eq, congrFun, HMul.hMul, UInt8.zero_def, UInt8.mul_def, UInt8.mk, OfNat.ofNat, MonoidWithZero.zero_mul, UInt8.val, eq_true_of_decide, Eq.refl, Bool.true, propext, forall_const, UInt8],[Eq, HMul.hMul, OfNat.ofNat]]
[Repr.noConfusionType,[],[]]
[String.Range.noConfusionType,[],[]]
[instShiftLeftUInt8,[ShiftLeft.mk, UInt8.shiftLeft],[ShiftLeft, UInt8]]
[Nat.coprime.gcd_mul,[Nat.dvd_antisymm, Nat.gcd_mul_dvd_mul_gcd, Nat.coprime.mul_dvd_of_dvd_of_dvd, Nat.coprime.gcd_both, Nat.gcd_dvd_gcd_mul_right_right, Nat.gcd_dvd_gcd_mul_left_right],[Eq, Nat.gcd, HMul.hMul]]
[Subarray.popFront,[dite, LT.lt, Subarray.start, Subarray.stop, Subarray.mk, Subarray.as, HAdd.hAdd, OfNat.ofNat, Subarray.popFront.proof_1, Subarray.h₂],[Subarray]]
[or_iff_not_imp_right,[Decidable.or_iff_not_imp_right],[Iff, Or]]
[Array.mapIdxM.map.proof_2,[Eq.mpr, Eq.refl, Eq, HAdd.hAdd, OfNat.ofNat, Array.size, Eq.symm, Nat.add_comm, Nat.add_assoc, rfl],[Eq, HAdd.hAdd, OfNat.ofNat, Array.size]]
[List.ibelow,[True, And],[]]
[Int.negSucc.sizeOf_spec,[Eq.refl, HAdd.hAdd, OfNat.ofNat, SizeOf.sizeOf],[Eq, SizeOf.sizeOf, Int.negSucc, HAdd.hAdd, OfNat.ofNat]]
[Nat.zero_lt_succ,[Nat.succ_le_succ, Nat.zero_le],[LT.lt, OfNat.ofNat, Nat.succ]]
[OptionT.pure,[OptionT.mk, Pure.pure, Option.some],[OptionT]]
[«term_<=_»,[Lean.ParserDescr.trailingNode, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.symbol, Lean.ParserDescr.cat],[Lean.TrailingParserDescr]]
[instDecidableTrue,[Decidable.isTrue, trivial],[Decidable, True]]
[Char.ofNat.proof_2,[Or.inl, of_decide_eq_true, Eq.refl, Bool.true],[Or, LT.lt, UInt32.toNat, UInt32.mk, Fin.mk, OfNat.ofNat, of_decide_eq_true, Eq.refl, Bool.true, And]]
[precMax,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.nonReservedSymbol, Bool.false],[Lean.ParserDescr]]
[List.eq_of_mem_singleton,[Or.elim, List.eq_or_mem_of_mem_cons, absurd, List.not_mem_nil],[Eq]]
[List.map_append,[of_eq_true, Eq.trans, congr, congrArg, Eq, List.map, List.nil_append, congrFun, HAppend.hAppend, List.map_nil, eq_self, List.cons_append, List.map_cons, List.cons],[Eq, List.map, HAppend.hAppend]]
[StdGen.s1,[],[Nat]]
[instHashableUInt16,[Hashable.mk, UInt16.toUInt64],[Hashable, UInt16]]
[Array.findSome?,[Id.run, Array.findSomeM?],[Option]]
[ReaderT.run_bind,[rfl],[Eq, ReaderT.run, Bind.bind]]
[Int.ofNat_mul,[rfl],[Eq, Int.ofNat, HMul.hMul]]
[fix1,[fixCore1, arbitrary],[]]
[instMonadExceptOfExceptT_1,[MonadExceptOf.mk, ExceptT.mk, Pure.pure, Except.error, ExceptT.tryCatch],[MonadExceptOf, ExceptT]]
[Array.all,[Id.run, Array.allM],[Bool]]
[fixCore,[fixCore1],[]]
[«term_↔_»,[Lean.ParserDescr.trailingNode, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.symbol, Lean.ParserDescr.cat],[Lean.TrailingParserDescr]]
[ExceptT.run_throw,[rfl],[Eq, ExceptT.run, MonadExcept.throw, Pure.pure, Except.error]]
[termPrintln!__,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.symbol, Lean.ParserDescr.unary, Lean.ParserDescr.cat],[Lean.ParserDescr]]
[ByteArray.toSlice,[ByteSlice.mk, OfNat.ofNat, ByteArray.size],[ByteSlice]]
[instOrdNat,[Ord.mk, compareOfLessAndEq],[Ord, Nat]]
[panicWithPos,[panic, HAppend.hAppend, ToString.toString],[]]
[Nat.coprime.coprime_div_right,[Nat.coprime.symm, Nat.coprime.coprime_div_left],[Nat.coprime, HDiv.hDiv]]
[UInt8.instSemiringUInt8.proof_6,[of_eq_true, Eq.trans, forall_congr, congr, congrArg, Eq, HMul.hMul, UInt8.zero_def, UInt8.mul_def, UInt8.mk, OfNat.ofNat, MonoidWithZero.mul_zero, UInt8.val, eq_true_of_decide, Eq.refl, Bool.true, propext, forall_const, UInt8],[Eq, HMul.hMul, OfNat.ofNat]]
[Subsingleton.allEq,[],[Eq]]
[ByteArray.forInUnsafe,[OfNat.ofNat, ByteArray.forInUnsafe.loop],[]]
[Except.bind,[Except, Except.error],[Except]]
[PProd.mk.inj,[And.intro],[And, Eq]]
[List.mapIdx,[OfNat.ofNat, List.mapIdx.loop],[List]]
[Nat.lt_le_antisymm,[Nat.le_lt_antisymm],[False]]
[Sigma.noConfusionType,[],[]]
[Mathlib.Tactic.Ext.commandDeclareExtTheoremsFor__,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.symbol, Lean.ParserDescr.const],[Lean.ParserDescr]]
[congr_fun,[congrFun],[Eq]]
[String.revFind,[ite, Eq, BEq.beq, String.bsize, OfNat.ofNat, Bool.true, Option.none, String.revFindAux, String.prev],[Option, String.Pos]]
[USize.one_def,[rfl],[Eq, OfNat.ofNat, USize.mk]]
[ExceptT.run_pure,[rfl],[Eq, ExceptT.run, Pure.pure, Except.ok]]
[instSizeOfName,[SizeOf.mk, Lean.Name.sizeOf],[SizeOf, Lean.Name]]
[instMonadEIO,[inferInstanceAs, Monad, EStateM, IO.RealWorld],[Monad, EIO]]
[dbgTraceIfShared,[],[]]
[HDiv.noConfusionType,[],[]]
[Sum.inl.injEq,[Eq.propIntro, Eq.refl, Sum.inl, Eq.symm, eq_of_heq, HEq.refl],[Eq, Sum.inl]]
[Set,[],[]]
[Subrelation.accessible,[Subrelation.accessible.proof_1],[Acc]]
[HSub.noConfusionType,[],[]]
[Array.unzip,[Array.foldl, Prod, Array, Prod.mk, Array.push, List.toArray, List.nil, OfNat.ofNat, Array.size],[Prod, Array]]
[Prod.swap_left_inverse,[Prod.swap_swap],[Function.left_inverse, Prod.swap]]
[MonadExcept.noConfusionType,[],[]]
[USize.toNat,[Fin.val, USize.val],[Nat]]
[UInt32.instCommRingUInt32.proof_1,[UInt32.eq_of_val_eq, Eq.mpr, congr, congrArg, Eq, UInt32.val, UInt32.mul_def, CommSemiring.mul_comm],[Eq, HMul.hMul]]
[set.piecewise,[ite, Mem.mem],[]]
[exists₄_congr,[exists_congr, exists₃_congr],[Iff, Exists]]
[Subtype.ext,[Eq, of_eq_true, Eq.trans, Subtype.mk.injEq, congrFun, congrArg, eq_self],[Eq]]
[Nat.gcd_pos_of_pos_right,[Nat.pos_of_dvd_of_pos, Nat.gcd_dvd_right],[LT.lt, OfNat.ofNat, Nat.gcd]]
[ite,[],[]]
[Monad.toApplicative,[],[Applicative]]
[Tactic.Ring.HornerExpr.const.sizeOf_spec,[Eq.refl, HAdd.hAdd, OfNat.ofNat, SizeOf.sizeOf],[Eq, SizeOf.sizeOf, Tactic.Ring.HornerExpr.const, HAdd.hAdd, OfNat.ofNat]]
[LawfulMonad.noConfusionType,[],[]]
[List.nil.sizeOf_spec,[Eq.refl, OfNat.ofNat],[Eq, SizeOf.sizeOf, List.nil, OfNat.ofNat]]
[Subarray.foldl,[Id.run, Subarray.foldlM],[]]
[String.firstDiffPos,[OfNat.ofNat, String.firstDiffPos.loop],[String.Pos]]
[UInt64.val_eq_of_eq,[Eq, UInt64.val, congrArg],[Eq, UInt64.val]]
[Function.id_def,[rfl],[Eq, id]]
[Decidable.imp_iff_not_or,[Iff.intro, Decidable.not_or_of_imp, Or.neg_resolve_left],[Iff, Or, Not]]
[tacticExfalso,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.nonReservedSymbol, Bool.false],[Lean.ParserDescr]]
[instTransEq,[Trans.mk, instTransEq.proof_1],[Trans, Eq]]
[dif_neg,[Eq, dite, absurd, rfl],[Eq, dite]]
[USize.xor,[USize.mk, Fin.xor, USize.val],[USize]]
[Bool.and_true,[rfl, Eq.symm, Eq.refl],[Eq, and, Bool.true]]
[instToStringList,[ToString.mk, List.toString],[ToString, List]]
[Option.getD,[],[]]
[and_self,[propext, Iff.intro, And.left, And.intro],[Eq, And]]
[Array.foldrMUnsafe.fold,[ite, Eq, BEq.beq, Bool.true, Pure.pure, Bind.bind, Array.uget, HSub.hSub, OfNat.ofNat, lcProof, Array.foldrMUnsafe.fold],[]]
[imp_self,[iff_true_intro, id],[Iff, True]]
[Prod.Lex.decidable.proof_1,[Iff.symm, Prod.lex_def],[Iff, Or, Prod.fst, And, Eq, Prod.snd, Prod.Lex]]
[AddSemigroup.toAdd,[],[Add]]
[calc,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.symbol, Lean.ParserDescr.unary, calcStep, Lean.ParserDescr.const],[Lean.ParserDescr]]
[List.disjoint_singleton,[Eq.mpr, Eq.refl, Iff, List.disjoint, List.cons, List.nil, Not, Mem.mem, propext, List.disjoint_comm, List.singleton_disjoint, Iff.rfl],[Iff, List.disjoint, List.cons, List.nil, Not, Mem.mem]]
[ExceptCpsT.run_throw,[rfl],[Eq, ExceptCpsT.run, MonadExcept.throw, Pure.pure, Except.error]]
[instToStringChar,[ToString.mk, Char.toString],[ToString, Char]]
[instOrOpUInt64,[OrOp.mk, UInt64.lor],[OrOp, UInt64]]
[forall_congr,[],[Eq]]
[Char.isDigit,[and, Decidable.decide, GE.ge, Char.val, OfNat.ofNat, LE.le],[Bool]]
[Int.negSucc_ofNat_add_ofNat,[rfl],[Eq, HAdd.hAdd, Int.negSucc, Int.ofNat, Int.subNatNat, Nat.succ]]
[Int.add,[Int, Int.ofNat, HAdd.hAdd, Int.subNatNat, Nat.succ, Int.negSucc],[Int]]
[List.toByteArray.loop,[ByteArray, PProd.fst, ByteArray.push],[ByteArray]]
[PointedType.noConfusionType,[],[]]
[ExceptT.tryCatch,[ExceptT.mk, Bind.bind, Except, Pure.pure, Except.ok],[ExceptT]]
[String.Iterator.remainingBytes,[Nat, HSub.hSub, String.bsize],[Nat]]
[UInt8.instSemiringUInt8.proof_10,[rfl],[Eq, Nat.succ]]
[UInt16.instSemiringUInt16.proof_12,[Eq.mpr, congr, congrArg, Eq, Eq.trans, congrFun, HMul.hMul, UInt16.add_def, UInt16.mul_def, UInt16.mk, HAdd.hAdd, UInt16.val, UInt16.eq_of_val_eq, Semiring.add_mul],[Eq, HMul.hMul, HAdd.hAdd]]
[StateCpsT.run_eq,[rfl],[Eq, StateCpsT.run, StateCpsT.runK, Pure.pure, Prod.mk]]
[Tactic.Ring.subst_into_mul,[Eq.mpr, Eq.refl, Eq, HMul.hMul, rfl],[Eq, HMul.hMul]]
[instInhabitedNat,[Inhabited.mk, Nat.zero],[Inhabited, Nat]]
[ite_false,[rfl],[Eq, ite, False]]
[Nat.toUInt64,[UInt64.ofNat],[UInt64]]
[Substring.any,[Bool, String.anyAux],[Bool]]
[AddCommSemigroup.toAddSemigroup,[],[AddSemigroup]]
[Nat.succ_sub_succ_eq_sub,[rfl, congrArg, Nat.pred],[Eq, HSub.hSub, Nat.succ]]
[id,[],[]]
[Fin.sub.proof_1,[LT.lt, HMod.hMod, Nat.mod_lt],[LT.lt, HMod.hMod, HAdd.hAdd, HSub.hSub]]
[UInt8.modn,[UInt8.mk, HMod.hMod, UInt8.val],[UInt8]]
[FloatSpec.decLe,[],[DecidableRel, FloatSpec.le]]
[Char.quoteCore,[ite, Eq, Char.ofNat, Or, LE.le, Char.toNat, OfNat.ofNat, HAppend.hAppend, charToHex, String.singleton],[String]]
[List.concat_eq_append,[Eq.trans, List.concat_eq_append', List.append'_eq_append, List.cons, List.nil],[Eq, List.concat, HAppend.hAppend, List.cons, List.nil]]
[Function.has_right_inverse.surjective,[Function.surjective, Function.right_inverse.surjective],[Function.surjective]]
[instToStringIterator,[ToString.mk, String.Iterator.remainingToString],[ToString, String.Iterator]]
[Array.filter,[Array.foldl, ite, Eq, Bool.true, Array.push, List.toArray, List.nil],[Array]]
[Decidable.not_forall,[Iff.intro, not.decidable_imp_symm, Exists.intro, not_forall_of_exists_not],[Iff, Not, Exists]]
[List.disjoint_left,[of_eq_true, iff_self, False],[Iff, List.disjoint, Not, Mem.mem]]
[Nat.sub_le,[Nat.le_refl, HSub.hSub, OfNat.ofNat, Nat.le_trans, Nat.pred_le],[LE.le, HSub.hSub]]
[Decidable.not_imp_comm,[Iff.intro, Not.decidable_imp_symm],[Iff]]
[StateCpsT.runK_lift,[rfl],[Eq, StateCpsT.runK, StateCpsT.lift, Bind.bind]]
[Int.negSucc_ofNat_add_negSucc_ofNat,[rfl],[Eq, HAdd.hAdd, Int.negSucc, Nat.succ]]
[«term_∣_»,[Lean.ParserDescr.trailingNode, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.symbol, Lean.ParserDescr.cat],[Lean.TrailingParserDescr]]
[Nat.coprime.gcd_mul_left_cancel,[Nat.dvd_antisymm, Nat.dvd_gcd, Nat.coprime.dvd_of_dvd_mul_left, Nat.gcd_dvd_left, HMul.hMul, Nat.gcd_dvd_right, Nat.gcd_dvd_gcd_mul_left],[Eq, Nat.gcd, HMul.hMul]]
[ForInStep.noConfusionType,[],[]]
[Substring.get,[Char, String.get, HAdd.hAdd],[Char]]
[Array.toList,[Array.foldr, List.cons, List.nil, Array.size, OfNat.ofNat],[List]]
