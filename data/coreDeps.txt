[UInt8.div,[UInt8.mk, HDiv.hDiv, UInt8.val]]
[Lean.Syntax.setArg,[Lean.Syntax.missing, Lean.Syntax.atom, Lean.Syntax.ident, Lean.Syntax, Lean.Syntax.node, Array.setD]]
[Std.Range.forM.loop,[ite, GE.ge, Std.Range.stop, Pure.pure, PUnit.unit, Unit.unit, PUnit, Bind.bind, PProd.fst, HAdd.hAdd, Std.Range.step]]
[Nat.lor,[Nat.bitwise, or]]
[USize.lt,[LT.lt, USize.val]]
[String.startsWith,[BEq.beq, Substring.take, String.toSubstring, String.length]]
[instLTFloat,[LT.mk, Float.lt]]
[Fin.land.proof_1,[LT.lt, HMod.hMod, Nat.mod_lt]]
[Std.Format.noConfusionType,[]]
[Quot.recOnSubsingleton,[Quot.rec, Quot.recOnSubsingleton.proof_1]]
[Lean.Parser.Tactic.Conv.convApply_,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.nonReservedSymbol, Bool.false, Lean.ParserDescr.cat]]
[Lean.Syntax.isIdOrAtom?,[Lean.Syntax.missing, Lean.Syntax.node, Option, String, Option.some, Substring.toString, Option.none]]
[Array.empty,[Array.mkEmpty, OfNat.ofNat]]
[Lean.Macro.expandMacro?,[Bind.bind, Lean.Macro.getMethods, Lean.Macro.Methods.expandMacro?]]
[UInt64.land,[UInt64.mk, Fin.land, UInt64.val]]
[IO.Process.output,[Bind.bind, IO.Process.spawn, IO.Process.SpawnArgs.mk, IO.Process.StdioConfig.mk, IO.Process.StdioConfig.stdin, IO.Process.SpawnArgs.toStdioConfig, IO.Process.Stdio.piped, IO.Process.SpawnArgs.cmd, IO.Process.SpawnArgs.args, IO.Process.SpawnArgs.cwd, IO.Process.SpawnArgs.env, liftM, IO.asTask, IO.FS.Handle.readToEnd, IO.Process.Child.stdout, Task.Priority.dedicated, IO.Process.Child.stderr, IO.Process.Child.wait, IO.ofExcept, Task.get, Pure.pure, IO.Process.Output.mk]]
[absurd,[False.elim]]
[Lean.Name.isInaccessibleUserName,[Lean.Name.anonymous, Bool, or, String.contains, Char.ofNat, BEq.beq, PProd.fst, Bool.false]]
[Lean.Syntax.getArg,[Lean.Syntax.missing, Lean.Syntax.atom, Lean.Syntax.ident, Lean.Syntax, Array.getD]]
[OptionT.bind,[OptionT.mk, Bind.bind, Unit.unit, Option, Pure.pure, Option.none]]
[MonadFinally.tryFinally',[]]
[Nat.one_ne_zero,[]]
[Lean.Parser.Tactic.simpErase,[Lean.ParserDescr.nodeWithAntiquot, Lean.Name.mkStr, Lean.Name.anonymous, Lean.ParserDescr.binary, Lean.ParserDescr.symbol, Lean.ParserDescr.const]]
[IO.Error.mkResourceExhausted,[IO.Error.resourceExhausted, Option.none]]
[Substring.toIterator,[String.Iterator, String.Iterator.mk]]
[StateT.tryFinally,[MonadFinally.mk, Bind.bind, MonadFinally.tryFinally', Unit.unit, Prod, Option.some, Option.none, Pure.pure, Prod.mk]]
[IO.AccessRight.mk.inj,[And.intro]]
[Fin.xor,[Fin, Fin.mk, HMod.hMod, Nat.xor, Fin.xor.proof_1]]
[ST.Ref.mk.injEq,[Eq.propIntro, Eq.refl, ST.Ref.mk, Eq.symm, eq_of_heq, HEq.refl]]
[StateCpsT.runK_pure,[rfl]]
[Lean.Parser.Tactic.rename,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.nonReservedSymbol, Bool.false, Lean.ParserDescr.cat, Lean.ParserDescr.symbol, Lean.ParserDescr.const]]
[Array.modifyM.proof_1,[Eq.symm, Array.size_set, Fin.mk, arbitrary]]
[eq_of_heq,[]]
[not_false,[id]]
[EStateM.Backtrackable.restore,[]]
[Bool.false_or,[rfl, Eq.symm, Eq.refl]]
[Std.Format.defIndent,[OfNat.ofNat]]
[ByteArray.data,[]]
[outParam,[]]
[OfNat.noConfusionType,[]]
[instDecidableLe_4,[USize.decLe]]
[HEq.elim,[eq_of_heq]]
[StateCpsT.instLawfulMonadStateCpsT.proof_1,[LawfulMonad.mk, rfl]]
[Eq.mp,[]]
[instDecidableLt_3,[UInt64.decLt]]
[Fin.lor,[Fin, Fin.mk, HMod.hMod, Nat.lor, Fin.lor.proof_1]]
[monadFunctorRefl,[MonadFunctorT.mk]]
[IO.userError,[IO.Error.userError]]
[List.iota,[Unit.unit, Nat.succ, List, Nat, List.nil, List.cons, PProd.fst]]
[Nat.lt_of_succ_lt_succ,[Nat.le_of_succ_le_succ]]
[instHashableString,[Hashable.mk, String.hash]]
[Int.decEq.proof_6,[]]
[PSigma.SkipLeft,[PSigma.RevLex, emptyRelation]]
[Nat.sub_le,[Nat.le_refl, HSub.hSub, OfNat.ofNat, Nat.le_trans, Nat.pred_le]]
[Setoid.symm,[Equivalence.symm, Setoid.iseqv]]
[ST.Ref.noConfusionType,[]]
[iff_true,[propext, Iff.intro, Iff.mpr, trivial]]
[StateT.set,[Pure.pure, Prod.mk, PUnit.unit]]
[Eq.mpr_prop,[Eq.symm]]
[instDivUInt8,[Div.mk, UInt8.div]]
[Lean.Macro.State.macroScope,[]]
[BaseIO.toEIO,[EStateM.Result.error, EStateM.Result, IO.RealWorld, EStateM.Result.ok]]
[IO.FS.DirEntry.noConfusionType,[]]
[IO,[EIO, IO.Error]]
[IO.FS.Metadata.accessed,[]]
[invImage,[WellFoundedRelation.mk, InvImage, WellFoundedRelation.rel, invImage.proof_1]]
[StateT.instLawfulMonadStateT.proof_1,[LawfulMonad.mk, StateT.ext, Eq.mpr, congr, congrArg, Eq, Eq.trans, StateT.run_bind, Pure.pure, Bind.bind, StateT.run, funext, StateT.run_pure, Prod.fst, Prod.snd, StateT.run_map, LawfulMonad.bind_pure_comp, Prod.mk, rfl, of_eq_true, congrFun, LawfulMonad.pure_bind, eq_self, LawfulMonad.bind_assoc]]
[Complement.complement,[]]
[Except.error.inj,[]]
[Lean.Name.mkNum.proof_1,[of_decide_eq_true, Eq.refl, Bool.true]]
[Setoid.iseqv,[]]
[type_eq_of_heq.proof_1,[HEq.ndrecOn, Eq.refl]]
[Array.mapIdxM.map.proof_1,[Eq.mpr, Eq.refl, LT.lt, Array.size, Eq.symm, HAdd.hAdd, OfNat.ofNat, Nat.add_assoc, Nat.add_comm, Nat.le_add_right, Nat.succ]]
[Lean.Quote.quote,[]]
[Lean.Parser.Tactic.tacticAdmit,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.nonReservedSymbol, Bool.false]]
[Lean.Meta.instInhabitedTransparencyMode,[Inhabited.mk, Lean.Meta.TransparencyMode.all]]
[Lean.Parser.Syntax.subPrio,[Lean.ParserDescr.trailingNode, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.symbol, Lean.ParserDescr.cat]]
[Lean.Syntax.node.inj,[And.intro]]
[ToBool.toBool,[]]
[usize_size_gt_zero,[Nat.pos_pow_of_pos, System.Platform.numBits, Nat.zero_lt_succ, OfNat.ofNat]]
[Lean.Macro.instInhabitedState,[Inhabited.mk, Lean.Macro.State.mk, arbitrary]]
[PSigma.lexNdepWf,[PSigma.lexNdepWf.proof_1]]
[Lean.Parser.Tactic.generalizeArg,[Lean.ParserDescr.nodeWithAntiquot, Lean.Name.mkStr, Lean.Name.anonymous, Lean.ParserDescr.binary, Lean.ParserDescr.unary, Lean.ParserDescr.const, Lean.ParserDescr.symbol, Lean.ParserDescr.cat, OfNat.ofNat]]
[LawfulFunctor.comp_map,[]]
[Array.foldlM,[dite, LE.le, Array.size, Array.foldlM.proof_1]]
[Subarray.foldr,[Id.run, Subarray.foldrM]]
[List.length_concat,[rfl, of_eq_true, Eq.trans, congr, congrArg, Eq, List.length_cons, List.concat, Nat.succ, congrFun, HAdd.hAdd, OfNat.ofNat, eq_self, List.length]]
[Array.instForInArray,[ForIn.mk, Array.forIn]]
[String.decEq.proof_2,[absurd]]
[heq_of_heq_of_eq,[HEq.trans, heq_of_eq]]
[Nat.div,[WellFounded.fix, Nat.div.proof_1, dite, And, LT.lt, OfNat.ofNat, LE.le, HAdd.hAdd, HSub.hSub, Nat.sub_lt, Nat.lt_of_lt_of_le, Nat.zero]]
[Substring.all,[not, Substring.any]]
[IO.FS.Stream.Buffer.mk.injEq,[Eq.propIntro, And.intro, Eq.refl, IO.FS.Stream.Buffer.mk, Eq.symm, eq_of_heq, HEq.refl]]
[Nat.mul_le_mul_left,[LE.le, HMul.hMul, Nat.le.dest]]
[Lean.Parser.Tactic.simpPost,[Lean.ParserDescr.nodeWithAntiquot, Lean.Name.mkStr, Lean.Name.anonymous, Lean.ParserDescr.symbol]]
[unexpandListNil,[Bind.bind, Lean.MonadRef.mkInfoFromRefPos, Lean.MonadQuotation.getCurrMacroScope, Lean.MonadQuotation.getMainModule, Pure.pure, Lean.Syntax.node, Lean.SourceInfo.none, Lean.Name.mkStr, Lean.Name.anonymous, List.toArray, List.cons, Lean.Syntax.atom, List.nil]]
[String.toList,[String.data]]
[Nat.mod_self,[Eq.mpr, Eq.refl, Eq, HMod.hMod, OfNat.ofNat, Nat.mod_eq_sub_mod, Nat.le_refl, HSub.hSub, Nat.sub_self, Nat.zero_mod, rfl]]
[StateRefT',[ReaderT, ST.Ref]]
[Lean.Parser.Tactic.locationWildcard,[Lean.ParserDescr.nodeWithAntiquot, Lean.Name.mkStr, Lean.Name.anonymous, Lean.ParserDescr.symbol]]
[List.eraseRepsAux,[List, List.reverse, List.cons, Unit.unit, BEq.beq, PProd.fst]]
[Array.split,[Array.foldl, Prod, Array, ite, Eq, Bool.true, Prod.mk, Array.push, List.toArray, List.nil, OfNat.ofNat, Array.size]]
[ExceptCpsT.run_lift,[rfl]]
[«term~~~_»,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.symbol, Lean.ParserDescr.cat]]
[StateT.modifyGet,[Pure.pure]]
[FloatArray.mk.sizeOf_spec,[Eq.refl, HAdd.hAdd, OfNat.ofNat, SizeOf.sizeOf]]
[UInt64.shiftRight,[UInt64.mk, HShiftRight.hShiftRight, UInt64.val, UInt64.modn, OfNat.ofNat]]
[Fin.mk.sizeOf_spec,[Eq.refl, HAdd.hAdd, OfNat.ofNat, SizeOf.sizeOf]]
[instDivUSize,[Div.mk, USize.div]]
[eqRec_heq,[Eq.symm, eq_of_heq, Eq.refl, HEq.refl, HEq]]
[Array.foldrM.fold,[ite, Eq, BEq.beq, Bool.true, Pure.pure]]
[Substring.extract,[Substring, ite, GE.ge, Substring.mk, OfNat.ofNat, Nat.min, HAdd.hAdd]]
[Nat.pow_le_pow_of_le_right,[LE.le, HPow.hPow, Nat.succ, Nat.lt_or_eq_or_le_succ, Nat.le_refl, Eq.symm]]
[HPow.noConfusionType,[]]
[Nat.mul_add,[Nat.left_distrib]]
[Array.appendCore.loop,[dite, LT.lt, Array.size, Unit.unit, Array, PProd.fst, HAdd.hAdd, OfNat.ofNat, Array.push, Array.get, Fin.mk]]
[Std.ToFormat.format,[]]
[USize.lor,[USize.mk, Fin.lor, USize.val]]
[Lean.Meta.TransparencyMode.noConfusion,[noConfusionEnum, Lean.Meta.TransparencyMode.toCtorIdx]]
[HAnd.hAnd,[]]
[UInt8.shiftRight,[UInt8.mk, HShiftRight.hShiftRight, UInt8.val, UInt8.modn, OfNat.ofNat]]
[«term_+_»,[Lean.ParserDescr.trailingNode, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.symbol, Lean.ParserDescr.cat]]
[«stx_*»,[Lean.ParserDescr.trailingNode, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.symbol]]
[Nat.left_distrib,[Eq.mpr, Eq.refl, Eq, HMul.hMul, Nat.zero, HAdd.hAdd, Nat.zero_mul, OfNat.ofNat, rfl, congr, congrArg, Eq.trans, Nat.succ_mul, congrFun, Nat.add_assoc, Nat.add_left_comm]]
[InvImage.wf.proof_1,[WellFounded.intro, InvImage.accessible, WellFounded.apply]]
[noConfusionTypeEnum,[ite, Eq]]
[Array.findSomeRev?,[Id.run, Array.findSomeRevM?]]
[Char.ofNat.proof_2,[Or.inl, of_decide_eq_true, Eq.refl, Bool.true]]
[Fin.instModFin,[Mod.mk, Fin.mod]]
[Array.eraseIdx,[ite, LT.lt, Array.size, Array.eraseIdxAux, HAdd.hAdd, OfNat.ofNat]]
[LawfulApplicative.seq_assoc,[]]
[Lean.MacroScopesView.name,[]]
[of_decide_eq_true,[absurd, ne_true_of_eq_false, decide_eq_false]]
[instOfNatUInt32,[OfNat.mk, UInt32.ofNat]]
[usize_size_eq,[]]
[TC.wf,[TC.wf.proof_1]]
[«term‹_›»,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.symbol, Lean.ParserDescr.cat]]
[ByteArray.forIn.loop,[Pure.pure]]
[String.Iterator.mk.inj,[And.intro]]
[Nat.pred_le,[Unit.unit, LE.le, Nat.pred, Nat.le.refl, Nat.le_succ, Nat.succ]]
[IO.FS.FileType.symlink.sizeOf_spec,[Eq.refl, OfNat.ofNat]]
[Ne.symm,[Eq.symm]]
[StateT.instMonadFunctorStateT,[MonadFunctor.mk, Prod]]
[IO.Process.StdioConfig.stdout,[]]
[instToStreamSubarraySubarray,[ToStream.mk]]
[Lean.Syntax.getSepArgs,[Array.getSepElems, Lean.Syntax.getArgs]]
[System.SearchPath,[List, System.FilePath]]
[instDivFloat,[Div.mk, Float.div]]
[Nat.add_left_comm,[Eq.mpr, Eq.refl, Eq, HAdd.hAdd, Eq.symm, Nat.add_assoc, Nat.add_comm, rfl]]
[Classical.epsilon,[Subtype.val, Classical.strongIndefiniteDescription]]
[Std.Format.MonadPrettyFormat.pushOutput,[]]
[Lean.Parser.Tactic.tacticSorry,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.nonReservedSymbol, Bool.false]]
[instDecidableEq.proof_1,[Iff.rfl]]
[seq_eq_bind_map,[Eq.mpr, Eq.refl, Eq, Seq.seq, Bind.bind, Functor.map, Eq.symm, LawfulMonad.bind_map, rfl]]
[Nat.toDigits,[Nat.toDigitsCore, HAdd.hAdd, OfNat.ofNat, List.nil]]
[Subrelation.wf.proof_1,[WellFounded.intro, Subrelation.accessible, WellFounded.apply]]
[Nat.add_lt_add,[Nat.lt_trans, Nat.add_lt_add_right, Nat.add_lt_add_left]]
[Quot.hrecOn,[Quot.recOn, Quot.hrecOn.proof_1]]
[WellFounded.recursion,[WellFounded.apply]]
[Bind.bind,[]]
[Functor.noConfusionType,[]]
[HSub.noConfusionType,[]]
[Lean.Parser.Tactic.rwRule,[Lean.ParserDescr.nodeWithAntiquot, Lean.Name.mkStr, Lean.Name.anonymous, Lean.ParserDescr.binary, Lean.ParserDescr.unary, Lean.ParserDescr.symbol, Lean.ParserDescr.cat, OfNat.ofNat]]
[coeSort,[CoeSort.coe]]
[Lean.strLitKind,[Lean.Name.mkStr, Lean.Name.anonymous]]
[Array.insertAt,[ite, GT.gt, Array.size, panicWithPosWithDecl, OfNat.ofNat, Array.insertAtAux]]
[Lean.Name.mkSimple,[Lean.Name.mkStr, Lean.Name.anonymous]]
[UInt16.complement,[HSub.hSub, OfNat.ofNat, HAdd.hAdd]]
[instToStringSigma,[ToString.mk, String, HAppend.hAppend, ToString.toString]]
[Fin.instShiftLeftFin,[ShiftLeft.mk, Fin.shiftLeft]]
[Lean.Eval.noConfusionType,[]]
[Nat.lt_of_succ_le,[]]
[Lean.Parser.Tactic.Conv.convSeqBracketed,[Lean.ParserDescr.nodeWithAntiquot, Lean.Name.mkStr, Lean.Name.anonymous, Lean.ParserDescr.binary, Lean.ParserDescr.symbol, Lean.ParserDescr.unary, Lean.ParserDescr.cat, OfNat.ofNat]]
[Sigma.noConfusionType,[]]
[Nat.succ_pos,[Nat.zero_lt_succ]]
[Lean.Meta.Simp.Config.beta,[]]
[instAddNat,[Add.mk, Nat.add]]
[and_false,[propext, Iff.intro, And.right, False.elim]]
[instDecidableArrow.proof_1,[]]
[Nat.toDigitsCore,[List, Char, ite, Eq, OfNat.ofNat, List.cons, PProd.fst]]
[Char.instInhabitedChar,[Inhabited.mk, Char.ofNat]]
[Lean.Meta.TransparencyMode.reducible.sizeOf_spec,[Eq.refl, OfNat.ofNat]]
[List.instForMList,[ForM.mk, List.forM]]
[String.join,[List.foldl, HAppend.hAppend]]
[Lean.instMonadRef,[Lean.MonadRef.mk, liftM, Lean.MonadRef.getRef, MonadFunctorT.monadMap, Lean.MonadRef.withRef]]
[instDecidableLt,[UInt32.decLt]]
[List.mapTRAux,[List, List.reverse, PProd.fst, List.cons]]
[FloatSpec.mk.sizeOf_spec,[Eq.refl, HAdd.hAdd, OfNat.ofNat, SizeOf.sizeOf]]
[Array.instHAppendArrayListArray,[HAppend.mk, Array.appendList]]
[ByteArray.uget,[UInt8, Array.uget]]
[Quotient.inductionOn₃,[Quotient.ind]]
[Lean.expandExplicitBinders,[Bind.bind, Lean.MonadRef.getRef, ite, Eq, BEq.beq, Lean.Syntax.getKind, Lean.Name.mkStr, Lean.Name.anonymous, Bool.true, Lean.expandExplicitBindersAux, Array.all, Lean.Syntax.getArgs, OfNat.ofNat, Array.size, Lean.expandBrackedBindersAux, Lean.Macro.throwError]]
[MonadExceptOf.noConfusionType,[]]
[instDecidableEqUInt16,[UInt16.decEq]]
[Array.modify,[Id.run, Array.modifyM]]
[SizeOf.noConfusionType,[]]
[Sigma.mk.sizeOf_spec,[Eq.refl, HAdd.hAdd, OfNat.ofNat, SizeOf.sizeOf]]
[Nat.mul_lt_mul_of_pos_left,[Nat.lt_of_lt_of_le, Nat.add_lt_add_left, Nat.mul, Nat.mul_le_mul_left, Nat.succ_le_of_lt, Nat.mul_succ]]
[Lean.Macro.resolveGlobalName,[Bind.bind, Lean.Macro.getMethods, Lean.Macro.Methods.resolveGlobalName]]
[Char.val_ne_of_ne,[absurd, Char.eq_of_val_eq]]
[UInt16.sub,[UInt16.mk, HSub.hSub, UInt16.val]]
[IO.FS.Stream.noConfusionType,[]]
[IO.FS.Stream.ofBuffer,[IO.FS.Stream.mk, Bind.bind, ST.Ref.get, Pure.pure, Decidable.decide, GE.ge, IO.FS.Stream.Buffer.pos, ByteArray.size, IO.FS.Stream.Buffer.data, Unit.unit, ST.Ref.modifyGet, Prod.mk, IO.FS.Stream.Buffer.mk, HAdd.hAdd, ST.Ref.modify, ByteArray.copySlice, OfNat.ofNat, Bool.false, String.fromUTF8Unchecked, ByteArray.extract]]
[Prod.rprod,[WellFoundedRelation.mk, Prod.RProd, WellFoundedRelation.rel, Prod.rprod.proof_1]]
[Acc.noConfusionType,[]]
[Int.ofNat.injEq,[Eq.propIntro, Eq.refl, Int.ofNat, Eq.symm, eq_of_heq, HEq.refl]]
[ReprAtom.noConfusionType,[]]
[Classical.choose_spec,[Subtype.property, Classical.indefiniteDescription]]
[Int.sub,[HAdd.hAdd, Neg.neg]]
[Nat.zero_mul,[Unit.unit, Eq, HMul.hMul, OfNat.ofNat, rfl, Eq.symm, PProd.fst, Nat.mul_succ]]
[Nat.pow,[Unit.unit, Nat, OfNat.ofNat, Nat.mul, PProd.fst]]
[LawfulMonad.pure_bind,[]]
[instDecidableLt_4,[USize.decLt]]
[Lean.Parser.Tactic.config,[Lean.ParserDescr.nodeWithAntiquot, Lean.Name.mkStr, Lean.Name.anonymous, Lean.ParserDescr.binary, Lean.ParserDescr.unary, Lean.ParserDescr.symbol, Lean.ParserDescr.nonReservedSymbol, Bool.false, Lean.ParserDescr.cat, OfNat.ofNat]]
[Prod.RProdSubLex.proof_1,[Prod.Lex.left, Eq.symm, eq_of_heq, Eq.refl, HEq.refl]]
[Int.instOfNatInt,[OfNat.mk, Int.ofNat]]
[Nat.decLt,[Nat.decLe, Nat.succ]]
[dif_pos,[Eq, dite, rfl, absurd]]
[Option.get!,[Unit.unit, panicWithPosWithDecl, OfNat.ofNat]]
[Lean.Parser.Tactic.tacticInfer_instance,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.nonReservedSymbol, Bool.false]]
[Std.Range.instForInRangeNat,[ForIn.mk, Std.Range.forIn]]
[instOrdNat,[Ord.mk, compareOfLessAndEq]]
[LawfulMonad.bind_assoc,[]]
[Lean.Parser.Tactic.clear,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.nonReservedSymbol, Bool.false, Lean.ParserDescr.unary, Lean.ParserDescr.const]]
[Subarray.forM,[Array.forM, Subarray.as, Subarray.start, Subarray.stop]]
[Equivalence.symm,[]]
[Char.toUpper,[ite, And, GE.ge, OfNat.ofNat, LE.le, Char.ofNat, HSub.hSub]]
[Array.binInsert,[Id.run, Array.binInsertM]]
[ByteArray.getOp,[ByteArray.get!]]
[Subrelation.wf,[Subrelation.wf.proof_1]]
[Lean.Parser.Syntax.subPrec,[Lean.ParserDescr.trailingNode, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.symbol, Lean.ParserDescr.cat]]
[Lean.ParserDescr.below,[PUnit, PProd]]
[FloatArray.forInUnsafe.loop,[ite, LT.lt, Bind.bind, Pure.pure, FloatArray.forInUnsafe.loop, HAdd.hAdd, OfNat.ofNat]]
[Subtype.instInhabitedSubtype,[Inhabited.mk, Subtype.mk]]
[StateCpsT.runK_bind_set,[rfl]]
[Nat.eq_zero_or_pos,[Unit.unit, Or, Eq, OfNat.ofNat, GT.gt, Or.inl, rfl, Or.inr, Nat.succ_pos]]
[inferInstanceAs,[]]
[ST.Prim.Ref.modifyGet,[Bind.bind, ST.Prim.Ref.get, ST, ST.Prim.Ref.set, Pure.pure]]
[Fin.eq_of_val_eq,[Eq.symm, eq_of_heq, Eq.refl, Fin.val, Fin.mk, HEq.refl, Eq, rfl]]
[Nat.instDivNat,[Div.mk, Nat.div]]
[Fin.coeToNat,[Coe.mk, Fin.val]]
[Acc.inv,[Acc.inv.proof_1]]
[AndThen.noConfusionType,[]]
[instInhabitedEST,[inferInstanceAs, Inhabited, EStateM]]
[String.next,[HAdd.hAdd, String.csize]]
[subtypeCoe,[CoeHead.mk, Subtype.val]]
[instCoeDep,[CoeDep.mk, coeFun]]
[instInhabitedUSize.proof_1,[Unit.unit, Eq.symm, eq_of_heq, Eq.refl, OfNat.ofNat, HEq.refl, LT.lt, USize.size, usize_size_eq, of_decide_eq_true, Bool.true]]
[IO.FS.instOrdSystemTime,[Ord.mk, Ordering, Unit.unit, Ord.compare, Ordering.lt, Ordering.gt, Ordering.eq]]
[Lean.SourceInfo.fromRef,[Option.none, Option.some, Lean.SourceInfo, Lean.Syntax.getPos?, Bool.false, Lean.Syntax.getTailPos?, Lean.SourceInfo.synthetic, Lean.SourceInfo.none]]
[id,[]]
[ForM.forM,[]]
[instStreamSubarray.proof_1,[Nat.succ_le_of_lt]]
[instHashableUSize,[Hashable.mk, USize.toUInt64]]
[Task.Priority.dedicated,[OfNat.ofNat]]
[List.take,[List, List.nil, List.cons, PProd.fst]]
[ST,[EST, Empty]]
[instReprAtomUInt64,[ReprAtom.mk]]
[HShiftRight.hShiftRight,[]]
[«term_/\_»,[Lean.ParserDescr.trailingNode, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.symbol, Lean.ParserDescr.cat]]
[Classical.em,[]]
[StdGen.s1,[]]
[Lean.Meta.Simp.Config.etaStruct,[]]
[Applicative.noConfusionType,[]]
[Decidable.byContradiction,[Decidable.byCases, id, False.elim]]
[UInt16.decEq.proof_2,[absurd]]
[decidableOfDecidableOfIff,[dite, Decidable.isTrue, Iff.mp, Decidable.isFalse, decidableOfDecidableOfIff.proof_1]]
[instOrdUInt16,[Ord.mk, compareOfLessAndEq]]
[List.beq,[Unit.unit, List.nil, List.cons, Bool, Bool.true, and, BEq.beq, PProd.fst, Bool.false]]
[FloatArray.uset,[FloatArray, FloatArray.mk, Array.uset]]
[Prod.fst,[]]
[instOfNatFloat,[OfNat.mk, Float.ofNat]]
[ite_congr,[Decidable.em, Eq.mpr, Eq.refl, Eq, ite, if_pos, Eq.symm, if_neg]]
[Int.ofNat.inj,[]]
[Nat.log2,[WellFounded.fix, Nat.log2.proof_1, dite, GE.ge, OfNat.ofNat, HAdd.hAdd, HDiv.hDiv, Eq.refl, Nat.zero, HEq.refl, absurd, of_decide_eq_false, Decidable.decide, Nat.succ, LT.lt, of_decide_eq_true, Bool.true, Eq.mpr, Nat.div_eq, ite, And, LE.le, HSub.hSub, if_pos, And.intro, Nat.succ_lt_succ, Nat.zero_lt_succ, Nat.lt_trans, PProd.fst, PProd.snd, Nat.lt_succ_self]]
[Lean.Syntax.isFieldIdx?,[Option.none, Option, Nat, Lean.Syntax.isLit?, Lean.Syntax.decodeNatLitVal?, Lean.fieldIdxKind]]
[StateT.instMonadLiftStateT,[MonadLift.mk, StateT.lift]]
[String.getOp,[String.get]]
[IO.Error.illegalOperation.injEq,[Eq.propIntro, And.intro, Eq.refl, IO.Error.illegalOperation, Eq.symm, eq_of_heq, HEq.refl]]
[IO.FS.DirEntry.root,[]]
[StateT.run_bind_lift,[of_eq_true, Eq.trans, congrFun, congrArg, Eq, LawfulMonad.bind_assoc, Pure.pure, Prod.mk, Bind.bind, funext, LawfulMonad.pure_bind, eq_self]]
[List.instListDecidableLe,[inferInstanceAs, Decidable, Not, LT.lt]]
[String.instLTString,[LT.mk, LT.lt, String.data]]
[ExceptT.instLawfulMonadExceptT,[ExceptT.instLawfulMonadExceptT.proof_1]]
[String.Iterator.prevn,[String.Iterator, PProd.fst, String.Iterator.prev]]
[Lean.NameGenerator.next,[Lean.NameGenerator.mk, Lean.NameGenerator.namePrefix, HAdd.hAdd, Lean.NameGenerator.idx, OfNat.ofNat]]
[Lean.Name.escapePart,[ite, Eq, and, Decidable.decide, GT.gt, String.length, OfNat.ofNat, Lean.isIdFirst, String.getOp, Substring.all, Substring.drop, String.toSubstring, Lean.isIdRest, Bool.true, Option.some, String.any, Lean.isIdEndEscape, Option.none, HAppend.hAppend, Char.toString, Lean.idBeginEscape, Lean.idEndEscape]]
[IO.Error.permissionDenied.inj,[And.intro]]
[getModify,[MonadState.modifyGet, Prod.mk]]
[Lean.MacroScopesView.mainModule,[]]
[Lean.evalPrec,[Lean.Macro.withIncRecDepth, Bind.bind, Lean.expandMacros, cond, Lean.Syntax.isOfKind, Lean.Name.mkStr, Lean.Name.anonymous, Pure.pure, Option.getD, Lean.Syntax.isNatLit?, OfNat.ofNat, Lean.Macro.throwErrorAt]]
[instPowFloatFloat,[Pow.mk, Float.pow]]
[instInhabitedOrdering,[Inhabited.mk, Ordering.lt]]
[List.toFloatArray.loop,[FloatArray, PProd.fst, FloatArray.push]]
[Sum.inr.injEq,[Eq.propIntro, Eq.refl, Sum.inr, Eq.symm, eq_of_heq, HEq.refl]]
[IO.Error.otherError.inj,[And.intro]]
[«stx_<|>_»,[Lean.ParserDescr.trailingNode, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.symbol, Lean.ParserDescr.cat]]
[WellFounded.fix,[WellFounded.fixF, WellFounded.apply]]
[Lean.Module.noConfusionType,[]]
[Lean.Parser.Tactic.Conv.convErw_,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.nonReservedSymbol, Bool.false, Lean.Parser.Tactic.rwRuleSeq]]
[of_decide_eq_false,[Not, absurd, ne_false_of_eq_true, decide_eq_true]]
[UInt8.decEq.proof_1,[rfl]]
[coeHead,[CoeHead.coe]]
[StateRefT'.run,[Bind.bind, ST.mkRef, ST.Ref.get, Pure.pure, Prod.mk]]
[Lean.term_Matches_,[Lean.ParserDescr.trailingNode, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.symbol, Lean.ParserDescr.cat]]
[Quotient.exact,[Quot.inductionOn, Setoid.refl]]
[PLift.noConfusionType,[]]
[And.left,[]]
[instOfNatUInt8,[OfNat.mk, UInt8.ofNat]]
[MProd.snd,[]]
[Quot.recOnSubsingleton.proof_1,[Subsingleton.elim, Quot.sound]]
[StateT.run',[Functor.map, Prod.fst]]
[strictAnd,[and]]
[Lean.Parser.Tactic.paren,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.nonReservedSymbol, Bool.false, Lean.ParserDescr.const, Lean.ParserDescr.symbol]]
[Classical.strongIndefiniteDescription,[dite, Exists, Subtype.mk, Classical.choice, Classical.strongIndefiniteDescription.proof_2]]
[IO.FS.Stream.Buffer.noConfusionType,[]]
[Substring.nextn,[String.Pos, PProd.fst, Substring.next]]
[Nat.lt_trans,[Nat.le_trans, Nat.le_step]]
[Lean.Meta.Simp.Config.mk.inj,[And.intro]]
[Lean.Syntax.isStrLit?,[Option.none, Option, String, Lean.Syntax.isLit?, Lean.strLitKind, Lean.Syntax.decodeStrLit]]
[IO.FS.instLESystemTime,[leOfOrd]]
[String.Iterator.next,[String.Iterator, String.Iterator.mk, String.next]]
[Array.allM,[Bind.bind, Array.anyM, Pure.pure, not, OfNat.ofNat, Array.size]]
[Int.decEq.proof_5,[]]
[Lean.instMonadQuotation,[Lean.MonadQuotation.mk, liftM, Lean.MonadQuotation.getCurrMacroScope, Lean.MonadQuotation.getMainModule, MonadFunctorT.monadMap, Lean.MonadQuotation.withFreshMacroScope]]
[IO.Error.unsatisfiedConstraints.sizeOf_spec,[Eq.refl, HAdd.hAdd, OfNat.ofNat, SizeOf.sizeOf]]
[CoeHead.coe,[]]
[Bool.toUInt64,[ite, Eq, Bool.true, OfNat.ofNat]]
[Char.utf8Size,[ite, LE.le, UInt32.ofNatCore, OfNat.ofNat, Char.utf8Size.proof_1, Char.utf8Size.proof_2, Char.utf8Size.proof_3, Char.utf8Size.proof_4, Char.utf8Size.proof_5, Char.utf8Size.proof_6, Char.utf8Size.proof_7]]
[Array.noConfusionType,[]]
[Std.Format.group.injEq,[Eq.propIntro, And.intro, Eq.refl, Std.Format.group, Eq.symm, eq_of_heq, HEq.refl]]
[Int.instInhabitedInt,[Inhabited.mk, Int.ofNat, OfNat.ofNat]]
[ShiftLeft.shiftLeft,[]]
[List.and,[List.all, id]]
[ofBoolUsing_eq_false,[of_decide_eq_false]]
[Lean.MonadNameGenerator.noConfusionType,[]]
[instDecidableLt_2,[UInt16.decLt]]
[ST.Ref.h,[]]
[instOrdUInt32,[Ord.mk, compareOfLessAndEq]]
[instHashable,[Hashable.mk, OfNat.ofNat]]
[Nat.zero_lt_of_lt,[LT.lt, OfNat.ofNat]]
[IO.mapTask,[EIO.mapTask]]
[Array.shrink.loop,[Array, PProd.fst, Array.pop]]
[Nat.le.brecOn,[Nat.le.below.refl, Nat.le.below.step]]
[System.SearchPath.parse,[List.map, System.FilePath.mk, String.split, BEq.beq, System.SearchPath.separator]]
[liftCoeM,[Bind.bind, liftM, Pure.pure, coe]]
[PointedType.type,[]]
[CoeTail.coe,[]]
[IO.withStdin,[Bind.bind, liftM, IO.setStdin, tryFinally, Functor.discard]]
[List.getLastD,[List.getLast, List.cons, List.getLastD.proof_1]]
[List.intersperse,[Unit.unit, List.cons, List, List.nil, PProd.fst]]
[Stream.forIn,[Stream.forIn.visit]]
[WellFoundedRelation.rel,[]]
[DoResultPRBC.pure.sizeOf_spec,[Eq.refl, HAdd.hAdd, OfNat.ofNat, SizeOf.sizeOf]]
[Lean.Meta.Rewrite.Config.transparency,[]]
[instLTOption,[LT.mk, Option.lt, LT.lt]]
[Lean.Parser.Tactic.Conv.first,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.nonReservedSymbol, Bool.false, Lean.ParserDescr.unary, Lean.ParserDescr.const, Lean.ParserDescr.symbol, Lean.Parser.Tactic.Conv.convSeq]]
[instMonadReaderOfReaderT,[MonadReaderOf.mk, ReaderT.read]]
[Std.Format.MonadPrettyFormat.currColumn,[]]
[«term_×'_»,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.bracketedExplicitBinders, Lean.ParserDescr.symbol, Lean.ParserDescr.cat]]
[type_eq_of_heq,[type_eq_of_heq.proof_1]]
[UInt16.shiftLeft,[UInt16.mk, HShiftLeft.hShiftLeft, UInt16.val, UInt16.modn, OfNat.ofNat]]
[BaseIO.toIO,[liftM]]
[Nat.ble_self_eq_true,[Unit.unit, Eq, Nat.ble, Bool.true, rfl, PProd.fst]]
[Lean.Name.append,[Lean.Name, Lean.Name.mkStr, PProd.fst, Lean.Name.mkNum]]
[instXorUInt16,[Xor.mk, UInt16.xor]]
[IO.Error.resourceBusy.inj,[And.intro]]
[StateRefT'.run',[Bind.bind, StateRefT'.run, Pure.pure]]
[Std.Format.defUnicode,[Bool.true]]
[instBEq,[BEq.mk, Decidable.decide, Eq]]
[MonadLiftT.monadLift,[]]
[Char.toString,[String.singleton]]
[Int.instHPowIntNatInt,[HPow.mk, Int.pow]]
[Char.lt,[LT.lt, Char.val]]
[UInt64.toUInt8,[Nat.toUInt8, UInt64.toNat]]
[Lean.Syntax.getPos?,[Lean.SourceInfo.getPos?, Lean.Syntax.getHeadInfo]]
[fixCore4,[bfix4, USize.size]]
[String.get,[Char, arbitrary, ite, Eq, PProd.fst, HAdd.hAdd, String.csize, OfNat.ofNat]]
[Lean.«termMacro.trace[__]_»,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.symbol, Lean.ParserDescr.const, Lean.ParserDescr.unary, Lean.ParserDescr.cat]]
[Div.div,[]]
[instSubUInt32,[Sub.mk, UInt32.sub]]
[OptionT.lift,[OptionT.mk, Bind.bind, Pure.pure, Option.some]]
[StateCpsT.runK_bind_get,[rfl]]
[Subarray.stop,[]]
[WellFounded.noConfusionType,[]]
[Array.getIdx?,[Array.findIdx?, BEq.beq]]
[Array.size_push,[List.length_concat, Array.data]]
[Subarray.toArray,[Array.ofSubarray]]
[DoResultPRBC.return.sizeOf_spec,[Eq.refl, HAdd.hAdd, OfNat.ofNat, SizeOf.sizeOf]]
[OptionT.instMonadFunctorOptionT,[MonadFunctor.mk, Option]]
[autoParam,[]]
[Nat.gcd.proof_1,[WellFoundedRelation.wf, measure, id]]
[instOfNatUInt64,[OfNat.mk, UInt64.ofNat]]
[Nat.add_lt_add_right,[Nat.add_lt_add_left, Nat.add_comm]]
[instReprSubtype,[Repr.mk, Repr.reprPrec, Subtype.val]]
[Lean.Macro.getMethodsImp,[Bind.bind, MonadReader.read, Pure.pure, unsafeCast, Lean.Macro.Context.methods]]
[instSTWorldEST,[STWorld.mk]]
[IO.Error.resourceVanished.sizeOf_spec,[Eq.refl, HAdd.hAdd, OfNat.ofNat, SizeOf.sizeOf]]
[Nat.toSuperscriptString,[List.asString, Nat.toSuperDigits]]
[instBEqFloat,[BEq.mk, Float.beq]]
[ReaderT.read,[Pure.pure]]
[instToStringProd,[ToString.mk, String, HAppend.hAppend, ToString.toString]]
[Nat.lt_irrefl,[Nat.not_succ_le_self]]
[BEq.beq,[]]
[Bool.false.sizeOf_spec,[Eq.refl, OfNat.ofNat]]
[USize.ofNat,[USize.mk, Fin.ofNat', usize_size_gt_zero]]
[hasOfNatOfCoe,[OfNat.mk, coe, OfNat.ofNat]]
[ReaderT.run_map,[rfl]]
[precArg,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.nonReservedSymbol, Bool.false]]
[IO.FileRight.user,[]]
[repr,[Repr.reprPrec, OfNat.ofNat]]
[fix4,[fixCore4, arbitrary]]
[IO.FS.Stream.flush,[]]
[Nat.le_succ_of_le,[Nat.le_trans, Nat.le_succ]]
[List.reverse,[List.reverseAux, List.nil]]
[UInt16.land,[UInt16.mk, Fin.land, UInt16.val]]
[instHashableUInt16,[Hashable.mk, UInt16.toUInt64]]
[List.nil_append,[rfl]]
[ByteArray.forInUnsafe.loop,[ite, LT.lt, Bind.bind, Pure.pure, ByteArray.forInUnsafe.loop, HAdd.hAdd, OfNat.ofNat]]
[Lean.MacroScopesView.review,[Unit.unit, Lean.Name, Lean.MacroScopesView.scopes, Lean.MacroScopesView.name, List.foldl, Lean.Name.mkNum]]
[HSub.hSub,[]]
[Int.decEq.proof_3,[rfl]]
[BaseIO.mapTasks.go,[BaseIO, Task, BaseIO.bindTask, PProd.fst, List.cons, BaseIO.asTask, List.reverse]]
[stdSplit,[StdGen.mk, Prod, StdGen, Prod.mk]]
[Nat.le.intro,[Nat.le_add_right]]
[Array.findIdx?.loop.proof_1,[absurd, Eq.mp, Eq.refl, LT.lt, Array.size, Eq, HAdd.hAdd, OfNat.ofNat, Nat.zero_add, Nat.lt_irrefl]]
[StateCpsT.runK_modify,[rfl]]
[Lean.Meta.Rewrite.Config.mk.sizeOf_spec,[Eq.refl, HAdd.hAdd, OfNat.ofNat, SizeOf.sizeOf]]
[Lean.PrettyPrinter.Unexpander,[Lean.PrettyPrinter.UnexpandM, Lean.Syntax]]
[Lean.Name.str.injEq,[Eq.propIntro, And.intro, Eq.refl, Lean.Name.str, Eq.symm, eq_of_heq, HEq.refl]]
[List.getLast,[absurd, List.getLast.proof_1, PProd.fst, List.getLast.proof_2]]
[coeTrans,[CoeTC.mk, coeB, coeTC]]
[StateCpsT.runK,[]]
[Prod.ext,[rfl, Eq.symm, Eq.refl]]
[CoeFun.noConfusionType,[]]
[ne_false_of_self,[]]
[LawfulApplicative.noConfusionType,[]]
[HDiv.hDiv,[]]
[Int.decEq.proof_2,[absurd]]
[instInhabitedProd,[Inhabited.mk, Prod.mk, arbitrary]]
[IO.FS.withIsolatedStreams,[Bind.bind, liftM, IO.mkRef, IO.FS.Stream.Buffer.mk, IO.withStdin, IO.FS.Stream.ofBuffer, IO.withStdout, IO.withStderr, observing, ST.Ref.get, Pure.pure, Prod.mk]]
[ST.Ref.mk.sizeOf_spec,[Eq.refl, HAdd.hAdd, OfNat.ofNat, SizeOf.sizeOf]]
[instDecidableIff.proof_3,[Iff.mpr]]
[CoeTC.noConfusionType,[]]
[Array.isEmpty,[Decidable.decide, Eq, Array.size, OfNat.ofNat]]
[List.forM_cons,[rfl]]
[Lean.Parser.Tactic.tacticShow_,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.nonReservedSymbol, Bool.false, Lean.ParserDescr.cat]]
[SeqRight.noConfusionType,[]]
[EStateM.set,[EStateM.Result.ok, PUnit.unit]]
[seq_eq_bind,[Eq.mpr, Eq.refl, Eq, Seq.seq, Bind.bind, Functor.map, LawfulMonad.bind_map, rfl]]
[List.spanAux,[Prod, List, Prod.mk, List.reverse, List.nil, Unit.unit, PProd.fst, List.cons]]
[IO.Process.Output.stdout,[]]
[Char.isUpper,[and, Decidable.decide, GE.ge, Char.val, OfNat.ofNat, LE.le]]
[UInt8.add,[UInt8.mk, HAdd.hAdd, UInt8.val]]
[System.FilePath.isAbsolute,[or, List.contains, System.FilePath.pathSeparators, String.front, System.FilePath.toString, and, System.Platform.isWindows, Decidable.decide, GE.ge, String.bsize, OfNat.ofNat, BEq.beq, String.getOp, Char.ofNat]]
[FloatArray.get?,[dite, LT.lt, FloatArray.size, Option.some, FloatArray.get, Fin.mk, Option.none]]
[decide_eq_false,[Eq, Decidable.decide, Bool.false, absurd, rfl]]
[Std.Format.FlattenBehavior.fill.sizeOf_spec,[Eq.refl, OfNat.ofNat]]
[Int.decEq.proof_1,[rfl]]
[System.instCoeStringFilePath,[Coe.mk, System.FilePath.mk]]
[Array.toArrayLit,[List.toArray, Array.toListLitAux, Array.toArrayLit.proof_1, List.nil]]
[Nat.add_one,[rfl]]
[Subsingleton.allEq,[]]
[Array.findIdx?.loop.proof_2,[Eq.mpr, Eq.refl, Eq, HAdd.hAdd, OfNat.ofNat, Array.size, Eq.symm, Nat.add_comm, Nat.add_assoc, rfl]]
[UInt32.mul,[UInt32.mk, HMul.hMul, UInt32.val]]
[Lean.mkIdentFrom,[Lean.Syntax.ident, Lean.SourceInfo.fromRef, String.toSubstring, ToString.toString, List.nil]]
[Nat.lt_of_le_and_ne,[LT.lt, Nat.eq_or_lt_of_le, absurd]]
[Acc.ndrecOn,[]]
[String.Iterator.pos,[String.Pos]]
[List.map_eq_mapTR,[funext, of_eq_true, Eq.trans, congrArg, Eq, List.map, List.mapTRAux_eq, List.nil, congrFun, HAppend.hAppend, List.reverse_nil, List.nil_append, eq_self]]
[Lean.SyntaxNodeKind,[Lean.Name]]
[Task.pure.sizeOf_spec,[Eq.refl, HAdd.hAdd, OfNat.ofNat, SizeOf.sizeOf]]
[ExceptT.run_bind,[rfl]]
[String.Iterator.hasNext,[Bool, Decidable.decide, LT.lt, String.utf8ByteSize]]
[UInt16.toUInt32,[Nat.toUInt32, UInt16.toNat]]
[Nat.div.inductionOn,[WellFounded.fix, WellFoundedRelation.wf, measure, id, dite, And, LT.lt, OfNat.ofNat, LE.le, HSub.hSub, Nat.sub_lt, Nat.lt_of_lt_of_le]]
[List.zipWith,[List.nil, List.cons, List, PProd.fst]]
[IO.FS.Stream.mk.injEq,[Eq.propIntro, And.intro, Eq.refl, IO.FS.Stream.mk, Eq.symm, eq_of_heq, HEq.refl]]
[Lean.Parser.Tactic.Conv.«conv·._»,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.symbol, Lean.Parser.Tactic.Conv.convSeq]]
[Id.finally,[MonadFinally.mk, Pure.pure, Prod.mk]]
[Substring.isEmpty,[BEq.beq, Substring.bsize, OfNat.ofNat]]
[StateT.run_monadMap,[rfl]]
[instReprUInt32,[Repr.mk, repr, UInt32.toNat]]
[Prod.rprod.proof_1,[Subrelation.wf, WellFoundedRelation.wf, Prod.lex, Prod.RProdSubLex]]
[UInt8.complement,[HSub.hSub, OfNat.ofNat, HAdd.hAdd]]
[Nat.foldRevM,[Nat.foldRevM.loop]]
[Lean.Syntax.ident.injEq,[Eq.propIntro, And.intro, Eq.refl, Lean.Syntax.ident, Eq.symm, eq_of_heq, HEq.refl]]
[String.isEmpty,[BEq.beq, String.bsize, OfNat.ofNat]]
[Lean.Syntax.getOptional?,[Lean.Syntax.missing, Lean.Syntax.atom, Lean.Syntax.ident, Option, Lean.Syntax, ite, Eq, and, BEq.beq, Lean.nullKind, Array.size, OfNat.ofNat, Bool.true, Option.some, Array.get!, Option.none]]
[«stx_+»,[Lean.ParserDescr.trailingNode, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.symbol]]
[Option.all,[Unit.unit, Bool, Bool.true]]
[instMonadControlStateRefT',[inferInstanceAs, MonadControl, ReaderT, ST.Ref]]
[List.toString,[Unit.unit, String, HAppend.hAppend, List.toStringAux, Bool.true, List.cons]]
[ReaderT.pure,[Pure.pure]]
[Option.instFunctorOption,[Functor.mk, Option.map]]
[List.append,[List, List.cons, PProd.fst]]
[Lean.Name.appendIndexAfter,[Lean.Name.modifyBase, Lean.Name.anonymous, Lean.Name.num, Lean.Name, Lean.Name.mkStr, HAppend.hAppend, ToString.toString]]
[Functor.mapConst,[]]
[String.trimRight,[Substring.toString, Substring.trimRight, String.toSubstring]]
[Lean.Syntax.isOfKind,[BEq.beq, Lean.Syntax.getKind]]
[instMonadLiftT_1,[MonadLiftT.mk]]
[Substring.str,[]]
[ForInStep.done.sizeOf_spec,[Eq.refl, HAdd.hAdd, OfNat.ofNat, SizeOf.sizeOf]]
[Ne.elim,[]]
[BaseIO,[EIO, Empty]]
[instOrOpUSize,[OrOp.mk, USize.lor]]
[instAddUInt32,[Add.mk, UInt32.add]]
[FloatArray.mk.injEq,[Eq.propIntro, Eq.refl, FloatArray.mk, Eq.symm, eq_of_heq, HEq.refl]]
[Trans.noConfusionType,[]]
[Nat.any,[Nat.anyAux]]
[instShiftLeftUInt8,[ShiftLeft.mk, UInt8.shiftLeft]]
[instAddUSize,[Add.mk, USize.add]]
[Nat.succ_mul,[rfl, Eq.mpr, Eq.refl, Eq, HMul.hMul, Nat.succ, HAdd.hAdd, Nat.mul_succ, Nat.add_succ, Nat.add_right_comm]]
[IO.FS.Mode.read.sizeOf_spec,[Eq.refl, OfNat.ofNat]]
[List.instBEqList,[BEq.mk, List.beq]]
[IO.Error.timeExpired.injEq,[Eq.propIntro, And.intro, Eq.refl, IO.Error.timeExpired, Eq.symm, eq_of_heq, HEq.refl]]
[instAndOpUInt64,[AndOp.mk, UInt64.land]]
[Lean.mkHole,[Lean.mkNode, Lean.Name.mkStr, Lean.Name.anonymous, List.toArray, List.cons, Lean.mkAtomFrom, List.nil]]
[Except.error.injEq,[Eq.propIntro, Eq.refl, Except.error, Eq.symm, eq_of_heq, HEq.refl]]
[instInhabitedDepArrow,[Inhabited.mk, arbitrary]]
[congr,[rfl]]
[HMod.noConfusionType,[]]
[MonadFunctorT.monadMap,[]]
[StateT.get,[Pure.pure, Prod.mk]]
[DoResultSBC.pureReturn.sizeOf_spec,[Eq.refl, HAdd.hAdd, OfNat.ofNat, SizeOf.sizeOf]]
[Std.Format.MonadPrettyFormat.endTags,[]]
[modifyGetThe,[MonadStateOf.modifyGet]]
[EStateM.dummySave,[PUnit.unit]]
[Applicative.toPure,[]]
[Lean.Syntax.instBEqSyntax,[BEq.mk, Lean.Syntax.structEq]]
[instInhabitedUSize,[Inhabited.mk, USize.ofNatCore, OfNat.ofNat, instInhabitedUSize.proof_1]]
[Lean.expandExplicitBindersAux,[Array.size, Lean.expandExplicitBindersAux.loop]]
[Std.Format.indentD,[Std.Format.nestD, HAppend.hAppend, Std.Format.line]]
[Repr.reprPrec,[]]
[StateT.run_lift,[rfl]]
[unexpandProdMk,[ite, Eq, Lean.Syntax.isOfKind, Lean.Name.mkStr, Lean.Name.anonymous, Bool.true, Lean.Syntax.matchesNull, OfNat.ofNat, Bind.bind, Lean.MonadRef.mkInfoFromRefPos, Lean.MonadQuotation.getCurrMacroScope, Lean.MonadQuotation.getMainModule, Pure.pure, Lean.Syntax.node, Lean.SourceInfo.none, List.toArray, List.cons, Lean.Syntax.atom, Array.append, List.nil, Lean.Syntax.SepArray.elemsAndSeps, MonadExcept.throw, Unit.unit]]
[Lean.Syntax.instToStringSyntax,[ToString.mk, Function.comp, ToString.toString, Std.ToFormat.format]]
[Lean.Parser.Tactic.location,[Lean.ParserDescr.nodeWithAntiquot, Lean.Name.mkStr, Lean.Name.anonymous, Lean.ParserDescr.unary, Lean.ParserDescr.binary, Lean.ParserDescr.symbol, Lean.Parser.Tactic.locationWildcard, Lean.Parser.Tactic.locationHyp]]
[Nat.add_assoc,[Eq, HAdd.hAdd, rfl, congrArg, Nat.succ, PProd.fst]]
[IO.Process.StdioConfig.mk.sizeOf_spec,[Eq.refl, HAdd.hAdd, OfNat.ofNat, SizeOf.sizeOf]]
[instInhabitedUInt16.proof_1,[of_decide_eq_true, Eq.refl, Bool.true]]
[Lean.Syntax.splitNameLit,[List.reverse, List.nil]]
[ByteArray.foldlM.loop,[dite, LT.lt, Unit.unit, Pure.pure, Bind.bind, ByteArray.get, Fin.mk, ByteArray.foldlM.loop.proof_1, PProd.fst, HAdd.hAdd, OfNat.ofNat]]
[ByteArray.instInhabitedByteArray,[Inhabited.mk, ByteArray.empty]]
[HEq.noConfusionType,[]]
[LawfulApplicative.pure_seq,[]]
[precLead,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.nonReservedSymbol, Bool.false]]
[IO.FS.readFile,[Bind.bind, IO.FS.Handle.mk, IO.FS.Mode.read, Bool.false, IO.FS.Handle.readToEnd]]
[List.cons.inj,[And.intro]]
[HAppend.hAppend,[]]
[instToStringNat,[ToString.mk, Nat.repr]]
[Std.Range.mk.injEq,[Eq.propIntro, And.intro, Eq.refl, Std.Range.mk, Eq.symm, eq_of_heq, HEq.refl]]
[Subarray.forRevM,[Array.forRevM, Subarray.as, Subarray.stop, Subarray.start]]
[Monad.noConfusionType,[]]
[ExceptT.run_pure,[rfl]]
[String.back,[String.get, String.prev, String.bsize]]
[System.FilePath.withExtension,[Unit.unit, System.FilePath, System.FilePath.fileStem, System.FilePath.withFileName, ite, Eq, String.isEmpty, Bool.true, HAppend.hAppend]]
[rfl.proof_1,[Eq.refl]]
[term!_,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.symbol, Lean.ParserDescr.cat]]
[ReaderT.run_seqRight,[Eq.mpr, Eq.refl, Eq, ReaderT.run, SeqRight.seqRight, seqRight_eq_bind, rfl]]
[IO.Error.otherErrorToString,[Unit.unit, String, HAppend.hAppend, String.modify, OfNat.ofNat, Char.toLower, ToString.toString]]
[«prio(_)»,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.nonReservedSymbol, Bool.false, Lean.ParserDescr.cat, Lean.ParserDescr.symbol]]
[String.prev,[String.Pos, ite, Eq, OfNat.ofNat, PProd.fst]]
[Ord.noConfusionType,[]]
[Char.repr,[Char.quote]]
[let_body_congr,[]]
[instDecidableEqString,[String.decEq]]
[dite_true,[rfl]]
[liftM,[MonadLiftT.monadLift]]
[Lean.NameGenerator.noConfusionType,[]]
[LawfulFunctor.id_map,[]]
[Lean.Meta.Simp.ConfigCtx.noConfusionType,[]]
[ForInStep.yield.sizeOf_spec,[Eq.refl, HAdd.hAdd, OfNat.ofNat, SizeOf.sizeOf]]
[Function.comp_apply,[rfl]]
[Option.some.inj,[]]
[FloatArray.foldlM.loop,[dite, LT.lt, Unit.unit, Pure.pure, Bind.bind, FloatArray.get, Fin.mk, FloatArray.foldlM.loop.proof_1, PProd.fst, HAdd.hAdd, OfNat.ofNat]]
[Nat.lt_or_ge,[Unit.unit, Or, LT.lt, GE.ge, Or.inr, Nat.zero_le, Nat.succ, PProd.fst, Or.inl, Nat.le_succ_of_le, Nat.eq_or_lt_of_le, Nat.le_refl]]
[Measure,[InvImage, LT.lt]]
[Lean.mkCIdentFrom,[Lean.Syntax.ident, Lean.SourceInfo.fromRef, String.toSubstring, ToString.toString, List.cons, Prod.mk, List.nil]]
[Nat.sub_self,[Unit.unit, Eq, HSub.hSub, OfNat.ofNat, Eq.mpr, Eq.refl, Nat.sub_zero, rfl, Nat.succ, Nat.succ_sub_succ, PProd.fst]]
[USize.toUInt32,[Nat.toUInt32, USize.toNat]]
[Lean.Syntax.matchesNull,[Lean.Syntax.isNodeOf, Lean.nullKind]]
[USize.mul,[USize.mk, HMul.hMul, USize.val]]
[instMonadControlReaderT,[MonadControl.mk, id]]
[IO.Error.mkIllegalOperation,[IO.Error.illegalOperation]]
[ReprTuple.reprTuple,[]]
[instXorUInt8,[Xor.mk, UInt8.xor]]
[Decidable.byCases,[]]
[UInt8.mk.sizeOf_spec,[Eq.refl, HAdd.hAdd, OfNat.ofNat, SizeOf.sizeOf]]
[IO.Error.resourceExhausted.sizeOf_spec,[Eq.refl, HAdd.hAdd, OfNat.ofNat, SizeOf.sizeOf]]
[Nat.instTransLtArrowNatArrowNatPropLeArrowNatArrowNatPropLtArrowNatArrowNatProp.proof_1,[Nat.lt_of_lt_of_le]]
[instHashableList,[Hashable.mk, List.foldl, mixHash, Hashable.hash, OfNat.ofNat]]
[IO.Process.StdioConfig.stderr,[]]
[Quot.liftIndepPr1,[Quot.ind, rfl]]
[EStateM.instMonadEStateM,[Monad.mk]]
[unexpandSigma,[ite, Eq, Lean.Syntax.isOfKind, Lean.Name.mkStr, Lean.Name.anonymous, Bool.true, Lean.Syntax.matchesNull, OfNat.ofNat, cond, Bind.bind, Lean.MonadRef.mkInfoFromRefPos, Lean.MonadQuotation.getCurrMacroScope, Lean.MonadQuotation.getMainModule, Pure.pure, Lean.Syntax.node, Lean.SourceInfo.none, List.toArray, List.cons, Lean.Syntax.atom, List.nil, MonadExcept.throw, Unit.unit]]
[Std.Format.ibelow,[True, And]]
[StateT.instAlternativeStateT,[Alternative.mk, StateT.failure, StateT.orElse]]
[IO.Error.noFileOrDirectory.sizeOf_spec,[Eq.refl, HAdd.hAdd, OfNat.ofNat, SizeOf.sizeOf]]
[Quotient.mk,[Quot.mk, Setoid.r]]
[StateT.instMonadStateT,[Monad.mk]]
[Nat.right_distrib,[]]
[EIO.mapTasks,[BaseIO.mapTasks, EIO.toBaseIO]]
[Classical.inhabited_of_nonempty,[Inhabited.mk, Classical.choice]]
[StateRefT'.instMonadLiftStateRefT',[MonadLift.mk, StateRefT'.lift]]
[Array.findSomeRevM?.find,[Option, Pure.pure, Option.none]]
[instInhabitedEIO,[inferInstanceAs, Inhabited, EStateM, IO.RealWorld]]
[Std.Format.nest.inj,[And.intro]]
[HOr.hOr,[]]
[Array.uset,[Array.set, Fin.mk, USize.toNat]]
[Lean.Meta.Simp.Config.singlePass,[]]
[PSigma.revLexAccessible,[PSigma.revLexAccessible.proof_1]]
[Ne,[Not, Eq]]
[PSigma.lex,[PSigma.lex.proof_1]]
[dbgTraceVal,[dbgTrace, ToString.toString]]
[IO.Error.mkOtherError,[IO.Error.otherError]]
[UInt16.lt,[LT.lt, UInt16.val]]
[Nat.mod.proof_1,[WellFoundedRelation.wf, measure, id]]
[Function.Equiv,[Eq]]
[Array.instAppendArray,[Append.mk, Array.append]]
[Bind.noConfusionType,[]]
[Std.Format.FlattenBehavior.noConfusion,[noConfusionEnum, Std.Format.FlattenBehavior.toCtorIdx]]
[Lean.Macro.withFreshMacroScope,[Bind.bind, MonadState.modifyGet, Prod.mk, Lean.Macro.State.macroScope, Lean.Macro.State.mk, HAdd.hAdd, OfNat.ofNat, Lean.Macro.State.traceMsgs, MonadWithReader.withReader, Lean.Macro.Context.mk, Lean.Macro.Context.methods, Lean.Macro.Context.mainModule, Lean.Macro.Context.currRecDepth, Lean.Macro.Context.maxRecDepth, Lean.Macro.Context.ref]]
[«term_∧_»,[Lean.ParserDescr.trailingNode, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.symbol, Lean.ParserDescr.cat]]
[Std.Format.fill,[Std.Format.group, Std.Format.FlattenBehavior.fill]]
[Repr.noConfusionType,[]]
[recSubsingleton,[Subsingleton]]
[List.join,[Unit.unit, List, List.nil, HAppend.hAppend, PProd.fst]]
[PNonScalar.noConfusionType,[]]
[Id.map_eq,[rfl]]
[Squash.lift,[Quot.lift, Squash.lift.proof_1]]
[Int.subNatNat,[Unit.unit, Int, HSub.hSub, Int.ofNat, Int.negSucc]]
[Ordering.noConfusion,[noConfusionEnum, Ordering.toCtorIdx]]
[Quotient.inductionOn₂,[Quotient.ind]]
[eq_true_of_decide,[propext, Iff.intro, trivial, of_decide_eq_true]]
[Array.qsort,[Array.qsort.sort]]
[IO.mkRef,[ST.mkRef]]
[FloatSpec.le,[]]
[String.csize,[UInt32.toNat, Char.utf8Size]]
[«term_<$>_»,[Lean.ParserDescr.trailingNode, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.symbol, Lean.ParserDescr.cat]]
[UInt32.mod,[UInt32.mk, HMod.hMod, UInt32.val]]
[IO.setAccessRights,[IO.Prim.setAccessRights, IO.FileRight.flags]]
[StateT.map,[Bind.bind, Prod, Pure.pure, Prod.mk]]
[instOfNatUSize,[OfNat.mk, USize.ofNat]]
[coeOfTail,[CoeHTCT.mk, coeTail]]
[coeOfHead,[CoeHTCT.mk, coeHead]]
[Prod.mk.sizeOf_spec,[Eq.refl, HAdd.hAdd, OfNat.ofNat, SizeOf.sizeOf]]
[Lean.Parser.Tactic.specialize,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.nonReservedSymbol, Bool.false, Lean.ParserDescr.cat]]
[List.instLTList,[LT.mk, List.lt]]
[Prod.lex.proof_1,[WellFounded.intro, Acc, Prod.Lex, WellFoundedRelation.rel, Prod.lexAccessible, WellFounded.apply, WellFoundedRelation.wf]]
[Std.Format.instBEqFlattenBehavior,[BEq.mk, BEq.beq, Std.Format.FlattenBehavior.toCtorIdx]]
[Lean.instInhabitedNameGenerator,[Inhabited.mk, Lean.NameGenerator.mk, arbitrary]]
[PSigma.mkSkipLeft,[PSigma.mkSkipLeft.proof_1]]
[bfix3,[PProd.fst]]
[ByteArray.instAppendByteArray,[Append.mk, ByteArray.append]]
[LawfulApplicative.seqRight_eq,[]]
[Iff.trans,[Iff.intro, Iff.mp, Iff.mpr]]
[EStateM.Result.error.sizeOf_spec,[Eq.refl, HAdd.hAdd, OfNat.ofNat, SizeOf.sizeOf]]
[FloatArray.forIn.loop.proof_2,[Nat.le_of_lt, Nat.lt_of_lt_of_le, Nat.lt_succ_self]]
[calc,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.symbol, Lean.ParserDescr.unary, calcStep, Lean.ParserDescr.const]]
[List.filterRevM,[List.filterAuxM, List.reverse, List.nil]]
[UInt64.le,[LE.le, UInt64.val]]
[«term_>>>_»,[Lean.ParserDescr.trailingNode, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.symbol, Lean.ParserDescr.cat]]
[Lean.expandBrackedBinders,[Bind.bind, Lean.MonadRef.getRef, Lean.expandBrackedBindersAux, List.toArray, List.cons, List.nil]]
[Nat.isValidChar,[Or, LT.lt, OfNat.ofNat, And]]
[Fin.noConfusionType,[]]
[Subarray.noConfusionType,[]]
[Lean.Syntax.mkLit,[Lean.mkNode, List.toArray, List.cons, List.nil]]
[USize.complement,[HSub.hSub, OfNat.ofNat, HAdd.hAdd]]
[Lean.Meta.Simp.Config.eta,[]]
[instSubUSize,[Sub.mk, USize.sub]]
[Lean.Parser.Tactic.Conv.nestedTacticCore,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.nonReservedSymbol, Bool.false, Lean.ParserDescr.symbol, Lean.ParserDescr.const]]
[Std.Format.append.sizeOf_spec,[Eq.refl, HAdd.hAdd, OfNat.ofNat, SizeOf.sizeOf]]
[randNat,[Prod, Nat, Prod.mk]]
[List.filterAuxM,[List, Pure.pure, Bind.bind, PProd.fst, cond, List.cons]]
[EIO.catchExceptions,[EStateM.Result, Empty, IO.RealWorld, EStateM.Result.ok]]
[IO.Process.Child.mk.injEq,[Eq.propIntro, And.intro, Eq.refl, IO.Process.Child.mk, Eq.symm, eq_of_heq, HEq.refl]]
[Decidable.noConfusionType,[]]
[instMonadExceptOfExcept,[MonadExceptOf.mk, Except.error, Except.tryCatch]]
[«term_<|_»,[Lean.ParserDescr.trailingNode, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.symbol, Lean.ParserDescr.cat]]
[List.getLast!,[Unit.unit, panicWithPosWithDecl, OfNat.ofNat, List.getLast, List.cons, List.getLast!.proof_1]]
[instComplementUInt8,[Complement.mk, UInt8.complement]]
[Complement.noConfusionType,[]]
[Char.isLower,[and, Decidable.decide, GE.ge, Char.val, OfNat.ofNat, LE.le]]
[System.Platform.numBits_eq,[Subtype.property, System.Platform.getNumBits, Unit.unit]]
[Array.find?,[Id.run, Array.findM?]]
[String.takeRightWhile,[Substring.toString, Substring.takeRightWhile, String.toSubstring]]
[instInhabitedStdGen,[Inhabited.mk, StdGen.mk, OfNat.ofNat]]
[instToStringByteArray,[ToString.mk, List.toString, ByteArray.toList]]
[MonadState.noConfusionType,[]]
[Nat.toUInt64,[UInt64.ofNat]]
[instMonadFinallyEIO,[inferInstanceAs, MonadFinally, EStateM, IO.RealWorld]]
[Lean.Macro.instMonadRefMacroM,[Lean.MonadRef.mk, Bind.bind, MonadReader.read, Pure.pure, Lean.Macro.Context.ref, MonadWithReader.withReader, Lean.Macro.Context.mk, Lean.Macro.Context.methods, Lean.Macro.Context.mainModule, Lean.Macro.Context.currMacroScope, Lean.Macro.Context.currRecDepth, Lean.Macro.Context.maxRecDepth]]
[ST.Ref.ptrEq,[liftM, ST.Prim.Ref.ptrEq]]
[Lean.Parser.Tactic.tacticErw__,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.nonReservedSymbol, Bool.false, Lean.Parser.Tactic.rwRuleSeq, Lean.ParserDescr.unary, Lean.Parser.Tactic.location]]
[Lean.Macro.throwUnsupported,[MonadExcept.throw, Lean.Macro.Exception.unsupportedSyntax]]
[ByteArray.foldlM.proof_1,[Nat.le_refl, ByteArray.size]]
[instDecidableEqSum,[Decidable, Eq, dite, Decidable.isTrue, instDecidableEqSum.proof_1, Decidable.isFalse, instDecidableEqSum.proof_2, instDecidableEqSum.proof_3, instDecidableEqSum.proof_4, instDecidableEqSum.proof_5, instDecidableEqSum.proof_6]]
[USize.decLe,[Decidable, LE.le, inferInstanceAs]]
[Eq.substr,[Eq.symm]]
[Nat.succ_add,[Eq, HAdd.hAdd, Nat.succ, rfl, congrArg, PProd.fst]]
[Add.noConfusionType,[]]
[instReprSigma,[Repr.mk, Std.Format, Std.Format.bracket, HAppend.hAppend, repr, Std.Format.text]]
[IO.Process.Child.mk.inj,[And.intro]]
[instModUInt8,[Mod.mk, UInt8.mod]]
[Nat.repeat.loop,[PProd.fst]]
[Lean.mkIdent,[Lean.Syntax.ident, Lean.SourceInfo.none, String.toSubstring, ToString.toString, List.nil]]
[«term_<*_»,[Lean.ParserDescr.trailingNode, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.symbol, Lean.ParserDescr.cat]]
[instToStringString,[ToString.mk]]
[ExceptT.run_throw,[rfl]]
[Lean.Module.mk.injEq,[Eq.propIntro, And.intro, Eq.refl, Lean.Module.mk, Eq.symm, eq_of_heq, HEq.refl]]
[Lean.Meta.Simp.Config.iota,[]]
[Subarray.forInUnsafe,[USize.ofNat, Subarray.start, Subarray.forInUnsafe.loop]]
[Substring.bsize,[Nat, Nat.sub]]
[Array.instCoeSubarrayArray,[Coe.mk, Array.ofSubarray]]
[Std.Format.text.injEq,[Eq.propIntro, Eq.refl, Std.Format.text, Eq.symm, eq_of_heq, HEq.refl]]
[PSigma.skipLeft,[WellFoundedRelation.mk, PSigma.SkipLeft, WellFoundedRelation.rel, PSigma.skipLeft.proof_1]]
[UInt8.decLt,[Decidable, LT.lt, inferInstanceAs]]
[String.Iterator.remainingToString,[String, String.extract, String.bsize]]
[StateCpsT.run,[StateCpsT.runK, Pure.pure, Prod.mk]]
[Array.eraseIdx',[Array.eraseIdxSzAux, HAdd.hAdd, Fin.val, OfNat.ofNat, Array.eraseIdx'.proof_1]]
[IO.AccessRight.mk.sizeOf_spec,[Eq.refl, HAdd.hAdd, OfNat.ofNat, SizeOf.sizeOf]]
[HEq.rfl.proof_1,[HEq.refl]]
[UInt16.le,[LE.le, UInt16.val]]
[Subarray.mk.injEq,[Eq.propIntro, And.intro, Eq.refl, Subarray.mk, Eq.symm, eq_of_heq, HEq.refl]]
[Lean.Macro.Context.maxRecDepth,[]]
[Lean.MonadQuotation.noConfusionType,[]]
[Nat.le_refl,[Nat.le.refl]]
[instDecidableAnd.proof_2,[And.left]]
[default.sizeOf,[OfNat.ofNat]]
[Reader,[ReaderT, Id]]
[Lean.version.patch,[Unit.unit]]
[instDecidableEqPUnit,[Decidable.isTrue, PUnit.subsingleton]]
[Lean.Name.eraseMacroScopes,[Unit.unit, Lean.Name, Lean.Name.hasMacroScopes, BEq.beq, PProd.fst, Lean.Name.anonymous]]
[Array.extLit,[Array.ext, Eq.trans, Eq.symm]]
[eq_false_of_decide,[propext, Iff.intro, absurd, of_decide_eq_false, False.elim]]
[HAdd.noConfusionType,[]]
[Array.«term__[_:]»,[Lean.ParserDescr.trailingNode, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.const, Lean.ParserDescr.symbol, Lean.ParserDescr.cat]]
[HMod.hMod,[]]
[instHAppend,[HAppend.mk, Append.append]]
[ForIn.noConfusionType,[]]
[Array.setD,[dite, LT.lt, Array.size, Array.set, Fin.mk]]
[List.toArrayAux,[Array, PProd.fst, Array.push]]
[Lean.Meta.Simp.Config.maxDischargeDepth,[]]
[ExceptT.run,[]]
[IO.FS.Mode.readWrite.sizeOf_spec,[Eq.refl, OfNat.ofNat]]
[Nat.add_right_cancel,[Nat.add_left_cancel, Eq.mp, Eq.refl, Eq, HAdd.hAdd, Nat.add_comm]]
[List.forIn_cons,[rfl]]
[StdGen.noConfusionType,[]]
[WellFounded.fixFEq.proof_1,[rfl]]
[EIO.bindTask,[BaseIO.bindTask, EIO.catchExceptions, Pure.pure, Task.pure, Except.error]]
[MonadControlT.restoreM,[]]
[FloatArray.isEmpty,[BEq.beq, FloatArray.size, OfNat.ofNat]]
[LE.le,[]]
[Lean.Parser.Tactic.contradiction,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.nonReservedSymbol, Bool.false]]
[instToStreamRangeRange,[ToStream.mk]]
[Lean.Syntax.hasArgs,[Lean.Syntax.missing, Lean.Syntax.atom, Lean.Syntax.ident, Bool, Decidable.decide, GT.gt, Array.size, OfNat.ofNat, Bool.false]]
[List.instEmptyCollectionList,[EmptyCollection.mk, List.nil]]
[instXorUSize,[Xor.mk, USize.xor]]
[instHModUInt16NatUInt16,[HMod.mk, UInt16.modn]]
[Nat.mul_le_mul_right,[Nat.mul_le_mul_left, Nat.mul_comm]]
[ByteArray.append,[ByteArray.copySlice, OfNat.ofNat, ByteArray.size, Bool.false]]
[coeId,[CoeT.mk]]
[Fin.ofNat,[Fin.mk, HMod.hMod, Nat.succ, Fin.ofNat.proof_1]]
[String.Iterator.prev,[String.Iterator, String.Iterator.mk, String.prev]]
[Lean.Parser.Tactic.tacticUnhygienic_,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.nonReservedSymbol, Bool.false, Lean.ParserDescr.const]]
[Nat.noConfusionType,[]]
[Std.Range.step,[]]
[System.FilePath.instDivFilePath,[Div.mk, System.FilePath.join]]
[instReprAtomUInt32,[ReprAtom.mk]]
[Nat.land,[Nat.bitwise, and]]
[Fin.decLt,[Nat.decLt, Fin.val]]
[StateRefT'.instMonadStateRefT',[inferInstanceAs, Monad, ReaderT, ST.Ref]]
[List.cons_append,[rfl]]
[WellFoundedRelation.mk.injEq,[Eq.propIntro, Eq.refl, WellFoundedRelation.mk, Eq.symm, eq_of_heq, HEq.refl]]
[Lean.Syntax.SepArray.instCoeTailSepArrayArraySyntax,[CoeTail.mk, Lean.Syntax.SepArray.getElems]]
[Array.getOp,[Array.get!]]
[System.Platform.isEmscripten,[System.Platform.getIsEmscripten, Unit.unit]]
[Array.foldrMUnsafe.fold,[ite, Eq, BEq.beq, Bool.true, Pure.pure, Bind.bind, Array.uget, HSub.hSub, OfNat.ofNat, lcProof, Array.foldrMUnsafe.fold]]
[System.FilePath.mk.injEq,[Eq.propIntro, Eq.refl, System.FilePath.mk, Eq.symm, eq_of_heq, HEq.refl]]
[Setoid.noConfusionType,[]]
[Array.findIdx?.loop,[dite, LT.lt, Array.size, Option, Nat, False.elim, Array.findIdx?.loop.proof_1, ite, Eq, Array.get, Fin.mk, Bool.true, Option.some, Option.none]]
[instToStringUSize,[ToString.mk, ToString.toString, USize.toNat]]
[FloatArray.mkEmpty,[FloatArray.mk, List.toArray, List.nil]]
[Std.Format.prettyM,[List.cons, Bool.false, Std.Format.FlattenBehavior.allOrNone, Int.ofNat, OfNat.ofNat, List.nil]]
[instInhabitedUInt16,[Inhabited.mk, UInt16.ofNatCore, OfNat.ofNat, instInhabitedUInt16.proof_1]]
[String.revPosOf,[ite, Eq, BEq.beq, String.bsize, OfNat.ofNat, Bool.true, Option.none, String.revPosOfAux, String.prev]]
[ST.Ref.modify,[liftM, ST.Prim.Ref.modify]]
[Std.Format.groupEx,[Std.Format.group, Std.Format.FlattenBehavior.allOrNone]]
[instAndOpUInt16,[AndOp.mk, UInt16.land]]
[IO.mapTasks,[EIO.mapTasks]]
[Lean.Parser.Tactic.Conv.congr,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.nonReservedSymbol, Bool.false]]
[solve,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.nonReservedSymbol, Bool.false, Lean.ParserDescr.unary, Lean.ParserDescr.const, Lean.ParserDescr.symbol]]
[DecidablePred,[Decidable]]
[implies_congr,[rfl]]
[Int.instNegInt,[Neg.mk, Int.neg]]
[Substring.takeRightWhile,[Substring, Substring.mk]]
[Array.filter,[Array.foldl, ite, Eq, Bool.true, Array.push, List.toArray, List.nil]]
[Int.decLe,[Decidable, Int.NonNeg, Decidable.isTrue, Int.NonNeg.mk, Decidable.isFalse, Eq.refl, Int.negSucc, HEq.refl, False, HSub.hSub]]
[or_true,[propext, Iff.intro, trivial, Or.inr]]
[PSum.noConfusionType,[]]
[USize.val,[]]
[List.findM?,[Unit.unit, Option, Pure.pure, Option.none, Bind.bind, Option.some, PProd.fst]]
[StdGen.mk.sizeOf_spec,[Eq.refl, HAdd.hAdd, OfNat.ofNat, SizeOf.sizeOf]]
[Int.add,[Int, Int.ofNat, HAdd.hAdd, Int.subNatNat, Nat.succ, Int.negSucc]]
[Bool.true_and,[rfl, Eq.symm, Eq.refl]]
[ite_false,[rfl]]
[OptionT.orElse,[OptionT.mk, Bind.bind, Option.none, Option, Pure.pure, Option.some, Unit.unit]]
[instHashableUInt8,[Hashable.mk, UInt8.toUInt64]]
[Prod.anyI,[Nat.anyAux, Prod.snd, HSub.hSub, Prod.fst]]
[Array.shrink,[HSub.hSub, Array.size, Array.shrink.loop]]
[«term∃_,_»,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.symbol, Lean.explicitBinders, Lean.ParserDescr.cat]]
[invImage.proof_1,[InvImage.wf, WellFoundedRelation.wf]]
[ExceptT.tryCatch,[ExceptT.mk, Bind.bind, Except, Pure.pure, Except.ok]]
[UInt16.toNat,[Fin.val, UInt16.val]]
[StateM,[StateT, Id]]
[StateCpsT.runK_lift,[rfl]]
[Except.orElseLazy,[Except, Except.ok, Unit.unit]]
[instDecidableLe_1,[UInt8.decLe]]
[Std.Format.defWidth,[OfNat.ofNat]]
[HShiftLeft.noConfusionType,[]]
[Nat.instAndOpNat,[AndOp.mk, Nat.land]]
[let_congr,[]]
[OrOp.noConfusionType,[]]
[instComplementUInt64,[Complement.mk, UInt64.complement]]
[FloatSpec.float,[]]
[«term#[_,]»,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.symbol, Lean.ParserDescr.sepBy, Lean.ParserDescr.cat, Bool.false]]
[MonadState.set,[]]
[Array.toArrayLit.proof_1,[Nat.le_refl, Array.size]]
[instReprUSize,[Repr.mk, repr, USize.toNat]]
[instToStringUInt8,[ToString.mk, ToString.toString, UInt8.toNat]]
[USize.size,[HPow.hPow, OfNat.ofNat, System.Platform.numBits]]
[Array.size,[List.length, Array.data]]
[Classical.decidableInhabited,[Inhabited.mk, inferInstance]]
[Lean.Module.mk.inj,[And.intro]]
[eq_false',[propext, Iff.intro, absurd, False.elim]]
[FloatArray.empty,[FloatArray.mkEmpty, OfNat.ofNat]]
[instToStringId_1,[inferInstanceAs, ToString]]
[instHMul,[HMul.mk, Mul.mul]]
[UInt8.shiftLeft,[UInt8.mk, HShiftLeft.hShiftLeft, UInt8.val, UInt8.modn, OfNat.ofNat]]
[Option.isSome,[Unit.unit, Bool, Bool.true, Bool.false]]
[Nat.toUInt16,[UInt16.ofNat]]
[Array.ext.extAux,[rfl, Eq.symm, Eq.mp, Eq.refl, Eq, List.length, List.nil, List.cons, List.length_cons]]
[instDecidableEqSum.proof_1,[rfl]]
[String.toUpper,[String.map, Char.toUpper]]
[Lean.Name.appendAfter,[Lean.Name.modifyBase, Lean.Name.anonymous, Lean.Name.num, Lean.Name, Lean.Name.mkStr, HAppend.hAppend]]
[Lean.instQuoteNat,[Lean.Quote.mk, Lean.Syntax.mkNumLit, ToString.toString, Lean.SourceInfo.none]]
[instSizeOfNat,[SizeOf.mk]]
[instInhabitedSort,[Inhabited.mk, PUnit]]
[ExceptCpsT.lift,[Bind.bind]]
[Char.utf8Size.proof_6,[of_decide_eq_true, Eq.refl, Bool.true]]
[Std.Format.MonadPrettyFormat.pushNewline,[]]
[Lean.Parser.Tactic.tacticHave'_,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.nonReservedSymbol, Bool.false, Lean.ParserDescr.const]]
[MonadFunctor.monadMap,[]]
[Pure.pure,[]]
[Ordering.isLE,[Unit.unit, Bool, Bool.true, Bool.false]]
[Lean.Syntax.copyHeadTailInfoFrom,[Lean.Syntax.setTailInfo, Lean.Syntax.setHeadInfo, Lean.Syntax.getHeadInfo, Lean.Syntax.getTailInfo]]
[IO.Error.mkResourceExhaustedFile,[Function.comp, IO.Error.resourceExhausted, Option.some]]
[List.toStringAux,[Bool.false, Bool.true, String, HAppend.hAppend, ToString.toString, PProd.fst]]
[HEq.trans,[HEq.subst]]
[System.FilePath.mk.sizeOf_spec,[Eq.refl, HAdd.hAdd, OfNat.ofNat, SizeOf.sizeOf]]
[Nat.anyM.loop,[Unit.unit, Bool, Pure.pure, Bool.false, Bind.bind, HSub.hSub, OfNat.ofNat, Bool.true, PProd.fst]]
[StateT.monadControl,[MonadControl.mk, Prod, Bind.bind, MonadState.get, liftM, StateT.run, StateT, MonadStateOf.set, Pure.pure]]
[instAndOpUInt32,[AndOp.mk, UInt32.land]]
[Except.tryCatch,[Except, Except.ok]]
[instShiftRightUInt32,[ShiftRight.mk, UInt32.shiftRight]]
[Lean.Parser.Tactic.Conv.convArgs,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.nonReservedSymbol, Bool.false]]
[instDecidableDite,[Decidable, dite]]
[Sum.inl.injEq,[Eq.propIntro, Eq.refl, Sum.inl, Eq.symm, eq_of_heq, HEq.refl]]
[Nat.mod_eq_of_lt,[]]
[IO.FS.Stream.getLine,[]]
[Lean.Parser.Tactic.«tacticNext___=>_»,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.nonReservedSymbol, Bool.false, Lean.ParserDescr.unary, Lean.ParserDescr.const, Lean.ParserDescr.symbol]]
[Nat.sub_zero,[rfl]]
[FloatArray.forIn.loop.proof_1,[Nat.lt_of_le_of_lt, Nat.sub_le, HSub.hSub, FloatArray.size, OfNat.ofNat, Nat.sub_lt, Nat.zero_lt_of_lt, Nat.lt_of_lt_of_le, Nat.lt_succ_self, of_decide_eq_true, Eq.refl, Bool.true]]
[Substring.dropRight,[Substring.mk, Substring, HAdd.hAdd, Substring.prevn, Substring.bsize]]
[IO.Process.Stdio.piped.sizeOf_spec,[Eq.refl, OfNat.ofNat]]
[Float.lt,[FloatSpec.lt, floatSpec]]
[true_ne_false,[ne_false_of_self, trivial]]
[instToStringSubtype,[ToString.mk, ToString.toString, Subtype.val]]
[Lean.isIdEndEscape,[Decidable.decide, Eq, Lean.idEndEscape]]
[IO.FS.instBEqFileType,[BEq.mk, BEq.beq, IO.FS.FileType.toCtorIdx]]
[Array.mapSepElemsM,[OfNat.ofNat, List.toArray, List.nil]]
[boolToSort,[CoeSort.mk, Eq, Bool.true]]
[List.findSome?,[Unit.unit, Option, Option.none, Option.some, PProd.fst]]
[LawfulMonad.bind_pure_comp,[]]
[Subrelation.accessible,[Subrelation.accessible.proof_1]]
[Char.isDigit,[and, Decidable.decide, GE.ge, Char.val, OfNat.ofNat, LE.le]]
[StdGen.mk.inj,[And.intro]]
[Lean.Syntax.mkSep,[Lean.mkNullNode, Lean.mkSepArray]]
[IO.Process.Output.mk.sizeOf_spec,[Eq.refl, HAdd.hAdd, OfNat.ofNat, SizeOf.sizeOf]]
[instReprIterator,[Repr.mk, Std.Format, Repr.addAppParen, HAppend.hAppend, Std.Format.text, reprArg]]
[Array.eraseIdx'.proof_1,[rfl]]
[CoeTail.noConfusionType,[]]
[List.map,[Unit.unit, List, List.nil, List.cons, PProd.fst]]
[Lean.mkAtom,[Lean.Syntax.atom, Lean.SourceInfo.none]]
[Lean.expandBrackedBindersAux,[Array.size, Lean.expandBrackedBindersAux.loop]]
[Except.toOption,[Option, Option.some, Option.none]]
[Lean.Macro.trace,[modify, Lean.Macro.State.mk, Lean.Macro.State.macroScope, List.cons, Prod.mk, Lean.Macro.State.traceMsgs]]
[Task.Priority,[Nat]]
[UInt64.ofNat,[UInt64.mk, Fin.ofNat]]
[List.append_assoc,[rfl, of_eq_true, Eq.trans, congr, congrArg, Eq, congrFun, HAppend.hAppend, List.cons_append, List.cons, eq_self]]
[Lean.isIdFirst,[or, Char.isAlpha, Decidable.decide, Eq, Char.ofNat, Lean.isLetterLike]]
[DoResultBC.noConfusionType,[]]
[Lean.Parser.Tactic.Conv.ext,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.nonReservedSymbol, Bool.false, Lean.ParserDescr.unary, Lean.ParserDescr.const]]
[StateCpsT.runK_get,[rfl]]
[«term[_]»,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.symbol, Lean.ParserDescr.sepBy, Lean.ParserDescr.cat, Bool.false]]
[Lean.groupKind,[Lean.Name.mkStr, Lean.Name.anonymous]]
[FloatArray.foldlMUnsafe.fold,[ite, Eq, BEq.beq, Bool.true, Pure.pure, Bind.bind, FloatArray.uget, lcProof, FloatArray.foldlMUnsafe.fold, HAdd.hAdd, OfNat.ofNat]]
[Pow.pow,[]]
[Except.noConfusionType,[]]
[EIO,[EStateM, IO.RealWorld]]
[Array.filterSepElemsM,[OfNat.ofNat, List.toArray, List.nil]]
[Lean.Parser.Tactic.injections,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.nonReservedSymbol, Bool.false]]
[«term¬_»,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.symbol, Lean.ParserDescr.cat]]
[String.front,[String.get, OfNat.ofNat]]
[IO.Process.SpawnArgs.args,[]]
[Alternative.toApplicative,[]]
[ReaderT.run,[]]
[Except.toBool,[Bool, Bool.true, Bool.false]]
[Nat.sub_lt,[LT.lt, HSub.hSub, absurd, Nat.lt_irrefl, OfNat.ofNat, Eq.symm, Nat.succ_sub_succ_eq_sub]]
[IO.Error.noFileOrDirectory.injEq,[Eq.propIntro, And.intro, Eq.refl, IO.Error.noFileOrDirectory, Eq.symm, eq_of_heq, HEq.refl]]
[OfScientific.ofScientific,[]]
[instBEqOrdering,[BEq.mk, BEq.beq, Ordering.toCtorIdx]]
[Nat.ble,[Unit.unit, Bool, Bool.true, Bool.false, PProd.fst]]
[mt,[]]
[Std.Format.isNil,[Unit.unit, Std.Format.line, Std.Format.text, Std.Format.nest, Std.Format.append, Std.Format.group, Std.Format.tag, Bool, Bool.true, Bool.false]]
[instShiftRightUInt8,[ShiftRight.mk, UInt8.shiftRight]]
[coeB,[Coe.coe]]
[EStateM,[EStateM.Result]]
[System.mkFilePath,[System.FilePath.mk, String.intercalate, Char.toString, System.FilePath.pathSeparator]]
[Nat.instTransLeArrowNatArrowNatPropLtArrowNatArrowNatPropLtArrowNatArrowNatProp.proof_1,[Nat.lt_of_le_of_lt]]
[List.forIn,[List.forIn.loop]]
[tryFinally,[Functor.map, Prod.fst]]
[Lean.MonadQuotation.withFreshMacroScope,[]]
[Function.const,[]]
[instDecidableEqOption,[Unit.unit, Decidable, Eq, Decidable.isTrue, rfl, Decidable.isFalse, dite]]
[IO.Error.mkUnsatisfiedConstraints,[IO.Error.unsatisfiedConstraints]]
[Lean.Macro.throwError,[Bind.bind, Lean.MonadRef.getRef, MonadExcept.throw, Lean.Macro.Exception.error]]
[instMulUInt8,[Mul.mk, UInt8.mul]]
[Array.findSomeRevM?.find.proof_2,[Nat.le_of_lt, Nat.lt_of_lt_of_le, Nat.lt_succ_self]]
[IO.Error.unsupportedOperation.sizeOf_spec,[Eq.refl, HAdd.hAdd, OfNat.ofNat, SizeOf.sizeOf]]
[Nat.le_add_right,[LE.le, HAdd.hAdd, Nat.le_refl, Nat.le_succ_of_le, PProd.fst]]
[Lean.Macro.Methods.getCurrNamespace,[]]
[Lean.termEval_prec_,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.symbol, Lean.ParserDescr.cat]]
[List.getLastD.proof_1,[]]
[IO.Error.unsatisfiedConstraints.injEq,[Eq.propIntro, And.intro, Eq.refl, IO.Error.unsatisfiedConstraints, Eq.symm, eq_of_heq, HEq.refl]]
[forall_congr,[]]
[ST.Ref.ref,[]]
[Substring.stopPos,[]]
[Subrelation.accessible.proof_1,[Acc.intro]]
[StateCpsT.instLawfulMonadStateCpsT,[StateCpsT.instLawfulMonadStateCpsT.proof_1]]
[UInt32.sub,[UInt32.mk, HSub.hSub, UInt32.val]]
[Lean.Name.num.inj,[And.intro]]
[Option.none.sizeOf_spec,[Eq.refl, OfNat.ofNat]]
[IO.FS.Stream.ofHandle,[IO.FS.Stream.mk, IO.FS.Handle.isEof, IO.FS.Handle.flush, IO.FS.Handle.read, IO.FS.Handle.write, IO.FS.Handle.getLine, IO.FS.Handle.putStr]]
[EStateM.Result.error.injEq,[Eq.propIntro, And.intro, Eq.refl, EStateM.Result.error, Eq.symm, eq_of_heq, HEq.refl]]
[System.FilePath.fileStem,[Option.map, Unit.unit, dite, Eq, Eq.symm, String, String.revPosOf, Char.ofNat, String.extract, OfNat.ofNat, System.FilePath.fileName]]
[eq_false_of_ne_true,[Eq, Bool.false, False.elim, rfl]]
[Lean.Parser.Tactic.Conv.convRw__,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.nonReservedSymbol, Bool.false, Lean.ParserDescr.unary, Lean.Parser.Tactic.config, Lean.Parser.Tactic.rwRuleSeq]]
[List.length_dropLast,[Unit.unit, Eq, List.length, List.dropLast, HSub.hSub, OfNat.ofNat, rfl]]
[Nat.mul,[Nat, OfNat.ofNat, Nat.add, PProd.fst]]
[Nat.lt_of_le_of_ne,[LT.lt, Nat.lt_or_ge, absurd, Nat.le_antisymm]]
[Char.instDecidableLt,[UInt32.decLt, Char.val]]
[UInt8.ofNat,[UInt8.mk, Fin.ofNat]]
[System.Platform.isWindows,[System.Platform.getIsWindows, Unit.unit]]
[Mul.mul,[]]
[UInt8.decEq,[Decidable, Eq, dite, Decidable.isTrue, UInt8.decEq.proof_1, Decidable.isFalse, UInt8.decEq.proof_2]]
[«term_<->_»,[Lean.ParserDescr.trailingNode, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.symbol, Lean.ParserDescr.cat]]
[String.noConfusionType,[]]
[Nat.mul_lt_mul_of_pos_right,[Nat.mul_lt_mul_of_pos_left, Nat.mul_comm]]
[instSubsingletonPUnit,[Subsingleton.intro, PUnit.subsingleton]]
[not,[Unit.unit, Bool, Bool.false, Bool.true]]
[instHashableBool,[Hashable.mk, Unit.unit, UInt64, OfNat.ofNat]]
[Classical.propDecidable.proof_1,[Nonempty, Decidable, Classical.em, Nonempty.intro, Decidable.isTrue, Decidable.isFalse]]
[Nat.sub,[Nat, Nat.pred, PProd.fst]]
[Except.mapError,[Except, Except.error, Except.ok]]
[unsafeCast,[cast, unsafeCast.proof_1, PUnit]]
[Int.negSucc.injEq,[Eq.propIntro, Eq.refl, Int.negSucc, Eq.symm, eq_of_heq, HEq.refl]]
[Array.ext,[congrArg, Array.mk, Eq.symm, Eq.refl, Array.ext.extAux]]
[Array.unzip,[Array.foldl, Prod, Array, Prod.mk, Array.push, List.toArray, List.nil, OfNat.ofNat, Array.size]]
[Lean.Macro.addMacroScope,[Bind.bind, MonadReader.read, Pure.pure, Lean.addMacroScope, Lean.Macro.Context.mainModule, Lean.Macro.Context.currMacroScope]]
[IO.Error.timeExpired.inj,[And.intro]]
[instOrOpUInt8,[OrOp.mk, UInt8.lor]]
[FloatArray.uget,[Float, Array.uget]]
[Nat.not_succ_le_zero,[False, Eq.refl, OfNat.ofNat, HEq.refl]]
[Bool.noConfusionType,[]]
[calcStep,[Lean.ParserDescr.nodeWithAntiquot, Lean.Name.mkStr, Lean.Name.anonymous, Lean.ParserDescr.binary, Lean.ParserDescr.const, Lean.ParserDescr.cat, OfNat.ofNat, Lean.ParserDescr.symbol, Lean.ParserDescr.unary]]
[PSigma.snd,[]]
[EStateM.map,[EStateM.Result, EStateM.Result.ok, EStateM.Result.error]]
[withPtrEqUnsafe,[ite, Eq, BEq.beq, ptrAddrUnsafe, Bool.true, Unit.unit]]
[Lean.Syntax.getKind,[Unit.unit, Lean.SyntaxNodeKind, Lean.Name.mkStr, Lean.Name.anonymous, Lean.Name.mkSimple, Lean.identKind]]
[Nat.ibelow,[True, And]]
[UInt64.div,[UInt64.mk, HDiv.hDiv, UInt64.val]]
[PProd.fst,[]]
[UInt64.decLe,[Decidable, LE.le, inferInstanceAs]]
[LawfulFunctor.noConfusionType,[]]
[HAppend.noConfusionType,[]]
[MonadFunctorT.noConfusionType,[]]
[withPtrEq,[Unit.unit]]
[List.isEmpty,[Unit.unit, Bool, Bool.true, Bool.false]]
[EIO.toIO',[liftM, EIO.toBaseIO]]
[FloatArray.mk.inj,[]]
[«term_∘_»,[Lean.ParserDescr.trailingNode, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.symbol, Lean.ParserDescr.cat]]
[instShiftRightUSize,[ShiftRight.mk, USize.shiftRight]]
[instToStringUInt16,[ToString.mk, ToString.toString, UInt16.toNat]]
[IO.Error.mkNoFileOrDirectory,[IO.Error.noFileOrDirectory]]
[IO.Error.illegalOperation.inj,[And.intro]]
[Nat.gcd_self,[of_eq_true, Eq.trans, congr, congrArg, Eq, Nat.gcd, Nat.zero_eq, Nat.gcd_zero_right, OfNat.ofNat, eq_true_of_decide, Eq.refl, Bool.true, Eq.symm, congrFun, Nat.gcd_succ, Nat.succ, Nat.mod_self, Nat.gcd_zero_left, eq_self]]
[Lean.Syntax.getArgs,[Lean.Syntax.missing, Lean.Syntax.atom, Lean.Syntax.ident, Array, Lean.Syntax, Array.empty]]
[ofBoolUsing_eq_true,[of_decide_eq_true]]
[Fin.instSubFin,[Sub.mk, Fin.sub]]
[Int.instSubInt,[Sub.mk, Int.sub]]
[UInt32.add,[UInt32.mk, HAdd.hAdd, UInt32.val]]
[Nat.add_le_add,[Nat.le_trans, Nat.add_le_add_right, Nat.add_le_add_left]]
[StateT.seqLeft_eq,[StateT.ext, of_eq_true, Eq.trans, congr, congrArg, Eq, StateT.run_seqLeft, StateT.run_seq, Functor.map, Function.const, Bind.bind, StateT.run_map, map_eq_pure_bind, Prod.mk, Prod.fst, Prod.snd, StateT.run, funext, LawfulMonad.bind_assoc, Pure.pure, LawfulMonad.pure_bind, congrFun, Function.const_apply, eq_self]]
[unsafeBaseIO,[EStateM.Result.error, EStateM.run, Unit.unit]]
[FloatArray.size,[Nat, Array.size]]
[TC.wf.proof_1,[WellFounded.intro, TC.accessible, WellFounded.apply]]
[String.Iterator.extract,[String, ite, Eq, or, Decidable.decide, Ne, GT.gt, Bool.true, String.extract]]
[List.bind,[List.join, List.map]]
[instLEUInt8,[LE.mk, UInt8.le]]
[MonadLift.noConfusionType,[]]
[getThe,[MonadStateOf.get]]
[String.trimLeft,[Substring.toString, Substring.trimLeft, String.toSubstring]]
[Fin.instOfNatFinHAdd,[OfNat.mk, Fin.ofNat]]
[USize.ofNat32,[USize.mk, Fin.mk, USize.ofNat32.proof_1]]
[ExceptCpsT.instMonadExceptCpsT,[Monad.mk]]
[instMonadControlOptionT,[MonadControl.mk, Option, liftM, OptionT.run]]
[Std.Format.group.sizeOf_spec,[Eq.refl, HAdd.hAdd, OfNat.ofNat, SizeOf.sizeOf]]
[Nat.instTransLeArrowNatArrowNatPropLeArrowNatArrowNatPropLeArrowNatArrowNatProp.proof_1,[Nat.le_trans]]
[Nat.zero_lt_succ,[Nat.succ_le_succ, Nat.zero_le]]
[Nat.max,[ite, LE.le]]
[Id.instOfNatId,[inferInstanceAs, OfNat]]
[Array.«term__[:_]»,[Lean.ParserDescr.trailingNode, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.const, Lean.ParserDescr.symbol, Lean.ParserDescr.cat]]
[ExceptCpsT.run_bind_throw,[rfl]]
[floatDecLt,[Float.decLt]]
[instToStringList,[ToString.mk, List.toString]]
[and,[Unit.unit, Bool, Bool.false]]
[StateRefT'.instAlternativeStateRefT',[inferInstanceAs, Alternative, ReaderT, ST.Ref]]
[PSigma.fst,[]]
[NonScalar.noConfusionType,[]]
[StateT.run_monadLift,[rfl]]
[Char.isValidCharNat,[Or, LT.lt, OfNat.ofNat, And]]
[SizeOfRef,[Measure, SizeOf.sizeOf]]
[Std.Range.mk.inj,[And.intro]]
[instShiftRightUInt64,[ShiftRight.mk, UInt64.shiftRight]]
[Lean.Macro,[Lean.MacroM, Lean.Syntax]]
[Seq.seq,[]]
[instToStringSubarray,[ToString.mk, ToString.toString, Subarray.toArray]]
[instInhabitedUInt64.proof_1,[of_decide_eq_true, Eq.refl, Bool.true]]
[List.replicate,[List.nil, List.replicate.loop]]
[Lean.Parser.Tactic.subst,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.nonReservedSymbol, Bool.false, Lean.ParserDescr.unary, Lean.ParserDescr.const]]
[Lean.Meta.Simp.instInhabitedConfig,[Inhabited.mk, Lean.Meta.Simp.Config.mk, arbitrary]]
[instStreamList,[Stream.mk, Unit.unit, Option, Prod, List, Option.none, Option.some, Prod.mk]]
[MProd.mk.inj,[And.intro]]
[Lean.Meta.Rewrite.Config.noConfusionType,[]]
[String.Iterator.mk.sizeOf_spec,[Eq.refl, HAdd.hAdd, OfNat.ofNat, SizeOf.sizeOf]]
[instDecidableEqProd.proof_1,[rfl]]
[Array.swap.proof_1,[Eq.symm, Array.size_set, Array.get]]
[Lean.instQuoteList,[Lean.Quote.mk, Unit.unit, Lean.Syntax, Lean.mkCIdent, Lean.Name.mkStr, Lean.Name.anonymous, Lean.Syntax.mkCApp, List.toArray, List.cons, Lean.Quote.quote, PProd.fst, List.nil]]
[coeOfHeadOfTC,[CoeHTCT.mk, coeTC, coeHead]]
[Lean.Syntax.ident.sizeOf_spec,[Eq.refl, HAdd.hAdd, OfNat.ofNat, SizeOf.sizeOf]]
[instInhabitedExcept,[Inhabited.mk, Except.error, arbitrary]]
[List.init,[Unit.unit, List.cons, List, List.nil, PProd.fst]]
[Iff.mp,[]]
[Quot.indBeta,[rfl]]
[Repr.addAppParen,[ite, GE.ge, OfNat.ofNat, Std.Format.paren]]
[Array.toListLitAux,[List, PProd.fst, Array.toListLitAux.proof_1, List.cons, Array.getLit, Array.toListLitAux.proof_2]]
[instMonadReader,[MonadReader.mk, readThe]]
[instShiftLeftUSize,[ShiftLeft.mk, USize.shiftLeft]]
[Except.instMonadExcept,[Monad.mk]]
[ReaderT.run_seq,[Eq.mpr, Eq.refl, Eq, ReaderT.run, Seq.seq, seq_eq_bind, rfl]]
[instShiftLeftUInt64,[ShiftLeft.mk, UInt64.shiftLeft]]
[Nat.beq,[Unit.unit, Bool, Bool.true, Bool.false, PProd.fst]]
[List.head!,[Unit.unit, panicWithPosWithDecl, OfNat.ofNat]]
[ReaderT.ext,[funext, id]]
[Char.utf8Size.proof_1,[of_decide_eq_true, Eq.refl, Bool.true]]
[Lean.ParserDescr.noConfusionType,[]]
[Lean.Syntax.decodeCharLit,[OptionM.run, ite, Eq, BEq.beq, Char.ofNat, Bool.true, Bind.bind, Lean.Syntax.decodeQuotedChar, OfNat.ofNat, OptionM, Char, Pure.pure]]
[Float.mk.inj,[]]
[«term_<&>_»,[Lean.ParserDescr.trailingNode, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.symbol, Lean.ParserDescr.cat]]
[instDecidableEqUInt64,[UInt64.decEq]]
[Lean.Syntax.isNodeOf,[and, Lean.Syntax.isOfKind, BEq.beq, Lean.Syntax.getNumArgs]]
[noConfusionEnum.proof_1,[Eq.symm, if_pos]]
[Nat.lt_of_lt_of_le,[Nat.le_trans]]
[Classical.inhabited_of_exists.proof_1,[Exists.elim, Nonempty.intro]]
[Classical.typeDecidable.proof_1,[absurd, Nonempty.intro]]
[IO.FS.SystemTime.nsec,[]]
[IO.Process.Child.stderr,[]]
[Array.foldlMUnsafe,[ite, LT.lt, LE.le, Array.size, USize.ofNat, Pure.pure, Array.foldlMUnsafe.fold]]
[instHSub,[HSub.mk, Sub.sub]]
[Int.instMulInt,[Mul.mk, Int.mul]]
[Array.modifyM,[dite, LT.lt, Array.size, Bind.bind, Pure.pure, Array.set, Array.modifyM.proof_1]]
[ByteArray.get!,[UInt8, Array.get!]]
[Lean.instEvalIO,[Lean.Eval.mk, Bind.bind, Unit.unit, Lean.Eval.eval, Bool.true]]
[EmptyCollection.emptyCollection,[]]
[instNonempty.proof_1,[Nonempty.intro, arbitrary]]
[IO.Error.invalidArgument.injEq,[Eq.propIntro, And.intro, Eq.refl, IO.Error.invalidArgument, Eq.symm, eq_of_heq, HEq.refl]]
[ReaderT.failure,[Alternative.failure]]
[coeOfHTCT,[CoeT.mk, CoeHTCT.coe]]
[Applicative.toSeqLeft,[]]
[Nat.gcd_succ,[rfl]]
[ByteArray.forIn.loop.proof_1,[Nat.lt_of_le_of_lt, Nat.sub_le, HSub.hSub, ByteArray.size, OfNat.ofNat, Nat.sub_lt, Nat.zero_lt_of_lt, Nat.lt_of_lt_of_le, Nat.lt_succ_self, of_decide_eq_true, Eq.refl, Bool.true]]
[StateT.run,[]]
[Array.forInUnsafe.loop,[ite, LT.lt, Bind.bind, Pure.pure, Array.forInUnsafe.loop, HAdd.hAdd, OfNat.ofNat]]
[CoeHTCT.coe,[]]
[iff_false,[propext, Iff.intro, Iff.mp, False.elim]]
[FloatSpec.decLe,[]]
[Nat.zero_ne_one,[]]
[UInt32.complement,[HSub.hSub, OfNat.ofNat, HAdd.hAdd]]
[IO.FS.FileType.toCtorIdx,[OfNat.ofNat]]
[Task.noConfusionType,[]]
[Array.binSearch,[ite, LT.lt, Array.size, Array.binSearchAux, id, Option.none]]
[Lean.Parser.Tactic.Conv.simp,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.nonReservedSymbol, Bool.false, Lean.ParserDescr.unary, Lean.Parser.Tactic.config, Lean.Parser.Tactic.discharger, Lean.ParserDescr.symbol, Lean.ParserDescr.sepBy, Lean.Parser.Tactic.simpStar, Lean.Parser.Tactic.simpErase, Lean.Parser.Tactic.simpLemma]]
[UInt32.decEq.proof_1,[rfl]]
[List.instAppendList,[Append.mk, List.append]]
[String.Iterator.hasPrev,[Bool, Decidable.decide, GT.gt, OfNat.ofNat]]
[String.Iterator.nextn,[String.Iterator, PProd.fst, String.Iterator.next]]
[Subsingleton.helim,[Subsingleton.helim.proof_1]]
[Int.instDecidableEqInt,[Int.decEq]]
[Task.spawn,[Task.pure, Unit.unit]]
[unexpandSubtype,[ite, Eq, Lean.Syntax.isOfKind, Lean.Name.mkStr, Lean.Name.anonymous, Bool.true, Lean.Syntax.matchesNull, OfNat.ofNat, cond, Bind.bind, Lean.MonadRef.mkInfoFromRefPos, Lean.MonadQuotation.getCurrMacroScope, Lean.MonadQuotation.getMainModule, Pure.pure, Lean.Syntax.node, Lean.SourceInfo.none, List.toArray, List.cons, Lean.Syntax.atom, List.nil, MonadExcept.throw, Unit.unit]]
[And.noConfusionType,[]]
[instLTProd,[LT.mk, Or, LT.lt, Prod.fst, And, Eq, Prod.snd]]
[bool,[Unit.unit, ToBool.toBool]]
[ByteArray.size,[Nat, Array.size]]
[OfNat.ofNat,[]]
[Nat.eq_or_lt_of_le,[Or, Eq, LT.lt, Or.inl, rfl, Or.inr, Nat.succ_le_succ, Nat.zero_le, absurd, Nat.not_succ_le_zero]]
[GE.ge,[LE.le]]
[instDecidableEqQuotient.proof_1,[instSubsingletonDecidable, Eq, Quotient.mk]]
[Sub.noConfusionType,[]]
[HEq.symm,[HEq.ndrecOn, HEq.refl]]
[Fin.mod.proof_1,[LT.lt, HMod.hMod, Nat.mod_lt]]
[UInt8.toNat,[Fin.val, UInt8.val]]
[instToStringInt,[ToString.mk, String, ToString.toString, HAppend.hAppend, Nat.succ]]
[Array.findSomeRevM?.find.proof_1,[Nat.lt_of_lt_of_le, Nat.lt_succ_self]]
[ReaderT.run_bind,[rfl]]
[IO.Process.Stdio.noConfusion,[noConfusionEnum, IO.Process.Stdio.toCtorIdx]]
[Lean.Syntax.instCoeArraySyntaxSepArray,[Coe.mk, Lean.Syntax.SepArray.ofElems]]
[Lean.Eval.eval,[]]
[Functor.discard,[Functor.mapConst, PUnit.unit]]
[instDivUInt32,[Div.mk, UInt32.div]]
[System.FilePath.noConfusionType,[]]
[Char.ne_of_val_ne,[absurd, Char.val_eq_of_eq]]
[Nat.mul_le_mul,[Nat.le_trans, Nat.mul_le_mul_right, Nat.mul_le_mul_left]]
[Lean.Parser.Tactic.inductionAlt,[Lean.ParserDescr.nodeWithAntiquot, Lean.Name.mkStr, Lean.Name.anonymous, Lean.ParserDescr.binary, Lean.ParserDescr.symbol, Lean.ParserDescr.unary, Lean.ParserDescr.const]]
[Array.getLit,[Array.get, Fin.mk, Array.getLit.proof_1]]
[instHashableInt,[Hashable.mk, UInt64, UInt64.ofNat, HMul.hMul, OfNat.ofNat, HAdd.hAdd]]
[IO.setRandSeed,[ST.Ref.set, IO.stdGenRef, mkStdGen]]
[Sub.sub,[]]
[Lean.Name.replacePrefix,[Lean.Name.str, Lean.Name.num, Lean.Name, Lean.Name.anonymous, ite, Eq, BEq.beq, Bool.true, Lean.Name.mkStr, PProd.fst, Lean.Name.mkNum]]
[Id.bind_eq,[rfl]]
[Classical.strongIndefiniteDescription.proof_2,[absurd]]
[instHAndThen,[HAndThen.mk, AndThen.andThen]]
[modify,[MonadState.modifyGet, Prod.mk, PUnit.unit]]
[ULift.down,[]]
[instToStringIterator,[ToString.mk, String.Iterator.remainingToString]]
[instToStringFloat,[ToString.mk, Float.toString]]
[EStateM.nonBacktrackable,[EStateM.Backtrackable.mk, EStateM.dummySave, EStateM.dummyRestore]]
[typedExpr,[]]
[instInhabitedFloat,[Inhabited.mk, Float.mk, FloatSpec.val, floatSpec]]
[Acc.brecOn,[Acc.below.intro]]
[instDecidableEqSum.proof_3,[rfl]]
[Float.ofBinaryScientific,[Float.scaleB, UInt64.toFloat]]
[PSigma.lexAccessible.proof_1,[Acc.intro, PSigma.mk, Eq.symm, eq_of_heq, Eq.refl, HEq.refl, WellFounded.apply]]
[Lean.instQuoteSyntax,[Lean.Quote.mk, id]]
[ST.Prim.Ref.modify,[Bind.bind, ST.Prim.Ref.get, ST.Prim.Ref.set]]
[Int.decLt,[Decidable, Int.NonNeg, Decidable.isTrue, Int.NonNeg.mk, Decidable.isFalse, Eq.refl, Int.negSucc, HEq.refl, False, HSub.hSub, HAdd.hAdd, OfNat.ofNat]]
[Fin.mk.inj,[]]
[instMonadState,[MonadState.mk, getThe, MonadStateOf.set, MonadStateOf.modifyGet]]
[IO.asTask,[EIO.asTask]]
[ExceptT.seq_eq,[rfl]]
[«termExists_,_»,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.symbol, Lean.explicitBinders, Lean.ParserDescr.cat]]
[CoeDep.coe,[]]
[Int.natAbs,[Nat, Nat.succ]]
[Array.concatMapM,[Array.foldlM, Bind.bind, Pure.pure, HAppend.hAppend, Array.empty, OfNat.ofNat, Array.size]]
[Lean.Syntax.setTailInfo,[Unit.unit, Lean.Syntax, Lean.Syntax.setTailInfoAux]]
[«term_$__»,[Lean.ParserDescr.trailingNode, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.unary, Lean.ParserDescr.symbol, Lean.ParserDescr.const, Lean.ParserDescr.cat]]
[instSubNat,[Sub.mk, Nat.sub]]
[UInt8.decLe,[Decidable, LE.le, inferInstanceAs]]
[Except.bind,[Except, Except.error]]
[IO.Error.mkPermissionDenied,[IO.Error.permissionDenied, Option.none]]
[ForIn.forIn,[]]
[Array.insertionSort.traverse,[Unit.unit, Array, dite, LT.lt, Array.size, PProd.fst, Array.insertionSort.swapLoop, HAdd.hAdd, OfNat.ofNat]]
[USize.sub,[USize.mk, HSub.hSub, USize.val]]
[List.erase,[List, List.nil, Unit.unit, BEq.beq, List.cons, PProd.fst]]
[instModUInt32,[Mod.mk, UInt32.mod]]
[Std.Format.tag.inj,[And.intro]]
[IO.FS.FileType.file.sizeOf_spec,[Eq.refl, OfNat.ofNat]]
[Lean.Parser.Tactic.expandRwSeq,[Lean.Parser.Tactic.rwWithRfl, Lean.Name.mkStr, Lean.Name.anonymous]]
[Id.run,[]]
[Fin.modn_lt,[LT.lt, Fin.val, HMod.hMod, Nat.lt_of_le_of_lt, Nat.mod_le, Nat.mod_lt]]
[HAndThen.hAndThen,[]]
[Nat.add_lt_add_left,[Nat.lt_of_succ_le, Nat.add_le_add_left, Nat.succ_le_of_lt, Nat.add_succ]]
[instRandomGenStdGen,[RandomGen.mk, stdRange, stdNext, stdSplit]]
[StateCpsT.run'_eq,[rfl]]
[Lean.Syntax.isMissing,[Unit.unit, Lean.Syntax.node, Lean.Syntax.atom, Lean.Syntax.ident, Bool, Bool.true, Bool.false]]
[«term_>>=_»,[Lean.ParserDescr.trailingNode, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.symbol, Lean.ParserDescr.cat]]
[ST.Ref.modifyGet,[liftM, ST.Prim.Ref.modifyGet]]
[String.dropWhile,[Substring.toString, Substring.dropWhile, String.toSubstring]]
[instMonadControlExceptT,[MonadControl.mk, Except, liftM, ExceptT.run]]
[unsafeEIO,[unsafeBaseIO, EIO.toBaseIO]]
[UInt8.val,[]]
[Quotient.ind,[Quot.ind]]
[String.all,[not, String.any]]
[Fin.mul,[Fin, Fin.mk, HMod.hMod, HMul.hMul, Fin.mul.proof_1]]
[Substring.next,[String.Pos, ite, Eq, HSub.hSub, String.next]]
[List.toByteArray.loop,[ByteArray, PProd.fst, ByteArray.push]]
[Id,[]]
[Substring.takeWhile,[Substring, Substring.mk]]
[«term_>>_»,[Lean.ParserDescr.trailingNode, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.symbol, Lean.ParserDescr.cat]]
[Inhabited.noConfusionType,[]]
[Subrelation,[]]
[ByteArray.push,[ByteArray, ByteArray.mk, Array.push]]
[Eq.trans,[]]
[CoeSort.coe,[]]
[Option.toBool,[Unit.unit, Bool, Bool.true, Bool.false]]
[IO.Error.hardwareFault.injEq,[Eq.propIntro, And.intro, Eq.refl, IO.Error.hardwareFault, Eq.symm, eq_of_heq, HEq.refl]]
[List.all,[List.foldr, and, Bool.true]]
[instMonadExceptOfExceptT,[MonadExceptOf.mk, ExceptT.mk, throwThe, tryCatchThe]]
[Classical.byContradiction,[Decidable.byContradiction]]
[Lean.mkAtomFrom,[Lean.Syntax.atom, Lean.SourceInfo.fromRef]]
[instReprAtomInt,[ReprAtom.mk]]
[IO.FS.instLTSystemTime,[ltOfOrd]]
[withTheReader,[MonadWithReaderOf.withReader]]
[Lean.instEval_1,[Lean.Eval.mk, IO.println, repr, Unit.unit]]
[notM,[Functor.map, not]]
[List.format,[Unit.unit, List.cons, Std.Format, Std.Format.text, Std.Format.sbracket, Std.Format.joinSep, HAppend.hAppend, Std.Format.line]]
[unexpandUnit,[Bind.bind, Lean.MonadRef.mkInfoFromRefPos, Lean.MonadQuotation.getCurrMacroScope, Lean.MonadQuotation.getMainModule, Pure.pure, Lean.Syntax.node, Lean.SourceInfo.none, Lean.Name.mkStr, Lean.Name.anonymous, List.toArray, List.cons, Lean.Syntax.atom, List.nil]]
[IO.Error.noSuchThing.inj,[And.intro]]
[Iff.subst,[Eq.subst, propext]]
[Functor.mapRev,[Functor.map]]
[StateT.run_get,[rfl]]
[Lean.Parser.Tactic.Conv.lhs,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.nonReservedSymbol, Bool.false]]
[Array.forM,[Array.foldlM, PUnit.unit]]
[Nat.lt,[Nat.le, Nat.succ]]
[Char.utf8Size.proof_7,[of_decide_eq_true, Eq.refl, Bool.true]]
[ExceptCpsT.run_throw,[rfl]]
[instToStringOption,[ToString.mk, Unit.unit, String, HAppend.hAppend, addParenHeuristic, ToString.toString]]
[ExceptCpsT.instLawfulMonadExceptCpsT.proof_1,[LawfulMonad.mk, rfl]]
[IO.sleep,[dbgSleep, EStateM.Result.ok, Unit.unit]]
[Lean.MacroM,[ReaderT, Lean.Macro.Context, EStateM, Lean.Macro.Exception, Lean.Macro.State]]
[List.hasDecEq,[Unit.unit, Decidable, Eq, Decidable.isTrue, List.hasDecEq.proof_1, Decidable.isFalse, List.hasDecEq.proof_2, List.hasDecEq.proof_3, List.cons, decEq, PProd.fst, List.hasDecEq.proof_4, List.hasDecEq.proof_5, List.hasDecEq.proof_6]]
[seqLeft_eq_bind,[Eq.mpr, Eq.refl, Eq, SeqLeft.seqLeft, Bind.bind, Pure.pure, LawfulApplicative.seqLeft_eq, of_eq_true, Eq.trans, congrFun, congrArg, Seq.seq, map_eq_pure_bind, Function.const, seq_eq_bind_map, funext, LawfulMonad.bind_assoc, LawfulMonad.pure_bind, Function.const_apply, eq_self]]
[List.getD,[Option.getD, List.get?]]
[IO.FS.DirEntry.mk.injEq,[Eq.propIntro, And.intro, Eq.refl, IO.FS.DirEntry.mk, Eq.symm, eq_of_heq, HEq.refl]]
[Substring.get,[Char, String.get, HAdd.hAdd]]
[Nat.add_left_cancel,[Eq.mpr, implies_congr, congr, congrArg, Eq, Eq.trans, congrFun, HAdd.hAdd, Nat.zero_eq, Nat.zero_add, Eq.refl, Nat.succ_add, Nat.succ.injEq]]
[ShiftLeft.noConfusionType,[]]
[instAddUInt8,[Add.mk, UInt8.add]]
[List.toArray,[List.toArrayAux, Array.mkEmpty, List.redLength]]
[Lean.Name.below,[PUnit, PProd]]
[Fin.modn.proof_1,[LT.lt, HMod.hMod, Nat.mod_lt]]
[instModUInt64,[Mod.mk, UInt64.mod]]
[Iff.symm,[Iff.intro, Iff.mpr, Iff.mp]]
[ExceptCpsT.instMonadExceptOfExceptCpsT,[MonadExceptOf.mk]]
[MonadControl.noConfusionType,[]]
[Equivalence.noConfusionType,[]]
[instHashableFin,[Hashable.mk, Nat.toUInt64, Fin.val]]
[Float.le,[FloatSpec.le, floatSpec, Float.val]]
[List.hasDecEq.proof_2,[]]
[Lean.Syntax.mkStrLit,[Lean.Syntax.mkLit, Lean.strLitKind, String.quote]]
[DoResultPR.pure.sizeOf_spec,[Eq.refl, HAdd.hAdd, OfNat.ofNat, SizeOf.sizeOf]]
[instMonadEIO,[inferInstanceAs, Monad, EStateM, IO.RealWorld]]
[String.length,[Nat, List.length]]
[System.FilePath.extSeparator,[Char.ofNat]]
[Nat.mul_left_comm,[Eq.mpr, Eq.refl, Eq, HMul.hMul, Eq.symm, Nat.mul_assoc, Nat.mul_comm, rfl]]
[HOr.noConfusionType,[]]
[Lean.Parser.Tactic.Conv.convDone,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.nonReservedSymbol, Bool.false]]
[instToStreamStringSubstring,[ToStream.mk, String.toSubstring]]
[UInt32.decEq,[Decidable, Eq, dite, Decidable.isTrue, UInt32.decEq.proof_1, Decidable.isFalse, UInt32.decEq.proof_2]]
[ByteArray.foldl,[Id.run, ByteArray.foldlM]]
[Quot.hrecOn.proof_1,[eq_of_heq]]
[Except.pure,[Except.ok]]
[Lean.Meta.Simp.Config.noConfusionType,[]]
[Array.swap!,[dite, LT.lt, Array.size, Array.swap, Fin.mk, panicWithPosWithDecl, OfNat.ofNat]]
[Nat.add,[Nat, Nat.succ, PProd.fst]]
[monadLift_self,[rfl]]
[Std.Range.noConfusionType,[]]
[String.toNat!,[ite, Eq, String.isNat, Bool.true, String.foldl, HAdd.hAdd, HMul.hMul, OfNat.ofNat, HSub.hSub, Char.toNat, Char.ofNat, panicWithPosWithDecl]]
[PProd.mk.inj,[And.intro]]
[Lean.Syntax.isInterpolatedStrLit?,[Unit.unit, Option, String, Lean.Syntax.isLit?, Lean.interpolatedStrLitKind, Option.none, OfNat.ofNat]]
[Option.instOrElseOption,[OrElse.mk, Option.orElse]]
[Lean.«command_Unif_hint___Where_|-⊢_»,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.const, Lean.ParserDescr.symbol, Lean.ParserDescr.unary, Lean.unifConstraintElem, Lean.unifConstraint]]
[IO.FS.Mode.toCtorIdx,[OfNat.ofNat]]
[System.FilePath.fileName,[ite, Eq, or, String.isEmpty, BEq.beq, Bool.true, Option.none, Option.some]]
[MonadExcept.noConfusionType,[]]
[Substring.dropWhile,[Substring, Substring.mk]]
[FloatSpec.val,[]]
[OptionT.tryCatch,[OptionT.mk, Bind.bind, Option.none, Option, Pure.pure, Option.some, Unit.unit]]
[PSigma.eta,[rfl]]
[instDecidableNot,[Decidable, Not, Decidable.isFalse, absurd, Decidable.isTrue]]
[let_val_congr,[rfl]]
[MProd.noConfusionType,[]]
[ReaderT,[]]
[instComplementUInt16,[Complement.mk, UInt16.complement]]
[Lean.Macro.Context.mainModule,[]]
[Ordering.eq.sizeOf_spec,[Eq.refl, OfNat.ofNat]]
[instDecidableIff,[dite, Decidable.isTrue, instDecidableIff.proof_1, Decidable.isFalse, instDecidableIff.proof_2, instDecidableIff.proof_3, instDecidableIff.proof_4]]
[IO.FS.SystemTime.sec,[]]
[instMonadST,[inferInstanceAs, Monad, EST, Empty]]
[UInt32.modn,[UInt32.mk, HMod.hMod, UInt32.val]]
[List.hasDecEq.proof_1,[rfl]]
[Lean.Macro.Context.methods,[]]
[decEq,[]]
[fix6,[fixCore6, arbitrary]]
[«term∅»,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.symbol]]
[String.toInt!,[Unit.unit, Int, String.toInt?, panic]]
[MonadStateOf.get,[]]
[UInt16.lor,[UInt16.mk, Fin.lor, UInt16.val]]
[Array.«term__[_:_]»,[Lean.ParserDescr.trailingNode, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.const, Lean.ParserDescr.symbol, Lean.ParserDescr.cat]]
[Lean.Parser.Tactic.Conv.whnf,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.nonReservedSymbol, Bool.false]]
[Lean.Parser.Tactic.tacticTry_,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.nonReservedSymbol, Bool.false, Lean.ParserDescr.const]]
[instHashableOption,[Hashable.mk, Unit.unit, UInt64, OfNat.ofNat, mixHash, Hashable.hash]]
[Lean.MacroScopesView.noConfusionType,[]]
[false_implies,[propext, Iff.intro, trivial, absurd, of_decide_eq_false, Eq.refl, Decidable.decide, False]]
[EStateM.Result.noConfusionType,[]]
[coeOfHeafOfTCOfTail,[CoeHTCT.mk, coeTail, coeTC, coeHead]]
[StateT.run_modifyGet,[of_eq_true, eq_self, Pure.pure]]
[instMonadFinallyStateRefT',[inferInstanceAs, MonadFinally, ReaderT, ST.Ref]]
[Lean.MonadQuotation.toMonadRef,[]]
[instOrdBool,[Ord.mk, Bool.false, Unit.unit, Bool.true, Ordering, Ordering.lt, Ordering.gt, Ordering.eq]]
[FloatArray.foldlM.loop.proof_1,[Nat.lt_of_lt_of_le]]
[SeqLeft.seqLeft,[]]
[IO.Error.unsatisfiedConstraints.inj,[And.intro]]
[Nat.toFloat,[Float.ofNat]]
[Array.anyMUnsafe.any,[ite, Eq, BEq.beq, Bool.true, Pure.pure, Bool.false, Bind.bind, Array.uget, lcProof, Array.anyMUnsafe.any, HAdd.hAdd, OfNat.ofNat]]
[Char.eq_of_val_eq,[Eq.symm, eq_of_heq, Eq.refl, Char.val, Char.mk, HEq.refl, Eq, rfl]]
[List.foldlM,[Pure.pure, Bind.bind, PProd.fst]]
[Nat.instModNat,[Mod.mk, Nat.mod]]
[Sum.noConfusionType,[]]
[instAppendSubarray,[Append.mk, Array.toSubarray, OfNat.ofNat, Array.size]]
[Classical.inhabited_of_exists,[Classical.inhabited_of_nonempty, Classical.inhabited_of_exists.proof_1]]
[Char.quoteCore,[ite, Eq, Char.ofNat, Or, LE.le, Char.toNat, OfNat.ofNat, HAppend.hAppend, charToHex, String.singleton]]
[EStateM.instInhabitedResult,[Inhabited.mk, EStateM.Result.error, arbitrary]]
[MonadReaderOf.noConfusionType,[]]
[instLTUInt16,[LT.mk, UInt16.lt]]
[Lean.Macro.instMonadQuotationMacroM,[Lean.MonadQuotation.mk, Pure.pure, Lean.Macro.Context.currMacroScope, Lean.Macro.Context.mainModule, Lean.Macro.withFreshMacroScope]]
[bind_pure_unit,[Eq.mpr, Eq.refl, Eq, Bind.bind, Pure.pure, PUnit.unit, bind_pure, rfl]]
[List.hasDecEq.proof_5,[absurd]]
[Array.mk.sizeOf_spec,[Eq.refl, HAdd.hAdd, OfNat.ofNat, SizeOf.sizeOf]]
[List.forM_nil,[rfl]]
[Array.get.proof_1,[Fin.isLt]]
[Iff.noConfusionType,[]]
[ST.Ref.take,[liftM, ST.Prim.Ref.take]]
[ForInStep.noConfusionType,[]]
[instInhabitedPointedType,[Inhabited.mk, PointedType.mk, PUnit, PUnit.unit]]
[Lean.instQuoteName,[Lean.Quote.mk, Unit.unit, Lean.Syntax, OptionM, List, String, Pure.pure, Bind.bind, Lean.Name.escapePart, PProd.fst, List.cons, Option.none, List.nil, Lean.mkNode, Lean.Name.mkStr, Lean.Name.anonymous, List.toArray, Lean.Syntax.mkNameLit, HAppend.hAppend, String.intercalate, Lean.SourceInfo.none, Lean.mkCIdent, Lean.Syntax.mkCApp, Lean.Quote.quote]]
[IO.FS.FileType.dir.sizeOf_spec,[Eq.refl, OfNat.ofNat]]
[PSigma.lexAccessible,[PSigma.lexAccessible.proof_1]]
[IO.AccessRight.flags,[UInt32.lor]]
[Std.Format.instAppendFormat,[Append.mk, Std.Format.append]]
[Array.back,[Array.get!, HSub.hSub, Array.size, OfNat.ofNat]]
[Array.findSomeRevM?,[Array.size, Nat.le_refl, Array.findSomeRevM?.find]]
[MonadExcept.orElse,[MonadExcept.tryCatch, Unit.unit]]
[List.length_eq_lenghtTR,[funext, of_eq_true, Eq.trans, congrArg, Eq, List.length, Eq.symm, List.length_add_eq_lengthTRAux, OfNat.ofNat, Nat.add_zero, eq_self]]
[Eq.symm,[rfl]]
[instSubsingletonStateM,[instSubsingletonStateM.proof_1]]
[OptionT.instAlternativeOptionT,[Alternative.mk, OptionT.fail, OptionT.orElse]]
[instDecidableOr,[Decidable, Or, Decidable.isTrue, Or.inl, Or.inr, Decidable.isFalse, instDecidableOr.proof_1]]
[String.instAppendString,[Append.mk, String.append]]
[instInhabitedArrow,[Inhabited.mk, arbitrary]]
[EStateM.instToStringResult,[ToString.mk, String, HAppend.hAppend, ToString.toString]]
[Quotient,[Quot, Setoid.r]]
[List.lt.brecOn,[List.lt.below.nil, List.lt.below.head, List.lt.below.tail]]
[OptionM,[OptionT, Id]]
[IO.FileRight.mk.inj,[And.intro]]
[instMonadExceptOfEST,[inferInstanceAs, MonadExceptOf, EStateM]]
[Lean.Name.mkNum,[Lean.Name.num, mixHash, Hashable.hash, dite, LT.lt, UInt64.size, UInt64.ofNatCore, OfNat.ofNat, Lean.Name.mkNum.proof_1]]
[Char.isAlpha,[or, Char.isUpper, Char.isLower]]
[DoResultPRBC.noConfusionType,[]]
[Nat.not_succ_le_self,[Unit.unit, Not, LE.le, Nat.succ, Nat.not_succ_le_zero, OfNat.ofNat, absurd, Nat.le_of_succ_le_succ, PProd.fst]]
[Lean.Parser.Tactic.locationTargets,[Lean.ParserDescr.nodeWithAntiquot, Lean.Name.mkStr, Lean.Name.anonymous, Lean.ParserDescr.binary, Lean.ParserDescr.unary, Lean.ParserDescr.const, Lean.ParserDescr.symbol]]
[Lean.Macro.hasDecl,[Bind.bind, Lean.Macro.getMethods, Lean.Macro.Methods.hasDecl]]
[instDecidableEqSum.proof_2,[absurd]]
[Lean.Meta.TransparencyMode.instances.sizeOf_spec,[Eq.refl, OfNat.ofNat]]
[«term_::_»,[Lean.ParserDescr.trailingNode, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.symbol, Lean.ParserDescr.cat]]
[instHPow,[HPow.mk, Pow.pow]]
[Coe.coe,[]]
[List.dropWhile,[Unit.unit, List, List.nil, PProd.fst, List.cons]]
[AndOp.and,[]]
[Nat.gcd_zero_right,[of_eq_true, Eq.trans, congr, congrArg, Eq, congrFun, Nat.gcd, Nat.zero_eq, OfNat.ofNat, Nat.gcd_zero_left, eq_true_of_decide, Eq.refl, Bool.true, Eq.symm, Nat.gcd_succ, Nat.zero_mod, Nat.succ, eq_self]]
[HasEquiv.noConfusionType,[]]
[Lean.Parser.Tactic.Conv.simpMatch,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.nonReservedSymbol, Bool.false]]
[String.data,[]]
[Nat.forRevM.loop,[Unit.unit, Unit, Pure.pure, Bind.bind, PProd.fst]]
[instDecidableEqUSize,[USize.decEq]]
[StateT.run_seqLeft,[]]
[Array.forRevM,[Array.foldrM, PUnit.unit]]
[IO.FS.Metadata.mk.inj,[And.intro]]
[UInt32.xor,[UInt32.mk, Fin.xor, UInt32.val]]
[Std.Format.sbracket,[Std.Format.bracket]]
[ByteArray.set!,[ByteArray, ByteArray.mk, Array.set!]]
[Lean.Meta.Simp.Config.maxSteps,[]]
[Lean.Meta.Simp.Config.contextual,[]]
[Std.Format.paren,[Std.Format.bracket]]
[«termΣ_,_»,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.symbol, Lean.explicitBinders, Lean.ParserDescr.cat]]
[Lean.reservedMacroScope,[OfNat.ofNat]]
[List.removeAll,[List.filter, List.notElem]]
[String.posOf,[String.posOfAux, String.bsize, OfNat.ofNat]]
[UInt32.val,[]]
[Nat.gcd,[WellFounded.fix, Nat.gcd.proof_1, Unit.unit, Nat, HMod.hMod, Nat.succ, Nat.mod_lt, Nat.zero_lt_succ]]
[instInhabitedNat,[Inhabited.mk, Nat.zero]]
[Lean.Parser.Tactic.rwRuleSeq,[Lean.ParserDescr.nodeWithAntiquot, Lean.Name.mkStr, Lean.Name.anonymous, Lean.ParserDescr.binary, Lean.ParserDescr.symbol, Lean.ParserDescr.sepBy1, Lean.Parser.Tactic.rwRule, Bool.true]]
[EStateM.instOrElseEStateM,[OrElse.mk, EStateM.orElse]]
[instReprOption,[Repr.mk, Std.Format, Std.Format.text, Repr.addAppParen, HAppend.hAppend, reprArg]]
[UInt8.toUInt32,[Nat.toUInt32, UInt8.toNat]]
[Nat.mul_assoc,[Eq, HMul.hMul, rfl]]
[Nat.lt.step.proof_1,[Nat.le_step]]
[Lean.Meta.instBEqTransparencyMode,[BEq.mk, BEq.beq, Lean.Meta.TransparencyMode.toCtorIdx]]
[Nat.mod_zero,[]]
[Nat.toSuperDigits,[Nat.toSuperDigitsAux, List.nil]]
[Substring.trimLeft,[Substring.dropWhile, Char.isWhitespace]]
[bfix1,[PProd.fst]]
[Ne.intro,[]]
[Lean.fieldIdxKind,[Lean.Name.mkStr, Lean.Name.anonymous]]
[dbgTraceIfShared,[]]
[PSigma.revLex.proof_1,[WellFounded.intro, Acc, PSigma.RevLex, PSigma.revLexAccessible, WellFounded.apply]]
[Lean.Syntax.getHeadInfo,[Unit.unit, Lean.SourceInfo, Lean.Syntax.getHeadInfo?, Lean.SourceInfo.none]]
[instHasEquiv,[HasEquiv.mk, Setoid.r]]
[List.filterMap,[Unit.unit, List, List.nil, PProd.fst, List.cons]]
[Lean.instQuoteSubstring,[Lean.Quote.mk, Lean.Syntax.mkCApp, Lean.Name.mkStr, Lean.Name.anonymous, List.toArray, List.cons, Lean.Quote.quote, Substring.toString, List.nil]]
[stx!_,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.nonReservedSymbol, Bool.false, Lean.ParserDescr.cat]]
[UInt8.sub,[UInt8.mk, HSub.hSub, UInt8.val]]
[instReprUInt64,[Repr.mk, repr, UInt64.toNat]]
[Array.anyM.proof_1,[Nat.le_refl, Array.size]]
[instComplementUInt32,[Complement.mk, UInt32.complement]]
[instToStringUnit,[ToString.mk]]
[MonadFunctor.noConfusionType,[]]
[List.filterM,[Bind.bind, List.filterAuxM, List.nil, Pure.pure, List.reverse]]
[Array.instToStringArray,[ToString.mk, HAppend.hAppend, ToString.toString, Array.toList]]
[inline,[]]
[Nat.add_right_comm,[Eq.mpr, Eq.refl, Eq, HAdd.hAdd, Nat.add_assoc, Nat.add_comm, Eq.symm, rfl]]
[instReprNat,[Repr.mk, Std.Format.text, Nat.repr]]
[Lean.Name.ibelow,[True, And]]
[String.Iterator.noConfusionType,[]]
[Lean.Parser.Tactic.Conv.nestedConv,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.Parser.Tactic.Conv.convSeqBracketed]]
[FloatArray.foldl,[Id.run, FloatArray.foldlM]]
[coeOfDep,[CoeT.mk, coeD]]
[AndOp.noConfusionType,[]]
[Subarray.start,[]]
[HShiftLeft.hShiftLeft,[]]
[ExceptT.instMonadFunctorExceptT,[MonadFunctor.mk, Except]]
[Fin.add,[Fin, Fin.mk, HMod.hMod, HAdd.hAdd, Fin.add.proof_1]]
[ByteArray.mk.injEq,[Eq.propIntro, Eq.refl, ByteArray.mk, Eq.symm, eq_of_heq, HEq.refl]]
[Substring.prevn,[String.Pos, PProd.fst, Substring.prev]]
[dite_congr,[Decidable.em, Eq.mpr, Eq.refl, Eq, dite, dif_pos, Eq.symm, dif_neg]]
[Nat.add_eq,[rfl]]
[Option.map_id,[funext, Unit.unit, Eq, Option.map, id, rfl]]
[Int.lt,[LE.le, HAdd.hAdd, OfNat.ofNat]]
[IO.Process.SpawnArgs.cmd,[]]
[Nat.repr,[List.asString, Nat.toDigits, OfNat.ofNat]]
[«term_≈_»,[Lean.ParserDescr.trailingNode, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.symbol, Lean.ParserDescr.cat]]
[ExceptCpsT.instMonadLiftExceptCpsT,[MonadLift.mk, ExceptCpsT.lift]]
[instReprAtomUSize,[ReprAtom.mk]]
[Lean.Parser.Tactic.tacticRepeat_,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.nonReservedSymbol, Bool.false, Lean.ParserDescr.const]]
[instReprAtomNat,[ReprAtom.mk]]
[congrFun,[rfl]]
[IO.FS.Stream.putStrLn,[IO.FS.Stream.putStr, String.push, Char.ofNat]]
[Lean.Parser.Tactic.Conv.reduce,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.nonReservedSymbol, Bool.false]]
[Functor.map,[]]
[Nat.log2.proof_1,[]]
[Lean.Parser.Tactic.Conv.rewrite,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.nonReservedSymbol, Bool.false, Lean.ParserDescr.unary, Lean.Parser.Tactic.config, Lean.Parser.Tactic.rwRuleSeq]]
[IO.AccessRight.mk.injEq,[Eq.propIntro, And.intro, Eq.refl, IO.AccessRight.mk, Eq.symm, eq_of_heq, HEq.refl]]
[PLift.down,[]]
[instDecidableEqProd.proof_2,[absurd]]
[Array.swap,[Array.set, Array.swap.proof_1]]
[«term_=_»,[Lean.ParserDescr.trailingNode, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.symbol, Lean.ParserDescr.cat]]
[«termΣ'_,_»,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.symbol, Lean.explicitBinders, Lean.ParserDescr.cat]]
[instHModUInt64NatUInt64,[HMod.mk, UInt64.modn]]
[USize.ofNatCore,[USize.mk, Fin.mk]]
[Array.toSubarray.proof_1,[Nat.le_refl, Array.size]]
[OrElse.orElse,[]]
[PSigma.lexNdepWf.proof_1,[WellFounded.intro, Acc, PSigma.lexNdep, PSigma.lexAccessible, WellFounded.apply]]
[IO.FS.Mode.append.sizeOf_spec,[Eq.refl, OfNat.ofNat]]
[unexpandListToArray,[ite, Eq, Lean.Syntax.isOfKind, Lean.Name.mkStr, Lean.Name.anonymous, Bool.true, Lean.Syntax.matchesNull, OfNat.ofNat, Bind.bind, Lean.MonadRef.mkInfoFromRefPos, Lean.MonadQuotation.getCurrMacroScope, Lean.MonadQuotation.getMainModule, Pure.pure, Lean.Syntax.node, Lean.SourceInfo.none, List.toArray, List.cons, Lean.Syntax.atom, Array.append, List.nil, Lean.Syntax.SepArray.elemsAndSeps, MonadExcept.throw, Unit.unit]]
[ExceptCpsT.runCatch,[Pure.pure]]
[Quot.recOn,[Quot.rec]]
[«term_↔_»,[Lean.ParserDescr.trailingNode, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.symbol, Lean.ParserDescr.cat]]
[Array.toListLitAux.proof_2,[Nat.lt_of_lt_of_eq, Nat.lt_of_lt_of_le, Nat.lt_succ_self]]
[Lean.bracketedExplicitBinders,[Lean.ParserDescr.nodeWithAntiquot, Lean.Name.mkStr, Lean.Name.anonymous, Lean.ParserDescr.binary, Lean.ParserDescr.symbol, Lean.ParserDescr.unary, Lean.binderIdent, Lean.ParserDescr.cat, OfNat.ofNat]]
[Lean.Syntax.isLit?,[Lean.Syntax.missing, Lean.Syntax.atom, Lean.Syntax.ident, Option, String, ite, Eq, and, BEq.beq, Array.size, OfNat.ofNat, Bool.true, Lean.Syntax.node, Array.get!, Option.some, Option.none]]
[Float.mk.injEq,[Eq.propIntro, Eq.refl, Float.mk, Eq.symm, eq_of_heq, HEq.refl]]
[UInt32.lor,[UInt32.mk, Fin.lor, UInt32.val]]
[ByteArray.mkEmpty,[ByteArray.mk, List.toArray, List.nil]]
[IO.Error.toString,[Unit.unit, String, IO.Error.fopenErrorToString, Option.some, IO.Error.otherErrorToString, Option.none]]
[Quotient.inductionOn,[Quot.inductionOn]]
[Nat.succ.inj,[]]
[Array.findSome?,[Id.run, Array.findSomeM?]]
[List.appendTR,[List.reverseAux, List.reverse]]
[Array.getEvenElems,[Prod.snd, Array.foldl, Prod, Bool, Array, ite, Eq, Bool.true, Prod.mk, Bool.false, Array.push, Array.empty, OfNat.ofNat, Array.size]]
[Monad.toApplicative,[]]
[List.any,[List.foldr, or, Bool.false]]
[IO.FS.Handle.readToEnd,[IO.FS.Handle.readToEnd.loop]]
[Std.Format.nestD,[Std.Format.nest, Int.ofNat, Std.Format.defIndent]]
[Substring.take,[Substring.mk, Substring, HAdd.hAdd, Substring.nextn, OfNat.ofNat]]
[instLEFin,[LE.mk, LE.le, Fin.val]]
[unexpandSorryAx,[ite, Eq, Lean.Syntax.isOfKind, Lean.Name.mkStr, Lean.Name.anonymous, Bool.true, Lean.Syntax.matchesNull, OfNat.ofNat, Bind.bind, Lean.MonadRef.mkInfoFromRefPos, Lean.MonadQuotation.getCurrMacroScope, Lean.MonadQuotation.getMainModule, Pure.pure, Lean.Syntax.node, Lean.SourceInfo.none, List.toArray, List.cons, Lean.Syntax.atom, List.nil, MonadExcept.throw, Unit.unit]]
[instSubsingletonDecidable,[instSubsingletonDecidable.proof_1]]
[instDecidableEqBool.proof_1,[]]
[ByteArray.toUInt64BE!,[ite, Eq, BEq.beq, ByteArray.size, OfNat.ofNat, Bool.true, HOr.hOr, HShiftLeft.hShiftLeft, UInt8.toUInt64, ByteArray.get!, panicWithPosWithDecl, HAppend.hAppend]]
[String.singleton,[String.push]]
[ByteArray.foldlMUnsafe,[ite, LT.lt, LE.le, ByteArray.size, USize.ofNat, Pure.pure, ByteArray.foldlMUnsafe.fold]]
[control,[controlAt]]
[Applicative.toFunctor,[]]
[Nat.le_of_lt_succ,[Nat.le_of_succ_le_succ]]
[StateRefT'.instMonadExceptOfStateRefT',[MonadExceptOf.mk, Function.comp, StateRefT'.lift, throwThe, tryCatchThe]]
[Array.size_pop,[List.length_dropLast, Array.data]]
[instSubFloat,[Sub.mk, Float.sub]]
[Id.instLawfulMonadId,[Id.instLawfulMonadId.proof_1]]
[Lean.Name.instReprSyntax,[Repr.mk]]
[Lean.mkCIdent,[Lean.mkCIdentFrom, Lean.Syntax.missing]]
[Eq.mpr_not,[Eq.symm]]
[Lean.Parser.Tactic.locationHyp,[Lean.ParserDescr.nodeWithAntiquot, Lean.Name.mkStr, Lean.Name.anonymous, Lean.ParserDescr.binary, Lean.ParserDescr.unary, Lean.ParserDescr.const, Lean.ParserDescr.symbol]]
[IO.FS.DirEntry.fileName,[]]
[Quotient.sound.proof_1,[Quot.sound]]
[FloatSpec.noConfusionType,[]]
[Lean.Syntax.matchesIdent,[and, Lean.Syntax.isIdent, BEq.beq, Lean.Syntax.getId]]
[or_self,[propext, Iff.intro, Or.inl]]
[List.zip,[List.zipWith, Prod.mk]]
[List.mapA,[Unit.unit, List, Pure.pure, List.nil, Seq.seq, Functor.map, List.cons, PProd.fst]]
[Ordering.lt.sizeOf_spec,[Eq.refl, OfNat.ofNat]]
[Lean.Meta.Simp.defaultMaxSteps,[OfNat.ofNat]]
[IO.Error.hardwareFault.inj,[And.intro]]
[floatDecLe,[Float.decLe]]
[Subarray.any,[Id.run, Subarray.anyM]]
[ExceptT.instMonadLiftExceptT,[MonadLift.mk, ExceptT.lift]]
[StateT.bind,[Bind.bind, Prod]]
[Array.insertionSort.swapLoop.proof_1,[Nat.lt_trans, Nat.lt_succ_self, Eq.symm]]
[Lean.maxRecDepthErrorMessage,[]]
[IO.Error.hardwareFault.sizeOf_spec,[Eq.refl, HAdd.hAdd, OfNat.ofNat, SizeOf.sizeOf]]
[Array.mapMUnsafe.map,[ite, LT.lt, Bind.bind, unsafeCast, Array.mapMUnsafe.map, HAdd.hAdd, OfNat.ofNat, Array.uset, lcProof, Pure.pure]]
[Stream.next?,[]]
[Subarray.foldrM,[Array.foldrM, Subarray.as, Subarray.stop, Subarray.start]]
[Substring.takeRight,[Substring.mk, Substring, HAdd.hAdd, Substring.prevn, Substring.bsize]]
[ByteArray.instForInByteArrayUInt8,[ForIn.mk, ByteArray.forIn]]
[IO.Error.resourceExhausted.inj,[And.intro]]
[Lean.Syntax.ident.inj,[And.intro]]
[Array.filterMap,[Id.run, Array.filterMapM]]
[IO.Error.noConfusionType,[]]
[ULift.noConfusionType,[]]
[Lean.numLitKind,[Lean.Name.mkStr, Lean.Name.anonymous]]
[Array.feraseIdx,[Array.eraseIdxAux, HAdd.hAdd, Fin.val, OfNat.ofNat]]
[Fin.instOrOpFin,[OrOp.mk, Fin.lor]]
[Quotient.liftOn,[Quot.liftOn]]
[PSum.inl.sizeOf_spec,[Eq.refl, HAdd.hAdd, OfNat.ofNat, SizeOf.sizeOf]]
[Lean.MonadRef.getRef,[]]
[instOrdUInt64,[Ord.mk, compareOfLessAndEq]]
[Eq.propIntro,[propext, Iff.intro]]
[Std.Format.line.sizeOf_spec,[Eq.refl, OfNat.ofNat]]
[HAndThen.noConfusionType,[]]
[UInt64.lt,[LT.lt, UInt64.val]]
[emptyWf.proof_1,[WellFounded.intro, Acc.intro, Acc, emptyRelation, Eq.refl]]
[Subarray.popFront,[dite, LT.lt, Subarray.start, Subarray.stop, Subarray.mk, Subarray.as, HAdd.hAdd, OfNat.ofNat, Subarray.popFront.proof_1, Subarray.h₂]]
[Array.anyM,[dite, LE.le, Array.size, Array.anyM.proof_1]]
[Std.Format.below,[PUnit, PProd]]
[unexpandListCons,[ite, Eq, Lean.Syntax.isOfKind, Lean.Name.mkStr, Lean.Name.anonymous, Bool.true, Lean.Syntax.matchesNull, OfNat.ofNat, Bind.bind, Lean.MonadRef.mkInfoFromRefPos, Lean.MonadQuotation.getCurrMacroScope, Lean.MonadQuotation.getMainModule, Pure.pure, Lean.Syntax.node, Lean.SourceInfo.none, List.toArray, List.cons, Lean.Syntax.atom, List.nil, Array.append, Lean.Syntax.SepArray.elemsAndSeps, MonadExcept.throw, Unit.unit]]
[StateT.run'_eq,[rfl]]
[ByteArray.mk.sizeOf_spec,[Eq.refl, HAdd.hAdd, OfNat.ofNat, SizeOf.sizeOf]]
[List.forA,[Unit.unit, PUnit, Pure.pure, PUnit.unit, SeqRight.seqRight, PProd.fst]]
[Std.Format.join,[List.foldl, HAppend.hAppend, Std.Format.text]]
[instReprPUnit,[Repr.mk, Std.Format.text]]
[Array.zipWith,[Array.zipWithAux, OfNat.ofNat, List.toArray, List.nil]]
[coeTC,[CoeTC.coe]]
[Array.push,[Array.mk, List.concat, Array.data]]
[LawfulApplicative.map_pure,[]]
[String.dropRight,[Substring.toString, Substring.dropRight, String.toSubstring]]
[System.FilePath.isCaseInsensitive,[or, System.Platform.isWindows, System.Platform.isOSX]]
[System.Platform.getNumBits.proof_1,[Or.inr, rfl]]
[Nat.lt.step,[Nat.lt.step.proof_1]]
[Alternative.orElse,[]]
[MonadReader.read,[]]
[Lean.Name.noConfusionType,[]]
[Nat.le_antisymm,[Eq.symm, eq_of_heq, Eq.refl, HEq.refl, Eq, rfl, absurd, Nat.lt_of_le_of_lt, Nat.lt_irrefl]]
[Option.isEqSome,[Bool, BEq.beq, Bool.false]]
[System.instDecidableEqFilePath,[Decidable, Eq, dite, Decidable.isTrue, rfl, Decidable.isFalse]]
[Lean.Macro.getCurrNamespace,[Bind.bind, Lean.Macro.getMethods, Lean.Macro.Methods.getCurrNamespace]]
[IO.Error.mkInterrupted,[IO.Error.interrupted]]
[Lean.Syntax.setArgs,[Lean.Syntax.missing, Lean.Syntax.atom, Lean.Syntax.ident, Lean.Syntax, Lean.Syntax.node]]
[Substring.front,[Substring.get, OfNat.ofNat]]
[IO.Error.mkInappropriateTypeFile,[Function.comp, IO.Error.inappropriateType, Option.some]]
[Nat.foldRev,[Nat.foldRev.loop]]
[Nat.repeat,[Nat.repeat.loop]]
[Lean.Parser.Tactic.intros,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.nonReservedSymbol, Bool.false, Lean.ParserDescr.unary, Lean.ParserDescr.const, Lean.ParserDescr.symbol]]
[Array.append,[Array.foldl, Array.push, OfNat.ofNat, Array.size]]
[IO.Process.SpawnArgs.mk.inj,[And.intro]]
[fixCore1,[bfix1, USize.size]]
[instTransEq,[Trans.mk, instTransEq.proof_1]]
[Sum.inl.inj,[]]
[Lean.Macro.Methods.noConfusionType,[]]
[InvImage.wf,[InvImage.wf.proof_1]]
[ByteArray.findIdx?,[ByteArray.findIdx?.loop]]
[IO.Error.protocolError.inj,[And.intro]]
[Nat.add_zero,[rfl]]
[USize.le,[LE.le, USize.val]]
[WellFoundedRelation.noConfusionType,[]]
[Array.all,[Id.run, Array.allM]]
[Array.set!,[Array.setD]]
[UInt64.decEq.proof_1,[rfl]]
[Array.foldrM.fold.proof_2,[Nat.le_of_lt, Nat.lt_of_lt_of_le, Nat.lt_succ_self]]
[LawfulApplicative.toLawfulFunctor,[]]
[List.length_set,[rfl, Eq.symm, of_eq_true, Eq.trans, congr, congrArg, Eq, List.length_cons, List.set, Nat.succ, eq_self, List.length, Eq.refl]]
[StateT.run_seqRight,[]]
[instDecidableIff.proof_4,[Iff.intro, absurd]]
[instLawfulMonadStateRefT'.proof_1,[inferInstanceAs, LawfulMonad, ReaderT, ST.Ref]]
[instToStringFin,[ToString.mk, ToString.toString, Fin.val]]
[Nat.lt_or_eq_or_le_succ,[Decidable.byCases, Or.inr]]
[IO.AccessRight.write,[]]
[String.set,[String, String.mk, List, Char, List.nil, ite, Eq, List.cons, PProd.fst, HAdd.hAdd, String.csize, OfNat.ofNat]]
[List.pure,[List.cons, List.nil]]
[instDivUInt64,[Div.mk, UInt64.div]]
[HMul.noConfusionType,[]]
[Array.mapM,[Array.foldlM, Bind.bind, Pure.pure, Array.push, Array.mkEmpty, Array.size, OfNat.ofNat]]
[EIO.mapTask,[BaseIO.mapTask, EIO.toBaseIO]]
[Lean.Name.hash,[Unit.unit, UInt64, UInt64.ofNatCore, OfNat.ofNat, Lean.Name.hash.proof_1]]
[IO.Error.mkPermissionDeniedFile,[Function.comp, IO.Error.permissionDenied, Option.some]]
[Lean.withRef,[Bind.bind, Lean.MonadRef.getRef, Lean.MonadRef.withRef]]
[EStateM.run',[Option, EStateM.run, Option.some, Option.none]]
[Lean.Parser.Tactic.failIfSuccess,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.nonReservedSymbol, Bool.false, Lean.ParserDescr.const]]
[Nat.instTransLeArrowNatArrowNatPropLtArrowNatArrowNatPropLtArrowNatArrowNatProp,[Trans.mk, Nat.instTransLeArrowNatArrowNatPropLtArrowNatArrowNatPropLtArrowNatArrowNatProp.proof_1]]
[StateT.run_modify,[rfl]]
[Subarray.as,[]]
[PointedType.noConfusionType,[]]
[ExceptT.bind_pure_comp,[rfl]]
[EStateM.Result.ok.inj,[And.intro]]
[Char.le,[LE.le, Char.val]]
[String.mk.sizeOf_spec,[Eq.refl, HAdd.hAdd, OfNat.ofNat, SizeOf.sizeOf]]
[instSubsingletonStateM.proof_1,[Subsingleton.intro, funext, Eq, Eq.mpr, Eq.refl, Prod.mk, Subsingleton.elim, rfl]]
[Nat.succ_le_of_lt,[]]
[Lean.Syntax.formatStx,[Lean.Syntax.formatStxAux, OfNat.ofNat]]
[StateT.run_set,[rfl]]
[Lean.nameLitKind,[Lean.Name.mkStr, Lean.Name.anonymous]]
[instReprUInt16,[Repr.mk, repr, UInt16.toNat]]
[Lean.Name.hasMacroScopes,[Lean.Name.anonymous, Bool, BEq.beq, PProd.fst, Bool.false]]
[Mod.mod,[]]
[String.utf8ByteSize,[Nat, PProd.fst, HAdd.hAdd, String.csize, OfNat.ofNat]]
[Lean.Syntax.atom.injEq,[Eq.propIntro, And.intro, Eq.refl, Lean.Syntax.atom, Eq.symm, eq_of_heq, HEq.refl]]
[Lean.Parser.Tactic.traceState,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.nonReservedSymbol, Bool.false]]
[instToFormatArray,[Std.ToFormat.mk, HAppend.hAppend, Std.Format.text, Std.ToFormat.format, Array.toList]]
[Subtype.mk.sizeOf_spec,[Eq.refl, HAdd.hAdd, OfNat.ofNat, SizeOf.sizeOf]]
[Array.sequenceMap,[Array.size, OfNat.ofNat, Array.empty, Array.sequenceMap.loop]]
[Fin.isLt,[]]
[Lean.Syntax.find?,[Lean.Syntax.findAux]]
[Prod.RProdSubLex,[Prod.RProdSubLex.proof_1]]
[termMax_prec,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.symbol]]
[Nat.mod,[WellFounded.fix, Nat.mod.proof_1, dite, And, LT.lt, OfNat.ofNat, LE.le, HSub.hSub, Nat.sub_lt, Nat.lt_of_lt_of_le]]
[String.Iterator.toString,[String]]
[IO.Process.SpawnArgs.cwd,[]]
[«stx_,*»,[Lean.ParserDescr.trailingNode, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.symbol]]
[Lean.Parser.Tactic.skip,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.nonReservedSymbol, Bool.false]]
[IO.ofExcept,[IO, Pure.pure, MonadExcept.throw, IO.userError, ToString.toString]]
[inferInstance,[]]
[instOfNatUInt16,[OfNat.mk, UInt16.ofNat]]
[List.filterAux,[List, List.reverse, Unit.unit, PProd.fst, List.cons]]
[Option.format,[Unit.unit, Std.Format, Std.Format.text, HAppend.hAppend, Std.ToFormat.format]]
[Quotient.lift₂.proof_1,[Setoid.refl]]
[instOrdString,[Ord.mk, compareOfLessAndEq]]
[Nat.pred,[Unit.unit, Nat, OfNat.ofNat]]
[ReaderT.tryFinally,[MonadFinally.mk, MonadFinally.tryFinally']]
[Lean.Parser.Tactic.Conv.arg,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.nonReservedSymbol, Bool.false, Lean.ParserDescr.const]]
[instSTWorld,[STWorld.mk]]
[UInt8.decEq.proof_2,[absurd]]
[System.Platform.numBits,[Subtype.val, System.Platform.getNumBits, Unit.unit]]
[instMulUInt32,[Mul.mk, UInt32.mul]]
[optParam,[]]
[Lean.Parser.Tactic.apply,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.nonReservedSymbol, Bool.false, Lean.ParserDescr.cat]]
[Array.toArrayLit_eq,[sorryAx, Eq, Array.toArrayLit, Bool.false]]
[Lean.Parser.Attr.simp,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.nonReservedSymbol, Bool.false, Lean.ParserDescr.unary, Lean.Parser.Tactic.simpPre, Lean.Parser.Tactic.simpPost, Lean.ParserDescr.cat]]
[instPowNatNat,[Pow.mk, Nat.pow]]
[Array.mk.inj,[]]
[Nat.zero_lt_one,[Nat.zero_lt_succ, OfNat.ofNat]]
[IO.Error.inappropriateType.sizeOf_spec,[Eq.refl, HAdd.hAdd, OfNat.ofNat, SizeOf.sizeOf]]
[stx_?,[Lean.ParserDescr.trailingNode, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.symbol]]
[Substring.mk.sizeOf_spec,[Eq.refl, HAdd.hAdd, OfNat.ofNat, SizeOf.sizeOf]]
[Nat.pow_le_pow_of_le_left,[Unit.unit, LE.le, HPow.hPow, Nat.le_refl, OfNat.ofNat, Nat.mul_le_mul, PProd.fst]]
[FloatArray.set!,[FloatArray, FloatArray.mk, Array.set!]]
[Quot.exists_rep,[Quot.inductionOn, Exists.intro, rfl]]
[fixCore5,[bfix5, USize.size]]
[min,[ite, LE.le]]
[Char.noConfusionType,[]]
[instShiftRightUInt16,[ShiftRight.mk, UInt16.shiftRight]]
[Lean.Macro.Context.currRecDepth,[]]
[Substring.atEnd,[Bool, BEq.beq, HAdd.hAdd]]
[FloatArray.foldlMUnsafe,[ite, LT.lt, LE.le, FloatArray.size, USize.ofNat, Pure.pure, FloatArray.foldlMUnsafe.fold]]
[ReaderT.adapt,[]]
[Lean.Meta.Simp.instReprConfig,[Repr.mk, Std.Format.bracket, HAppend.hAppend, Std.Format.nil, Std.Format.text, repr, Lean.Meta.Simp.Config.maxSteps, Std.Format.line, Lean.Meta.Simp.Config.maxDischargeDepth, Lean.Meta.Simp.Config.contextual, Lean.Meta.Simp.Config.memoize, Lean.Meta.Simp.Config.singlePass, Lean.Meta.Simp.Config.zeta, Lean.Meta.Simp.Config.beta, Lean.Meta.Simp.Config.eta, Lean.Meta.Simp.Config.etaStruct, Lean.Meta.Simp.Config.iota, Lean.Meta.Simp.Config.proj, Lean.Meta.Simp.Config.decide]]
[Acc.ndrec,[]]
[FloatArray.foldlM,[dite, LE.le, FloatArray.size, FloatArray.foldlM.proof_1]]
[if_pos,[Eq, ite, rfl, absurd]]
[MonadControlT.liftWith,[]]
[List.getLast?,[Unit.unit, Option, Option.none, Option.some, List.getLast, List.cons, List.getLast?.proof_1]]
[Setoid.r,[]]
[Lean.MonadQuotation.getCurrMacroScope,[]]
[PLift.down_up,[rfl]]
[FloatArray.instForInFloatArrayFloat,[ForIn.mk, FloatArray.forIn]]
[Nat.anyAux,[Unit.unit, Bool, Bool.false, or, HSub.hSub, Nat.succ, PProd.fst]]
[InvImage.accessible,[InvImage.accessible.proof_1]]
[ExceptT.pure,[ExceptT.mk, Pure.pure, Except.ok]]
[EStateM.instInhabitedEStateM,[Inhabited.mk, EStateM.Result.error, arbitrary]]
[instReprTuple,[ReprTuple.mk, List.cons, repr]]
[UInt8.noConfusionType,[]]
[ReaderT.run_read,[rfl]]
[Array.foldrM,[dite, LE.le, Array.size, ite, LT.lt, Pure.pure, Nat.le_refl, Array.foldrM.fold]]
[System.FilePath.pathSeparators,[ite, Eq, System.Platform.isWindows, Bool.true, List.cons, Char.ofNat, List.nil]]
[IO.FS.instReprSystemTime,[Repr.mk, Std.Format.bracket, HAppend.hAppend, Std.Format.nil, Std.Format.text, repr, IO.FS.SystemTime.sec, Std.Format.line, IO.FS.SystemTime.nsec]]
[Lean.PrettyPrinter.UnexpandM,[EStateM, Unit]]
[Lean.scientificLitKind,[Lean.Name.mkStr, Lean.Name.anonymous]]
[instToStringFormat,[ToString.mk, Std.Format.pretty, Std.Format.defWidth]]
[IO.Error.interrupted.injEq,[Eq.propIntro, And.intro, Eq.refl, IO.Error.interrupted, Eq.symm, eq_of_heq, HEq.refl]]
[Lean.Parser.Tactic.withReducibleAndInstances,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.nonReservedSymbol, Bool.false, Lean.ParserDescr.const]]
[UInt8.lt,[LT.lt, UInt8.val]]
[instDecidableEqFin,[Decidable, Eq, decEq, Fin.val, Decidable.isTrue, Fin.eq_of_val_eq, Decidable.isFalse, Fin.ne_of_val_ne]]
[USize.div,[USize.mk, HDiv.hDiv, USize.val]]
[Std.Format.MonadPrettyFormat.noConfusionType,[]]
[instInhabitedUInt8.proof_1,[of_decide_eq_true, Eq.refl, Bool.true]]
[Lean.termEval_prio_,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.symbol, Lean.ParserDescr.cat]]
[instReprULift,[Repr.mk, Repr.addAppParen, HAppend.hAppend, Std.Format.text, reprArg, ULift.down]]
[List.headD,[]]
[Fin.sub,[Fin, Fin.mk, HMod.hMod, HAdd.hAdd, HSub.hSub, Fin.sub.proof_1]]
[Array.mapIdxM.map.proof_2,[Eq.mpr, Eq.refl, Eq, HAdd.hAdd, OfNat.ofNat, Array.size, Eq.symm, Nat.add_comm, Nat.add_assoc, rfl]]
[Std.Range.«term[_:_]»,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.symbol, Lean.ParserDescr.cat]]
[IO.Error.interrupted.inj,[And.intro]]
[ExceptT,[Except]]
[Lean.version.minor,[Unit.unit]]
[EStateM.instMonadStateOfEStateM,[MonadStateOf.mk, EStateM.get, EStateM.set, EStateM.modifyGet]]
[instForIn,[ForIn.mk, Stream.forIn]]
[List.foldl,[PProd.fst]]
[List.minimum?,[Unit.unit, Option, Option.none, Option.some, List.foldl, min]]
[Lean.Name.simpMacroScopes,[Unit.unit, Lean.Name, Lean.Name.hasMacroScopes, Lean.Name.anonymous, Lean.Name.str, Lean.Name.mkNum, PProd.fst, BEq.beq]]
[Array.eraseIdxSzAuxInstance,[Inhabited.mk, Subtype.mk, Array.pop, Array.size_pop]]
[Sum.inr.sizeOf_spec,[Eq.refl, HAdd.hAdd, OfNat.ofNat, SizeOf.sizeOf]]
[StdGen.mk.injEq,[Eq.propIntro, And.intro, Eq.refl, StdGen.mk, Eq.symm, eq_of_heq, HEq.refl]]
[Array.partition,[Bind.bind, ForIn.forIn, MProd.mk, ite, Eq, Bool.true, Pure.pure, PUnit.unit, ForInStep.yield, Id, Prod, Array, Prod.mk]]
[STWorld.noConfusionType,[]]
[ByteArray.toUInt64LE!,[ite, Eq, BEq.beq, ByteArray.size, OfNat.ofNat, Bool.true, HOr.hOr, HShiftLeft.hShiftLeft, UInt8.toUInt64, ByteArray.get!, panicWithPosWithDecl, HAppend.hAppend]]
[Int.negSucc.sizeOf_spec,[Eq.refl, HAdd.hAdd, OfNat.ofNat, SizeOf.sizeOf]]
[Lean.Macro.Methods.expandMacro?,[]]
[Lean.Parser.Tactic.refine',[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.nonReservedSymbol, Bool.false, Lean.ParserDescr.cat]]
[Subsingleton.noConfusionType,[]]
[Subtype.mk.injEq,[Eq.propIntro, Eq.refl, Subtype.mk, Eq.symm, eq_of_heq, HEq.refl]]
[String.modify,[String.set, String.get]]
[instShiftLeftUInt16,[ShiftLeft.mk, UInt16.shiftLeft]]
[Lean.MonadNameGenerator.setNGen,[]]
[IO.FS.Stream.Buffer.mk.sizeOf_spec,[Eq.refl, HAdd.hAdd, OfNat.ofNat, SizeOf.sizeOf]]
[Lean.mkGroupNode,[Lean.mkNode, Lean.groupKind]]
[Std.Format.appendEx,[Std.Format.append]]
[UInt32.toUSize,[Nat.toUSize, UInt32.toNat]]
[Classical.typeDecidable,[PSum, False, Classical.propDecidable, Nonempty, PSum.inl, arbitrary, PSum.inr, Classical.typeDecidable.proof_1]]
[HMul.hMul,[]]
[IO.Process.Output.mk.inj,[And.intro]]
[instLENat,[LE.mk, Nat.le]]
[IO.FS.instReprDirEntry,[Repr.mk, Std.Format.bracket, HAppend.hAppend, Std.Format.nil, Std.Format.text, repr, IO.FS.DirEntry.root, Std.Format.line, IO.FS.DirEntry.fileName]]
[fix3,[fixCore3, arbitrary]]
[Subtype.instDecidableEqSubtype,[Decidable, Eq, Subtype.mk, dite, Decidable.isTrue, Subtype.instDecidableEqSubtype.proof_1, Decidable.isFalse, Subtype.instDecidableEqSubtype.proof_2]]
[Subtype.instDecidableEqSubtype.proof_1,[rfl]]
[FloatSpec.decLt,[]]
[instReprStdGen,[Repr.mk, Std.Format, Std.Format.bracket, HAppend.hAppend, repr, Std.Format.text]]
[instReprBool,[Repr.mk, Std.Format, Std.Format.text]]
[Lean.Name.str.inj,[And.intro]]
[coeSortToCoeTail,[CoeTail.mk, CoeSort.coe]]
[dif_eq_if,[Eq, dite, ite, rfl]]
[List.notElem,[not, List.elem]]
[instHashableNat,[Hashable.mk, UInt64.ofNat]]
[Fin.modn,[Fin, Fin.mk, HMod.hMod, Fin.modn.proof_1]]
[instMonadBaseIO,[inferInstanceAs, Monad, EIO, Empty]]
[Lean.Syntax.decodeNameLit,[ite, Eq, BEq.beq, String.get, OfNat.ofNat, Char.ofNat, Bool.true, Unit.unit, List.cons, Option, Lean.Name, Substring.drop, String.toSubstring, List.nil, Option.none, Option.some, List.foldr, Lean.isIdBeginEscape, String.front, Lean.Name.mkStr, String.dropRight, String.drop, Lean.Name.anonymous]]
[instReprSubarray,[Repr.mk, HAppend.hAppend, repr, Subarray.toArray, Std.Format.text]]
[EStateM.seqRight,[EStateM.Result, Unit.unit, EStateM.Result.error]]
[«prec(_)»,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.nonReservedSymbol, Bool.false, Lean.ParserDescr.cat, Lean.ParserDescr.symbol]]
[Substring.drop,[Substring.mk, Substring, HAdd.hAdd, Substring.nextn, OfNat.ofNat]]
[Substring.foldr,[String.foldrAux]]
[RandomGen.next,[]]
[Lean.unifConstraintElem,[Lean.ParserDescr.nodeWithAntiquot, Lean.Name.mkStr, Lean.Name.anonymous, Lean.ParserDescr.binary, Lean.ParserDescr.const, Lean.unifConstraint, Lean.ParserDescr.unary, Lean.ParserDescr.symbol]]
[Substring.contains,[Substring.any, BEq.beq]]
[Nat.add_succ,[rfl]]
[prioDefault,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.nonReservedSymbol, Bool.false]]
[Lean.Meta.Rewrite.Config.mk.injEq,[Eq.propIntro, And.intro, Eq.refl, Lean.Meta.Rewrite.Config.mk, Eq.symm, eq_of_heq, HEq.refl]]
[CoeHead.noConfusionType,[]]
[mkStdGen,[StdGen.mk, HAdd.hAdd, OfNat.ofNat]]
[Array.foldlM.proof_1,[Nat.le_refl, Array.size]]
[IO.withStderr,[Bind.bind, liftM, IO.setStderr, tryFinally, Functor.discard]]
[Nat.foldAux,[PProd.fst, HSub.hSub, Nat.succ]]
[Lean.Name.hash.proof_1,[of_decide_eq_true, Eq.refl, Bool.true]]
[ExceptCpsT.run_pure,[rfl]]
[ExceptCpsT.runK,[]]
[IO.FS.Handle.readBinToEnd,[ByteArray.empty, IO.FS.Handle.readBinToEnd.loop]]
[instHMod,[HMod.mk, Mod.mod]]
[Nonempty.elim.proof_1,[]]
[USize.modn,[USize.mk, HMod.hMod, USize.val]]
[ReaderT.instLawfulMonadReaderT,[ReaderT.instLawfulMonadReaderT.proof_1]]
[String.toSubstring,[Substring.mk, OfNat.ofNat, String.bsize]]
[Fin.land,[Fin, Fin.mk, HMod.hMod, Nat.land, Fin.land.proof_1]]
[Bool.and_self,[rfl, Eq.symm, Eq.refl]]
[and_true,[propext, Iff.intro, And.left, And.intro, trivial]]
[Lean.Syntax.atom.sizeOf_spec,[Eq.refl, HAdd.hAdd, OfNat.ofNat, SizeOf.sizeOf]]
[UInt32.ofNat,[UInt32.mk, Fin.ofNat]]
[Std.Range.forM,[Std.Range.stop, Std.Range.start, Std.Range.forM.loop]]
[«term_-_»,[Lean.ParserDescr.trailingNode, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.symbol, Lean.ParserDescr.cat]]
[Classical.choose,[Subtype.val, Classical.indefiniteDescription]]
[IO.eprint,[Bind.bind, IO.getStderr, IO.FS.Stream.putStr, ToString.toString]]
[IO.Error.illegalOperation.sizeOf_spec,[Eq.refl, HAdd.hAdd, OfNat.ofNat, SizeOf.sizeOf]]
[Array.findSomeM?,[Bind.bind, ForIn.forIn, MProd.mk, Option.none, PUnit.unit, ForInStep, MProd, Option, PUnit, Pure.pure, ForInStep.done, Option.some, ForInStep.yield, Unit.unit, MProd.fst]]
[instInhabitedForInStep,[Inhabited.mk, ForInStep.done, arbitrary]]
[Array.mapSepElems,[Id.run, Array.mapSepElemsM]]
[«term_*_»,[Lean.ParserDescr.trailingNode, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.symbol, Lean.ParserDescr.cat]]
[UInt16.toUInt8,[Nat.toUInt8, UInt16.toNat]]
[Fin.shiftRight.proof_1,[LT.lt, HMod.hMod, Nat.mod_lt]]
[Array.appendList,[List.foldl, Array.push]]
[System.FilePath.mk.inj,[]]
[IO.Process.SpawnArgs.mk.injEq,[Eq.propIntro, And.intro, Eq.refl, IO.Process.SpawnArgs.mk, Eq.symm, eq_of_heq, HEq.refl]]
[Lean.Parser.Tactic.Conv.pattern,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.nonReservedSymbol, Bool.false, Lean.ParserDescr.cat]]
[ByteArray.copySlice,[ByteArray.mk, HAppend.hAppend, Array.extract, ByteArray.data, OfNat.ofNat, HAdd.hAdd, Array.size]]
[Array.foldr,[Id.run, Array.foldrM]]
[panicWithPosWithDecl,[panic, HAppend.hAppend, ToString.toString]]
[StateRefT'.instMonadStateOfStateRefT',[MonadStateOf.mk, StateRefT'.get, StateRefT'.set, StateRefT'.modifyGet]]
[OptionT.pure,[OptionT.mk, Pure.pure, Option.some]]
[IO.Error.noSuchThing.injEq,[Eq.propIntro, And.intro, Eq.refl, IO.Error.noSuchThing, Eq.symm, eq_of_heq, HEq.refl]]
[IO.Error.resourceExhausted.injEq,[Eq.propIntro, And.intro, Eq.refl, IO.Error.resourceExhausted, Eq.symm, eq_of_heq, HEq.refl]]
[fixCore,[fixCore1]]
[Std.Format.nil.sizeOf_spec,[Eq.refl, OfNat.ofNat]]
[MonadExceptOf.tryCatch,[]]
[Quotient.lift₂,[Quotient.lift, Quotient.lift₂.proof_1, Quotient.lift₂.proof_2]]
[instXorUInt32,[Xor.mk, UInt32.xor]]
[instStreamProdProd,[Stream.mk, Option, Prod, Unit.unit, Stream.next?, Option.none, Option.some, Prod.mk]]
[UInt64.decEq.proof_2,[absurd]]
[Nat.pos_pow_of_pos,[Nat.pow_le_pow_of_le_right, Nat.zero_le]]
[Nat.digitChar,[ite, Eq, OfNat.ofNat, Char.ofNat]]
[Not,[False]]
[Nat.ble_eq_true_of_le,[Unit.unit, Eq.symm, eq_of_heq, Eq.refl, HEq.refl, Eq, Nat.ble, Bool.true, Nat.ble_self_eq_true, Nat.ble_succ_eq_true, PProd.fst]]
[StateT.instMonadExceptOfStateT,[MonadExceptOf.mk, Function.comp, StateT.lift, throwThe, tryCatchThe]]
[List.mapTR,[List.mapTRAux, List.nil]]
[PSigma.mk.sizeOf_spec,[Eq.refl, HAdd.hAdd, OfNat.ofNat, SizeOf.sizeOf]]
[instHOrElse,[HOrElse.mk, OrElse.orElse]]
[IO.FS.Stream.putStr,[]]
[IO.Process.Stdio.toHandleType,[Unit.unit, IO.FS.Handle, Unit]]
[Lean.Parser.Tactic.Conv.conv.quot,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.symbol, Lean.ParserDescr.unary, Lean.ParserDescr.cat]]
[Subtype.eq,[Eq.symm, eq_of_heq, Eq.refl, Subtype.val, Subtype.mk, HEq.refl, Eq, rfl]]
[Subtype.property,[]]
[Classical.«tacticByCases__:_»,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.nonReservedSymbol, Bool.false, Lean.ParserDescr.const, Lean.ParserDescr.symbol, Lean.ParserDescr.cat]]
[coeTail,[CoeTail.coe]]
[Int.mod,[Int, Int.ofNat, HMod.hMod, Nat.succ, Neg.neg]]
[instBEqProd,[BEq.mk, Bool, and, BEq.beq]]
[Int.instLEInt,[LE.mk, Int.le]]
[Lean.Parser.Syntax.addPrio,[Lean.ParserDescr.trailingNode, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.symbol, Lean.ParserDescr.cat]]
[«stx_,*,?»,[Lean.ParserDescr.trailingNode, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.symbol]]
[ExceptT.run_lift,[rfl]]
[System.FilePath.toString,[]]
[instToStringId,[inferInstanceAs, ToString]]
[System.FilePath.withFileName,[Unit.unit, System.FilePath, System.FilePath.parent, System.FilePath.mk, HDiv.hDiv]]
[Lean.MacroScopesView.imported,[]]
[StateCpsT.runK_bind_lift,[rfl]]
[EStateM.throw,[EStateM.Result.error]]
[PSigma.mkSkipLeft.proof_1,[PSigma.RevLex.right]]
[Std.Format.append.injEq,[Eq.propIntro, And.intro, Eq.refl, Std.Format.append, Eq.symm, eq_of_heq, HEq.refl]]
[Lean.Parser.Tactic.tacticSuffices_,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.nonReservedSymbol, Bool.false, Lean.ParserDescr.const]]
[Option.eq_none_of_isNone,[Eq.refl, Bool.true, HEq.refl, Eq, Option.none, rfl]]
[Xor.xor,[]]
[IO.AccessRight.noConfusionType,[]]
[toBoolUsing_eq_true,[decide_eq_true]]
[Char.instLTChar,[LT.mk, Char.lt]]
[instToStringSubstring,[ToString.mk, Substring.toString]]
[instInhabitedUInt32.proof_1,[of_decide_eq_true, Eq.refl, Bool.true]]
[Lean.firstFrontendMacroScope,[HAdd.hAdd, Lean.reservedMacroScope, OfNat.ofNat]]
[List.intercalate,[List.join, List.intersperse]]
[Std.Format.FlattenBehavior.allOrNone.sizeOf_spec,[Eq.refl, OfNat.ofNat]]
[Thunk.bind,[Thunk.mk, Thunk.get]]
[Array.findIdx?,[Array.size, OfNat.ofNat, rfl, Array.findIdx?.loop]]
[Lean.Parser.Tactic.tacticLet'_,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.nonReservedSymbol, Bool.false, Lean.ParserDescr.const]]
[Subarray.foldlM,[Array.foldlM, Subarray.as, Subarray.start, Subarray.stop]]
[instInhabitedList,[Inhabited.mk, List.nil]]
[Int.pow,[Unit.unit, Int, OfNat.ofNat, HMul.hMul, PProd.fst]]
[coeFun,[CoeFun.coe]]
[«term_<_»,[Lean.ParserDescr.trailingNode, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.symbol, Lean.ParserDescr.cat]]
[IO.toEIO,[EStateM.adaptExcept]]
[instReprUInt8,[Repr.mk, repr, UInt8.toNat]]
[IO.bindTask,[EIO.bindTask]]
[measure,[invImage, Nat.lt_wfRel]]
[ByteArray.forIn,[ByteArray.size, Nat.le_refl, ByteArray.forIn.loop]]
[String.trim,[Substring.toString, Substring.trim, String.toSubstring]]
[Char.isValidChar_of_isValidChar_Nat,[isValidChar, UInt32.ofNat', Char.isValidUInt32, Or.inl, Or.inr, And.intro]]
[«command_ClassAbbrev__:_:=__,»,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.const, Lean.ParserDescr.symbol, Lean.ParserDescr.unary, Lean.ParserDescr.cat]]
[EStateM.dummyRestore,[]]
[IO.FS.DirEntry.mk.inj,[And.intro]]
[Lean.evalOptPrio,[Unit.unit, Lean.MacroM, Nat, Lean.evalPrio, Pure.pure, OfNat.ofNat]]
[Subarray.anyM,[Array.anyM, Subarray.as, Subarray.start, Subarray.stop]]
[instMulNat,[Mul.mk, Nat.mul]]
[Array.contains,[Array.any, BEq.beq, OfNat.ofNat, Array.size]]
[OptionT.instMonadLiftOptionT,[MonadLift.mk, OptionT.lift]]
[Char.utf8Size.proof_5,[of_decide_eq_true, Eq.refl, Bool.true]]
[Array.mkArray,[Array.mk, List.replicate]]
[randBool,[Prod, Bool, Prod.mk, Decidable.decide, Eq, OfNat.ofNat]]
[Fin.instAddFin,[Add.mk, Fin.add]]
[instInhabitedUInt8,[Inhabited.mk, UInt8.ofNatCore, OfNat.ofNat, instInhabitedUInt8.proof_1]]
[ULift.up_down,[Eq, ULift.up, ULift.down, rfl]]
[Nonempty.elim,[Nonempty.elim.proof_1]]
[instInhabitedExceptT,[Inhabited.mk, MonadExcept.throw, arbitrary]]
[IO.Error.mkUnsupportedOperation,[IO.Error.unsupportedOperation]]
[Array.forIn,[Array.size, Nat.le_refl, Array.forIn.loop]]
[instSubUInt64,[Sub.mk, UInt64.sub]]
[Array.data,[]]
[UInt32.land,[UInt32.mk, Fin.land, UInt32.val]]
[ExceptT.run_map,[Eq.mpr, congrArg, Eq, ExceptT.run, ExceptT.mk, Bind.bind, Except, Pure.pure, Except.ok, Except.error, map_eq_pure_bind, Except.map, bind_congr, of_eq_true, eq_self, Eq.symm, Eq.refl]]
[instReprInt,[Repr.mk, Std.Format.text, Int.repr]]
[Classical.skolem,[Iff.intro, Classical.axiomOfChoice, Exists, Exists.intro]]
[Classical.epsilon_singleton,[Classical.epsilon_spec, Exists.intro, rfl]]
[Nat.instXorNat,[Xor.mk, Nat.xor]]
[Bool.true_or,[rfl, Eq.symm, Eq.refl]]
[Lean.Syntax.mkScientificLit,[Lean.Syntax.mkLit, Lean.scientificLitKind]]
[Std.Format.bracketFill,[Std.Format.fill, Std.Format.nest, Int.ofNat, String.length, HAppend.hAppend, Std.Format.text]]
[Lean.Syntax.setHeadInfo,[Unit.unit, Lean.Syntax, Lean.Syntax.setHeadInfoAux]]
[Array.forInUnsafe,[OfNat.ofNat, Array.forInUnsafe.loop]]
[Array.insertionSort,[OfNat.ofNat, Array.size, Array.insertionSort.traverse, Array.insertionSort.swapLoop]]
[Char.utf8Size.proof_2,[of_decide_eq_true, Eq.refl, Bool.true]]
[Lean.Parser.Tactic.Conv.change,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.nonReservedSymbol, Bool.false, Lean.ParserDescr.cat]]
[Seq.noConfusionType,[]]
[PSum.inr.inj,[]]
[UInt32.toNat,[Fin.val, UInt32.val]]
[IO.Process.Output.noConfusionType,[]]
[List.enum,[List.enumFrom, OfNat.ofNat]]
[orM,[Bind.bind, Unit.unit, ToBool.toBool, Pure.pure]]
[ExceptT.instMonadLiftExceptExceptT,[MonadLift.mk, ExceptT.mk, Pure.pure]]
[instCoeNatInt,[Coe.mk, Int.ofNat]]
[PSigma.lexNdep,[PSigma.Lex]]
[Array.findRevM?,[Array.findSomeRevM?, Bind.bind, Pure.pure, ite, Eq, Bool.true, Option.some, Option.none]]
[Lean.Syntax.ibelow,[True, And]]
[Lean.Name.beq,[Unit.unit, Lean.Name.anonymous, Lean.Name.str, Lean.Name.num, Bool, Bool.true, and, BEq.beq, PProd.fst, Bool.false]]
[UInt8.le,[LE.le, UInt8.val]]
[Sigma.snd,[]]
[Fin.mul.proof_1,[LT.lt, HMod.hMod, Nat.mod_lt]]
[Array.getD,[dite, LT.lt, Array.size, Array.get, Fin.mk]]
[Quotient.recOnSubsingleton₂.proof_2,[]]
[Prod.foldI,[Nat.foldAux, Prod.snd, HSub.hSub, Prod.fst]]
[HDiv.noConfusionType,[]]
[ExceptT.adapt,[ExceptT.mk, Functor.map, Except.mapError]]
[Array.reverse,[OfNat.ofNat, Array.reverse.rev]]
[instMonadWithReaderOf,[MonadWithReaderOf.mk, MonadFunctorT.monadMap, withTheReader]]
[Array.set,[Array.mk, List.set, Array.data, Fin.val]]
[EStateM.Result.ok.sizeOf_spec,[Eq.refl, HAdd.hAdd, OfNat.ofNat, SizeOf.sizeOf]]
[MProd.mk.injEq,[Eq.propIntro, And.intro, Eq.refl, MProd.mk, Eq.symm, eq_of_heq, HEq.refl]]
[Lean.Name.getRoot,[Unit.unit, Lean.Name.str, Lean.Name.anonymous, Lean.Name.num, Lean.Name, PProd.fst]]
[StateT.lift,[Bind.bind, Pure.pure, Prod.mk]]
[HasEquiv.Equiv,[]]
[StateT,[Prod]]
[List.reverse_nil,[rfl]]
[Char.isValidChar_zero,[Or.inl, of_decide_eq_true, Eq.refl, Bool.true]]
[Lean.NameGenerator.idx,[]]
[Lean.Parser.Tactic.refine,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.nonReservedSymbol, Bool.false, Lean.ParserDescr.cat]]
[Classical.indefiniteDescription,[Classical.choice, Classical.indefiniteDescription.proof_1]]
[Function.Equiv.trans,[Eq.trans]]
[Array.sequenceMap.loop,[dite, LT.lt, Array.size, Unit.unit, Array, Pure.pure, Bind.bind, Array.get, Fin.mk, PProd.fst, HAdd.hAdd, OfNat.ofNat, Array.push]]
[Array.findSome!,[Unit.unit, Array.findSome?, panicWithPosWithDecl, OfNat.ofNat]]
[Lean.mkCIdentFromRef,[Bind.bind, Lean.MonadRef.getRef, Pure.pure, Lean.mkCIdentFrom]]
[«term_×__1»,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.bracketedExplicitBinders, Lean.ParserDescr.symbol, Lean.ParserDescr.cat]]
[IO.FS.Metadata.mk.sizeOf_spec,[Eq.refl, HAdd.hAdd, OfNat.ofNat, SizeOf.sizeOf]]
[USize.toNat,[Fin.val, USize.val]]
[instToStringPUnit,[ToString.mk]]
[USize.land,[USize.mk, Fin.land, USize.val]]
[WellFounded.fixF,[]]
[Lean.isIdRest,[or, Char.isAlphanum, Decidable.decide, Eq, Char.ofNat, BEq.beq, Lean.isLetterLike, Lean.isSubScriptAlnum]]
[Lean.instQuoteArray,[Lean.Quote.mk, Lean.Syntax.mkCApp, Lean.Name.mkStr, Lean.Name.anonymous, List.toArray, List.cons, Lean.Quote.quote, Array.toList, List.nil]]
[StateT.instLawfulMonadStateT,[StateT.instLawfulMonadStateT.proof_1]]
[Lean.defaultMaxRecDepth,[OfNat.ofNat]]
[List.instForInList,[ForIn.mk, List.forIn]]
[Bool.or_true,[rfl, Eq.symm, Eq.refl]]
[Array.zip,[Array.zipWith, Prod.mk]]
[IO.FS.instReprFileType,[Repr.mk, Unit.unit, Std.Format, Repr.addAppParen, Std.Format.group, Std.Format.nest, ite, GE.ge, OfNat.ofNat, Std.Format.text, Std.Format.FlattenBehavior.allOrNone]]
[Array.forIn.loop.proof_1,[Nat.lt_of_le_of_lt, Nat.sub_le, HSub.hSub, Array.size, OfNat.ofNat, Nat.sub_lt, Nat.zero_lt_of_lt, Nat.lt_of_lt_of_le, Nat.lt_succ_self, of_decide_eq_true, Eq.refl, Bool.true]]
[instModUInt16,[Mod.mk, UInt16.mod]]
[List.lookup,[Option, Option.none, Unit.unit, BEq.beq, Option.some, PProd.fst]]
[List.span,[List.spanAux, List.nil]]
[Lean.unifConstraint,[Lean.ParserDescr.nodeWithAntiquot, Lean.Name.mkStr, Lean.Name.anonymous, Lean.ParserDescr.binary, Lean.ParserDescr.cat, OfNat.ofNat, Lean.ParserDescr.symbol]]
[USize.shiftLeft,[USize.mk, HShiftLeft.hShiftLeft, USize.val, USize.modn, System.Platform.numBits]]
[compareOfLessAndEq,[ite, LT.lt, Ordering.lt, Eq, Ordering.eq, Ordering.gt]]
[ne_eq,[rfl]]
[GT.gt,[LT.lt]]
[Array.instReprArray,[Repr.mk, Std.Format, ite, Eq, BEq.beq, Array.size, OfNat.ofNat, Bool.true, Std.Format.text, Std.Format.bracketFill, Std.Format.joinSep, Array.toList, HAppend.hAppend, Std.Format.line]]
[instHModUSizeNatUSize,[HMod.mk, USize.modn]]
[ByteArray.set,[ByteArray, ByteArray.mk, Array.set]]
[System.FilePath.components,[String.splitOn, System.FilePath.toString, System.FilePath.normalize, Bool.false, Char.toString, System.FilePath.pathSeparator]]
[map_eq_pure_bind,[Eq.mpr, Eq.refl, Eq, Functor.map, Bind.bind, Pure.pure, Eq.symm, LawfulMonad.bind_pure_comp, rfl]]
[IO.FS.instInhabitedSystemTime,[Inhabited.mk, IO.FS.SystemTime.mk, arbitrary]]
[Lean.Parser.Tactic.rotateRight,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.nonReservedSymbol, Bool.false, Lean.ParserDescr.unary, Lean.ParserDescr.const]]
[map_congr,[of_eq_true, Eq.trans, congrFun, congrArg, Eq, Functor.map, funext, eq_self]]
[fix5,[fixCore5, arbitrary]]
[IO.Error.instToStringError,[ToString.mk, IO.Error.toString]]
[Lean.Syntax.getOp,[Lean.Syntax.getArg]]
[Option.eq_of_eq_some,[Eq, rfl, Iff.mpr, Iff.mp, congrArg, Option.some]]
[UInt8.land,[UInt8.mk, Fin.land, UInt8.val]]
[Std.Format.nest.sizeOf_spec,[Eq.refl, HAdd.hAdd, OfNat.ofNat, SizeOf.sizeOf]]
[Lean.Meta.Simp.ConfigCtx.mk.sizeOf_spec,[Eq.refl, HAdd.hAdd, OfNat.ofNat, SizeOf.sizeOf]]
[Neg.noConfusionType,[]]
[Task.Priority.max,[OfNat.ofNat]]
[and_self,[propext, Iff.intro, And.left, And.intro]]
[Lean.Name.modifyBase,[ite, Eq, Lean.Name.hasMacroScopes, Bool.true, Lean.MacroScopesView.review, Lean.MacroScopesView.mk, Lean.MacroScopesView.name, Lean.MacroScopesView.imported, Lean.MacroScopesView.mainModule, Lean.MacroScopesView.scopes]]
[ExceptT.bind,[ExceptT.mk, Bind.bind, ExceptT.bindCont]]
[instToStreamArraySubarray,[ToStream.mk, Array.toSubarray, OfNat.ofNat, Array.size]]
[UInt16.ofNatCore,[UInt16.mk, Fin.mk]]
[ExceptT.lift_pure,[of_eq_true, Eq.trans, congrFun, congrArg, Eq, ExceptT.mk, LawfulApplicative.map_pure, Except.ok, Pure.pure, eq_self]]
[Lean.Meta.Rewrite.Config.offsetCnstrs,[]]
[Lean.Parser.Tactic.Conv.conv,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.nonReservedSymbol, Bool.false, Lean.ParserDescr.unary, Lean.ParserDescr.symbol, Lean.ParserDescr.const, Lean.ParserDescr.cat, Lean.Parser.Tactic.Conv.convSeq]]
[Nat.foldM,[Nat.foldM.loop]]
[Lean.Macro.Methods.hasDecl,[]]
[Fin.instInhabitedFinHAdd,[Inhabited.mk, OfNat.ofNat]]
[Char.mk.sizeOf_spec,[Eq.refl, HAdd.hAdd, OfNat.ofNat, SizeOf.sizeOf]]
[OptionT.instMonadExceptOfOptionT,[MonadExceptOf.mk, OptionT.mk, throwThe, tryCatchThe]]
[Nat.foldRev.loop,[PProd.fst]]
[IO.Process.StdioConfig.mk.injEq,[Eq.propIntro, And.intro, Eq.refl, IO.Process.StdioConfig.mk, Eq.symm, eq_of_heq, HEq.refl]]
[Lean.Parser.Tactic.tacticRfl,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.nonReservedSymbol, Bool.false]]
[Fin.elim0,[absurd, Nat.not_lt_zero]]
[coeM,[Bind.bind, Pure.pure, coe]]
[List.length_reverse,[rfl, of_eq_true, Eq.trans, congr, congrArg, Eq, List.length, List.reverse_cons, List.length_append, List.reverse, List.cons, List.nil, HAdd.hAdd, List.length_cons, Nat.succ, List.length_nil, eq_self, OfNat.ofNat]]
[Int.instLTInt,[LT.mk, Int.lt]]
[Lean.Parser.Tactic.rewriteSeq,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.nonReservedSymbol, Bool.false, Lean.ParserDescr.unary, Lean.Parser.Tactic.config, Lean.Parser.Tactic.rwRuleSeq, Lean.Parser.Tactic.location]]
[noConfusionEnum.proof_2,[congrArg]]
[ExceptT.ext,[id]]
[IO.FS.withFile,[Bind.bind, IO.FS.Handle.mk, Bool.true]]
[«term_≠_»,[Lean.ParserDescr.trailingNode, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.symbol, Lean.ParserDescr.cat]]
[optParam_eq,[rfl]]
[Array.binSearchContains,[ite, LT.lt, Array.size, Array.binSearchAux, Option.isSome, Bool.false]]
[List.hasDecidableLt.proof_1,[Eq.refl, List.nil, HEq.refl, False]]
[List.noConfusionType,[]]
[ByteArray.mk.inj,[]]
[List.partitionAux,[Prod, List, Prod.mk, List.reverse, Unit.unit, PProd.fst, List.cons]]
[USize.add,[USize.mk, HAdd.hAdd, USize.val]]
[modifyThe,[MonadStateOf.modifyGet, Prod.mk, PUnit.unit]]
[Except.map_id,[funext, Eq.mpr, congr, congrArg, Eq, Except, Except.error, Except.ok, id_eq, rfl, Eq.symm, Eq.refl]]
[bfix2,[PProd.fst]]
[Fin.instDivFin,[Div.mk, Fin.div]]
[WellFounded.apply.proof_1,[]]
[decidableOfDecidableOfEq,[]]
[Lean.version.major,[Unit.unit]]
[Classical.epsilon_spec,[Classical.epsilon_spec_aux, nonempty_of_exists]]
[List.dropLast,[Unit.unit, List.cons, List, List.nil, PProd.fst]]
[Int.repr,[String, Nat.repr, HAppend.hAppend, Nat.succ]]
[Lean.idEndEscape,[Char.ofNat]]
[Lean.MonadNameGenerator.getNGen,[]]
[Bool.false_and,[rfl, Eq.symm, Eq.refl]]
[IO.Error.resourceVanished.injEq,[Eq.propIntro, And.intro, Eq.refl, IO.Error.resourceVanished, Eq.symm, eq_of_heq, HEq.refl]]
[Lean.Meta.Simp.instBEqConfig,[BEq.mk, Bool, and, Bool.true, BEq.beq, Bool.false]]
[String.instInhabitedString,[Inhabited.mk]]
[Id.pure_eq,[rfl]]
[runEST,[Except, Unit, Unit.unit, Except.ok, Except.error]]
[Lean.interpolatedStrLitKind,[Lean.Name.mkStr, Lean.Name.anonymous]]
[Lean.Macro.resolveNamespace?,[Bind.bind, Lean.Macro.getMethods, Lean.Macro.Methods.resolveNamespace?]]
[ExceptT.mk,[]]
[instReprId_1,[inferInstanceAs, Repr]]
[Lean.replaceRef,[Option.none, Lean.Syntax, Lean.Syntax.getPos?, Bool.false]]
[ForM.noConfusionType,[]]
[Quotient.recOnSubsingleton₂,[Quot.recOnSubsingleton]]
[Nat.zero_add,[Unit.unit, Eq, HAdd.hAdd, OfNat.ofNat, rfl, congrArg, Nat.succ, PProd.fst]]
[isValidChar,[Or, LT.lt, OfNat.ofNat, And]]
[ToString.toString,[]]
[UInt16.size,[OfNat.ofNat]]
[PSum.inl.injEq,[Eq.propIntro, Eq.refl, PSum.inl, Eq.symm, eq_of_heq, HEq.refl]]
[Quot.indepCoherent,[PSigma.eta, Quot.sound]]
[Lean.Meta.Simp.Config.zeta,[]]
[Array.anyMUnsafe,[ite, LT.lt, LE.le, Array.size, USize.ofNat, Pure.pure, Bool.false, Array.anyMUnsafe.any]]
[ExceptCpsT.runCatch_bind_throw,[rfl]]
[List.reverseAux_reverseAux,[rfl, of_eq_true, Eq.trans, congr, congrArg, Eq, List.cons, List.reverseAux, List.nil, eq_self]]
[instHModUInt32NatUInt32,[HMod.mk, UInt32.modn]]
[List.isSuffixOf,[List.isPrefixOf, List.reverse]]
[OrElse.noConfusionType,[]]
[seqRight_eq_bind,[Eq.mpr, Eq.refl, Eq, SeqRight.seqRight, Bind.bind, LawfulApplicative.seqRight_eq, of_eq_true, Eq.trans, congrFun, congrArg, Seq.seq, map_eq_pure_bind, id, seq_eq_bind_map, Pure.pure, funext, LawfulMonad.bind_assoc, LawfulMonad.pure_bind, id_eq, bind_pure, eq_self]]
[Lean.Syntax.setInfo,[Unit.unit, Lean.Syntax, Lean.Syntax.atom, Lean.Syntax.ident, Lean.Syntax.node, Lean.Syntax.missing]]
[IO.instInhabitedError,[Inhabited.mk, IO.Error.alreadyExists, arbitrary]]
[Lean.idBeginEscape,[Char.ofNat]]
[Lean.mkNode,[Lean.Syntax.node, Lean.SourceInfo.none]]
[Lean.monadNameGeneratorLift,[Lean.MonadNameGenerator.mk, liftM, Lean.MonadNameGenerator.getNGen, Lean.MonadNameGenerator.setNGen]]
[ByteArray.get,[UInt8, Array.get]]
[LawfulApplicative.seqLeft_eq,[]]
[instHAnd,[HAnd.mk, AndOp.and]]
[instInhabitedBool,[Inhabited.mk, Bool.false]]
[Lean.Name.toString,[Lean.Name.toStringWithSep, and, not, Lean.Name.isInaccessibleUserName, Lean.Name.hasMacroScopes, Lean.Name.toString.maybePseudoSyntax]]
[Nat.mul_succ,[rfl]]
[Fin.ne_of_val_ne,[absurd, Fin.val_eq_of_eq]]
[Prod.allI,[Nat.anyAux, not, Prod.snd, HSub.hSub, Prod.fst]]
[Quot.liftBeta,[rfl]]
[UInt64.size,[OfNat.ofNat]]
[Thunk.mk.sizeOf_spec,[Eq.refl, OfNat.ofNat]]
[Array.foldrMUnsafe,[ite, LE.le, Array.size, LT.lt, USize.ofNat, Pure.pure, Array.foldrMUnsafe.fold]]
[UInt16.mk.sizeOf_spec,[Eq.refl, HAdd.hAdd, OfNat.ofNat, SizeOf.sizeOf]]
[instReprString,[Repr.mk, Std.Format.text, String.quote]]
[StateT.run_pure,[rfl]]
[IO.FS.Stream.mk.sizeOf_spec,[Eq.refl, OfNat.ofNat]]
[stdNext,[Prod, Nat, StdGen, Prod.mk, Int.toNat, StdGen.mk]]
[IO.FS.writeBinFile,[Bind.bind, IO.FS.Handle.mk, IO.FS.Mode.write, Bool.true, IO.FS.Handle.write]]
[StateT.run_map,[of_eq_true, Eq.trans, congrArg, Eq, Bind.bind, Pure.pure, Prod.mk, map_eq_pure_bind, Prod.fst, Prod.snd, eq_self]]
[IO.appDir,[Bind.bind, IO.appPath, Pure.pure, System.FilePath.parent, Option.none, IO, System.FilePath, IO.FS.realPath, MonadExcept.throw, IO.userError, HAppend.hAppend, ToString.toString]]
[withPtrEqDecEq.proof_3,[ofBoolUsing_eq_false]]
[DoResultPRBC.break.sizeOf_spec,[Eq.refl, HAdd.hAdd, OfNat.ofNat, SizeOf.sizeOf]]
[instMonadExceptOfEIO,[inferInstanceAs, MonadExceptOf, EStateM, IO.RealWorld]]
[Fin.ofNat.proof_1,[Nat.mod_lt, Nat.zero_lt_succ]]
[Mul.noConfusionType,[]]
[Quot.inductionOn,[Quot.ind]]
[MonadControlT.noConfusionType,[]]
[WellFounded.fixFEq,[WellFounded.fixFEq.proof_1]]
[String.decapitalize,[String.set, OfNat.ofNat, Char.toLower, String.get]]
[ite,[]]
[String.push,[String, String.mk, HAppend.hAppend, List.cons, List.nil]]
[Classical.propComplete,[Or, Eq, True, False, Classical.em, Or.inl, propext, Iff.intro, True.intro, Or.inr, False.elim]]
[Classical.strongIndefiniteDescription.proof_1,[Subtype.property, Classical.indefiniteDescription]]
[Fin.shiftLeft,[Fin, Fin.mk, HMod.hMod, HShiftLeft.hShiftLeft, Fin.shiftLeft.proof_1]]
[Lean.isGreek,[and, Decidable.decide, LE.le, OfNat.ofNat, Char.val]]
[UInt32.toUInt16,[Nat.toUInt16, UInt32.toNat]]
[IO.FS.Mode.write.sizeOf_spec,[Eq.refl, OfNat.ofNat]]
[instDecidableEqSum.proof_4,[absurd]]
[true_and,[propext, Iff.intro, And.right, And.intro, trivial]]
[Nat.toUInt32,[UInt32.ofNat]]
[instOfNatNat,[OfNat.mk]]
[Fin.div.proof_1,[LT.lt, HMod.hMod, Nat.mod_lt]]
[UInt64.val,[]]
[PSigma.lex.proof_1,[WellFounded.intro, Acc, PSigma.Lex, PSigma.lexAccessible, WellFounded.apply]]
[Substring.beq,[and, BEq.beq, Substring.bsize, String.substrEq, Substring.str, Substring.startPos]]
[Lean.Macro.Context.ref,[]]
[UInt64.toUInt16,[Nat.toUInt16, UInt64.toNat]]
[Array.swapAt!,[dite, LT.lt, Array.size, Array.swapAt, Fin.mk]]
[Lean.Syntax.unsetTrailing,[Lean.SourceInfo.synthetic, Lean.SourceInfo.none, Lean.Syntax, Lean.Syntax.getTailInfo, Lean.Syntax.setTailInfo, Lean.SourceInfo.original, String.toSubstring]]
[coeBase,[CoeTC.mk, coeB]]
[PUnit.eq_punit,[PUnit.subsingleton, PUnit.unit]]
[instComplementUSize,[Complement.mk, USize.complement]]
[Lean.Syntax.setKind,[Lean.Syntax.missing, Lean.Syntax.atom, Lean.Syntax.ident, Lean.Syntax, Lean.Syntax.node]]
[EStateM.tryCatch,[EStateM.Result.ok, EStateM.Result, EStateM.Backtrackable.restore]]
[Array.foldrM.fold.proof_1,[Nat.lt_of_lt_of_le, Nat.lt_succ_self]]
[id_eq,[rfl]]
[Subarray.mk.sizeOf_spec,[Eq.refl, HAdd.hAdd, OfNat.ofNat, SizeOf.sizeOf]]
[Lean.isNumericSubscript,[and, Decidable.decide, LE.le, OfNat.ofNat, Char.val]]
[String.isInt,[ite, Eq, String.get, OfNat.ofNat, Char.ofNat, Substring.isNat, Substring.drop, String.toSubstring, String.isNat]]
[Or.intro_left,[Or.inl]]
[liftExcept,[Pure.pure, MonadExcept.throw]]
[Lean.Parser.Tactic.Conv.convConvSeq,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.nonReservedSymbol, Bool.false, Lean.ParserDescr.symbol, Lean.Parser.Tactic.Conv.convSeq]]
[CoeTC.coe,[]]
[instOfScientificFloat,[OfScientific.mk, ite, Eq, Bool.true, Float.ofBinaryScientific, HSub.hSub, HMul.hMul, Neg.neg, OfNat.ofNat, Int.ofNat, HPow.hPow]]
[Array.binInsertM,[ite, Eq, Array.isEmpty, Bool.true, Bind.bind, Unit.unit, Pure.pure, Array.push, Array.get!, OfNat.ofNat, Array.insertAt, not, Array.modifyM, Array.back, HSub.hSub, Array.size]]
[String.drop,[Substring.toString, Substring.drop, String.toSubstring]]
[IO.Process.SpawnArgs.noConfusionType,[]]
[Fin.instHModFinNatFin,[HMod.mk, Fin.modn]]
[List.length_cons,[rfl]]
[System.FilePath.extension,[Option.bind, System.FilePath.fileName, Unit.unit, dite, Eq, Eq.symm, Option, String, String.revPosOf, Char.ofNat, Option.none, Option.some, String.extract, HAdd.hAdd, OfNat.ofNat, String.bsize]]
[EStateM.get,[EStateM.Result.ok]]
[FloatSpec.mk.injEq,[Eq.propIntro, And.intro, Eq.refl, FloatSpec.mk, Eq.symm, eq_of_heq, DecidableRel, HEq.refl]]
[List.asString,[String.mk]]
[IO.FS.FileType.noConfusion,[noConfusionEnum, IO.FS.FileType.toCtorIdx]]
[Lean.Syntax.getTailInfo,[Option.getD, Lean.Syntax.getTailInfo?, Lean.SourceInfo.none]]
[Nat.lt_of_lt_of_eq,[]]
[Std.Format.tag.sizeOf_spec,[Eq.refl, HAdd.hAdd, OfNat.ofNat, SizeOf.sizeOf]]
[instOrElseEIO,[OrElse.mk, MonadExcept.orElse]]
[IO.FS.DirEntry.mk.sizeOf_spec,[Eq.refl, HAdd.hAdd, OfNat.ofNat, SizeOf.sizeOf]]
[Lean.Parser.Tactic.tacticLet_,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.nonReservedSymbol, Bool.false, Lean.ParserDescr.const]]
[IO.Error.noFileOrDirectory.inj,[And.intro]]
[List.groupBy,[Unit.unit, List, List.nil, List.groupByAux, List.cons]]
[Std.Range.«term[:_]»,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.symbol, Lean.ParserDescr.cat]]
[List.forM,[Unit.unit, PUnit, Pure.pure, PUnit.unit, Bind.bind, PProd.fst]]
[String.Iterator.s,[]]
[instReprId,[inferInstanceAs, Repr]]
[dbgSleep,[Unit.unit]]
[IO.Error.mkNoSuchThingFile,[Function.comp, IO.Error.noSuchThing, Option.some]]
[Subarray.popFront.proof_1,[Nat.le_of_lt_succ, Nat.add_lt_add_right, OfNat.ofNat]]
[instInhabitedProp,[Inhabited.mk, True]]
[Nat.pred_le_pred,[Nat.zero, Eq.symm, eq_of_heq, Eq.refl, HEq.refl, Nat.succ, LE.le, Nat.pred, Nat.le.refl, Nat.le_trans, Nat.le_succ]]
[PSum.inr.injEq,[Eq.propIntro, Eq.refl, PSum.inr, Eq.symm, eq_of_heq, HEq.refl]]
[max,[ite, LT.lt]]
[true_iff,[propext, Iff.intro, Iff.mp, trivial]]
[Lean.Meta.TransparencyMode.toCtorIdx,[OfNat.ofNat]]
[strictOr,[or]]
[instToStringDecidable,[ToString.mk, String]]
[MonadExcept.instOrElse,[OrElse.mk, MonadExcept.orElse]]
[«term_≥_»,[Lean.ParserDescr.trailingNode, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.symbol, Lean.ParserDescr.cat]]
[String.foldl,[String.foldlAux, String.bsize, OfNat.ofNat]]
[Lean.Meta.Simp.Config.proj,[]]
[instDecidableEqSum.proof_6,[]]
[UInt64.add,[UInt64.mk, HAdd.hAdd, UInt64.val]]
[Prod.mk.inj,[And.intro]]
[IO.Process.StdioConfig.mk.inj,[And.intro]]
[ExceptCpsT.run,[Except, Pure.pure, Except.ok, Except.error]]
[Array.filterSepElems,[Id.run, Array.filterSepElemsM]]
[Lean.Name.toString.maybePseudoSyntax,[Lean.Name.anonymous, Lean.Name.num, Bool, Lean.Name.getRoot, or, String.isPrefixOf, Bool.false]]
[Neg.neg,[]]
[LT.noConfusionType,[]]
[IO.FS.writeFile,[Bind.bind, IO.FS.Handle.mk, IO.FS.Mode.write, Bool.false, IO.FS.Handle.putStr]]
[«term_|>_»,[Lean.ParserDescr.trailingNode, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.symbol, Lean.ParserDescr.cat]]
[Lean.Parser.Syntax.addPrec,[Lean.ParserDescr.trailingNode, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.symbol, Lean.ParserDescr.cat]]
[Pure.noConfusionType,[]]
[instOrdFin,[Ord.mk, Ord.compare, Fin.val]]
[String.instDecidableEqIterator,[Decidable, Eq, dite, Decidable.isTrue, rfl, Decidable.isFalse]]
[«term_\/_»,[Lean.ParserDescr.trailingNode, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.symbol, Lean.ParserDescr.cat]]
[Bool.or_self,[rfl, Eq.symm, Eq.refl]]
[CoeSort.noConfusionType,[]]
[IO.Ref,[ST.Ref, IO.RealWorld]]
[Function.Equiv.isEquivalence,[Equivalence.mk, Function.Equiv.refl, Function.Equiv.symm, Function.Equiv.trans]]
[Ord.compare,[]]
[Fin.ofNat',[Fin.mk, HMod.hMod, Nat.mod_lt]]
[IO.Error.mkAlreadyExists,[IO.Error.alreadyExists, Option.none]]
[Array.foldlM.loop.proof_1,[Nat.lt_of_lt_of_le]]
[Lean.instQuoteString,[Lean.Quote.mk, Lean.Syntax.mkStrLit, Lean.SourceInfo.none]]
[FloatArray.getOp,[FloatArray.get!]]
[ByteArray.foldlM.loop.proof_1,[Nat.lt_of_lt_of_le]]
[String.intercalate,[Unit.unit, String, String.intercalate.go]]
[instLEUInt16,[LE.mk, UInt16.le]]
[EStateM.Result.error.inj,[And.intro]]
[if_neg,[Eq, ite, absurd, rfl]]
[Int.negSucc.inj,[]]
[Array.findIdxM?,[Bind.bind, ForIn.forIn, MProd.mk, Option.none, ite, Eq, Bool.true, Pure.pure, ForInStep.done, Option.some, PUnit.unit, Unit.unit, Option, Nat, MProd.fst]]
[IO.FS.Metadata.type,[]]
[StateRefT'.get,[ST.Ref.get]]
[instAndOpUSize,[AndOp.mk, USize.land]]
[«term_<*>_»,[Lean.ParserDescr.trailingNode, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.symbol, Lean.ParserDescr.cat]]
[fixCore2,[bfix2, USize.size]]
[Fin.sub.proof_1,[LT.lt, HMod.hMod, Nat.mod_lt]]
[Lean.Parser.Tactic.allGoals,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.nonReservedSymbol, Bool.false, Lean.ParserDescr.const]]
[MonadWithReaderOf.noConfusionType,[]]
[Lean.identKind,[Lean.Name.mkStr, Lean.Name.anonymous]]
[Std.Format.instInhabitedSpaceResult,[Inhabited.mk, arbitrary]]
[instMonadControlT_1,[MonadControlT.mk, Pure.pure]]
[Equivalence.refl,[]]
[Int.neg,[Int, Int.negOfNat, Int.ofNat, Nat.succ]]
[Std.Format.pretty,[Prod.snd]]
[Lean.Syntax.expandInterpolatedStrChunks,[Bind.bind, ForIn.forIn, MProd.mk, Unit.unit, Lean.MacroM, ForInStep, MProd, Nat, Lean.Syntax, Lean.Syntax.isInterpolatedStrLit?, Lean.Syntax.mkStrLit, Lean.SourceInfo.none, Pure.pure]]
[IO.Error.inappropriateType.injEq,[Eq.propIntro, And.intro, Eq.refl, IO.Error.inappropriateType, Eq.symm, eq_of_heq, HEq.refl]]
[Std.Range.«term[:_:_]»,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.symbol, Lean.ParserDescr.cat]]
[MonadControlT.stM,[]]
[Function.Equiv.symm,[Eq.symm]]
[Lean.Meta.Simp.ConfigCtx.toConfig,[]]
[Nat.mul_comm,[Eq, HMul.hMul, rfl, Eq.symm, Nat.mul_zero, Nat.zero_mul, PProd.fst, Nat.succ_mul, Nat.mul_succ]]
[EmptyCollection.noConfusionType,[]]
[Array.toSubarray,[dite, LE.le, Array.size, Subarray.mk, Nat.le_refl, Array.toSubarray.proof_1]]
[Or.elim,[]]
[String.foldr,[String.foldrAux, String.bsize, OfNat.ofNat]]
[Nat.add_mul,[Nat.right_distrib]]
[Div.noConfusionType,[]]
[Char.quote,[HAppend.hAppend, Char.quoteCore]]
[Std.Range.mk.sizeOf_spec,[Eq.refl, HAdd.hAdd, OfNat.ofNat, SizeOf.sizeOf]]
[EStateM.fromStateM,[EStateM.Result, StateT.run, EStateM.Result.ok]]
[MonadLiftT.noConfusionType,[]]
[String.atEnd,[Bool, Decidable.decide, GE.ge, String.utf8ByteSize]]
[Nat.allM.loop,[Unit.unit, Bool, Pure.pure, Bool.true, Bind.bind, HSub.hSub, OfNat.ofNat, PProd.fst, Bool.false]]
[Classical.propDecidable,[Classical.choice, Classical.propDecidable.proof_1]]
[Float.val,[]]
[IO.Process.Output.exitCode,[]]
[Nat.decEq,[Decidable, Eq, Nat.beq, Nat.decEq.proof_1, Decidable.isTrue, Nat.eq_of_beq_eq_true, Decidable.isFalse, Nat.ne_of_beq_eq_false]]
[IO.FileRight.flags,[UInt32.lor]]
[unexpandExists,[ite, Eq, Lean.Syntax.isOfKind, Lean.Name.mkStr, Lean.Name.anonymous, Bool.true, Lean.Syntax.matchesNull, OfNat.ofNat, cond, Bind.bind, Lean.MonadRef.mkInfoFromRefPos, Lean.MonadQuotation.getCurrMacroScope, Lean.MonadQuotation.getMainModule, Pure.pure, Lean.Syntax.node, Lean.SourceInfo.none, List.toArray, List.cons, Lean.Syntax.atom, Array.append, List.nil, MonadExcept.throw, Unit.unit]]
[Lean.SourceInfo.noConfusionType,[]]
[EStateM.instReprResult,[Repr.mk, Std.Format, Repr.addAppParen, HAppend.hAppend, Std.Format.text, reprArg]]
[instHDiv,[HDiv.mk, Div.div]]
[Option.map,[Option.bind, Function.comp, Option.some]]
[ltOfOrd,[LT.mk, Eq, BEq.beq, Ord.compare, Ordering.lt, Bool.true]]
[MonadWithReader.withReader,[]]
[Lean.MonadQuotation.getMainModule,[]]
[String.isPrefixOf,[String.substrEq, OfNat.ofNat, String.bsize]]
[instDecidableEqUInt8,[UInt8.decEq]]
[implies.trans,[]]
[instReprAtomUInt8,[ReprAtom.mk]]
[instToBoolOption,[ToBool.mk, Option.toBool]]
[List.head,[absurd, Eq.refl, List.nil]]
[Lean.Parser.Tactic.Conv.convSkip,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.nonReservedSymbol, Bool.false]]
[ShiftRight.noConfusionType,[]]
[Monad.toBind,[]]
[Equivalence.trans,[]]
[ExceptCpsT.run_bind_lift,[rfl]]
[MonadReaderOf.read,[]]
[String.foldlAux,[String.foldlAux.loop]]
[Lean.Parser.Tactic.done,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.nonReservedSymbol, Bool.false]]
[Lean.Macro.instInhabitedMethods,[Inhabited.mk, Lean.Macro.Methods.mk, arbitrary]]
[FloatArray.forIn.loop,[Pure.pure]]
[Lean.MonadRef.mkInfoFromRefPos,[Bind.bind, Lean.MonadRef.getRef, Pure.pure, Lean.SourceInfo.fromRef]]
[HAdd.hAdd,[]]
[Lean.Name.sizeOf,[Unit.unit, Nat, OfNat.ofNat, HAdd.hAdd, PProd.fst, SizeOf.sizeOf]]
[Array.mapIdxM,[Array.size, OfNat.ofNat, rfl, Array.mkEmpty, Array.mapIdxM.map]]
[Hashable.hash,[]]
[instLEUInt64,[LE.mk, UInt64.le]]
[Lean.Parser.Tactic.rotateLeft,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.nonReservedSymbol, Bool.false, Lean.ParserDescr.unary, Lean.ParserDescr.const]]
[Lean.instQuoteBool,[Lean.Quote.mk, Unit.unit, Lean.Syntax, Lean.mkCIdent, Lean.Name.mkStr, Lean.Name.anonymous]]
[Lean.MonadRef.withRef,[]]
[IO.FS.Metadata.byteSize,[]]
[SeqRight.seqRight,[]]
[Lean.NameGenerator.curr,[Lean.Name.mkNum, Lean.NameGenerator.namePrefix, Lean.NameGenerator.idx]]
[ExceptT.seqLeft_eq,[]]
[List.allM,[Unit.unit, Bool, Pure.pure, Bool.true, Bind.bind, PProd.fst, Bool.false]]
[Lean.mkNullNode,[Lean.mkNode, Lean.nullKind]]
[EIO.toBaseIO,[EStateM.Result, Empty, IO.RealWorld, Except, EStateM.Result.ok, Except.ok, Except.error]]
[tacticCalc_,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.nonReservedSymbol, Bool.false, Lean.ParserDescr.unary, calcStep]]
[toBoolUsing,[Decidable.decide]]
[Prod.lexAccessible,[Prod.lexAccessible.proof_1]]
[MonadControl.stM,[]]
[ST.Ref.swap,[liftM, ST.Prim.Ref.swap]]
[StateRefT'.lift,[]]
[instInhabitedTrue,[Inhabited.mk, True.intro]]
[DecidableRel,[Decidable]]
[Lean.Syntax.isToken,[Lean.Syntax.missing, Lean.Syntax.node, Lean.Syntax.ident, Bool, BEq.beq, String.trim, Bool.false]]
[Char.isValidUInt32,[LT.lt, UInt32.size, Nat.lt_trans, of_decide_eq_true, Eq.refl, Bool.true]]
[IO.lazyPure,[Pure.pure, Unit.unit]]
[Lean.Parser.Tactic.simpAll,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.nonReservedSymbol, Bool.false, Lean.ParserDescr.unary, Lean.Parser.Tactic.config, Lean.Parser.Tactic.discharger, Lean.ParserDescr.symbol, Lean.ParserDescr.sepBy, Lean.Parser.Tactic.simpErase, Lean.Parser.Tactic.simpLemma]]
[instSubsingletonSquash,[instSubsingletonSquash.proof_1]]
[List.set,[List, List.cons, PProd.fst, List.nil]]
[Lean.expandBrackedBindersAux.loop,[Unit.unit, Lean.MacroM, Lean.Syntax, Pure.pure, Bind.bind, Lean.expandExplicitBindersAux, Option.some, PProd.fst]]
[EStateM.pure,[EStateM.Result.ok]]
[precMax,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.nonReservedSymbol, Bool.false]]
[Fin.decLe,[Nat.decLe, Fin.val]]
[IO.Process.SpawnArgs.toStdioConfig,[]]
[Std.Format.FlattenBehavior.noConfusionType,[noConfusionTypeEnum, Std.Format.FlattenBehavior.toCtorIdx]]
[instLTFin,[LT.mk, LT.lt, Fin.val]]
[instToFormatProd,[Std.ToFormat.mk, Std.Format, Std.Format.paren, HAppend.hAppend, Std.ToFormat.format, Std.Format.text, Std.Format.line]]
[Nat.gt_of_not_le,[GT.gt, Nat.lt_or_ge, absurd]]
[Lean.Parser.Tactic.inductionAlts,[Lean.ParserDescr.nodeWithAntiquot, Lean.Name.mkStr, Lean.Name.anonymous, Lean.ParserDescr.binary, Lean.ParserDescr.symbol, Lean.ParserDescr.unary, Lean.ParserDescr.cat, OfNat.ofNat, Lean.ParserDescr.const, Lean.Parser.Tactic.inductionAlt]]
[Lean.instHashableName,[Hashable.mk, Lean.Name.hash]]
[WellFounded.apply,[WellFounded.apply.proof_1]]
[StateCpsT,[]]
[IO.Process.Stdio.null.sizeOf_spec,[Eq.refl, OfNat.ofNat]]
[coe,[CoeT.coe]]
[UInt32.shiftRight,[UInt32.mk, HShiftRight.hShiftRight, UInt32.val, UInt32.modn, OfNat.ofNat]]
[UInt32.isValidChar,[Nat.isValidChar, UInt32.toNat]]
[List.reverse_cons,[Eq.mpr, Eq.refl, Eq, List.reverseAux, List.cons, List.nil, HAppend.hAppend, Eq.symm, List.reverseAux_eq_append, rfl]]
[instReprFin,[Repr.mk, repr, Fin.val]]
[ExceptT.finally,[MonadFinally.mk, ExceptT.mk, Bind.bind, MonadFinally.tryFinally', Option.none, Option.some, Except.error, Except, Except.ok, Prod, Pure.pure, Prod.mk]]
[Option.some.injEq,[Eq.propIntro, Eq.refl, Option.some, Eq.symm, eq_of_heq, HEq.refl]]
[instDecidableRelLeLeOfOrd,[inferInstanceAs, DecidableRel, Eq, Ordering.isLE, Ord.compare, Bool.true]]
[Lean.Syntax.decodeScientificLitVal?,[ite, Eq, BEq.beq, OfNat.ofNat, Bool.true, Option.none, Char.isDigit, Lean.Syntax.decodeScientificLitVal?.decodeAfterExp, Lean.Syntax.decodeScientificLitVal?.decodeExp, Lean.Syntax.decodeScientificLitVal?.decodeAfterDot, Lean.Syntax.decodeScientificLitVal?.decode]]
[«termIfLet_:=_Then_Else_»,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.symbol, Lean.ParserDescr.cat]]
[Float.mk.sizeOf_spec,[Eq.refl, HAdd.hAdd, OfNat.ofNat, SizeOf.sizeOf]]
[eq_true,[propext, Iff.intro, trivial]]
[Std.Range.forIn,[Std.Range.stop, Std.Range.start, Std.Range.forIn.loop]]
[HAnd.noConfusionType,[]]
[Nat.lt.base,[Nat.lt.base.proof_1]]
[IO.eprintln,[IO.eprint, String.push, ToString.toString, Char.ofNat]]
[Lean.Name.capitalize,[Lean.Name.anonymous, Lean.Name.num, Lean.Name, Lean.Name.mkStr, String.capitalize]]
[FloatArray.foldlM.proof_1,[Nat.le_refl, FloatArray.size]]
[Lean.Name.reprPrec,[Unit.unit, Std.Format, Std.Format.text, Repr.addAppParen, HAppend.hAppend, PProd.fst, OfNat.ofNat, repr, ite, Eq, Bool, Bool.false, Bool.true, Lean.Name.toString]]
[Lean.Macro.instInhabitedMethodsRef,[Inhabited.mk, Lean.Macro.mkMethods, arbitrary]]
[PSigma.revLexAccessible.proof_1,[Acc.intro, PSigma.mk, Eq.symm, eq_of_heq, Eq.refl, HEq.refl]]
[Lean.Parser.Tactic.rwWithRfl,[Bind.bind, Lean.MonadRef.mkInfoFromRefPos, Lean.MonadQuotation.getCurrMacroScope, Lean.MonadQuotation.getMainModule, Pure.pure, Lean.Syntax.node, Lean.SourceInfo.none, Lean.Name.mkStr, Lean.Name.anonymous, List.toArray, List.cons, Lean.Syntax.atom, Option.getD, Lean.Syntax.getHeadInfo?, List.nil]]
[instDecidableArrow.proof_3,[absurd]]
[UInt32.div,[UInt32.mk, HDiv.hDiv, UInt32.val]]
[Nat.instTransLtArrowNatArrowNatPropLtArrowNatArrowNatPropLtArrowNatArrowNatProp.proof_1,[Nat.lt_trans]]
[String.extract,[String, ite, GE.ge, String.mk, List.nil, List.cons, List, Char, Eq, PProd.fst, HAdd.hAdd, String.csize, OfNat.ofNat]]
[Lean.Syntax.mkNameLit,[Lean.Syntax.mkLit, Lean.nameLitKind]]
[dite_false,[rfl]]
[bfix5,[PProd.fst]]
[Lean.Name.appendBefore,[Lean.Name.modifyBase, Unit.unit, Lean.Name, Lean.Name.mkStr, Lean.Name.anonymous, HAppend.hAppend, Lean.Name.mkNum]]
[emptyWf,[WellFoundedRelation.mk, emptyRelation, emptyWf.proof_1]]
[String.dropRightWhile,[Substring.toString, Substring.dropRightWhile, String.toSubstring]]
[instStreamRangeNat,[Stream.mk, ite, LT.lt, Std.Range.start, Std.Range.stop, Option.some, Prod.mk, Std.Range.mk, HAdd.hAdd, Std.Range.step, Option.none]]
[PointedType.val,[]]
[unexpandIte,[ite, Eq, Lean.Syntax.isOfKind, Lean.Name.mkStr, Lean.Name.anonymous, Bool.true, Lean.Syntax.matchesNull, OfNat.ofNat, Bind.bind, Lean.MonadRef.mkInfoFromRefPos, Lean.MonadQuotation.getCurrMacroScope, Lean.MonadQuotation.getMainModule, Pure.pure, Lean.Syntax.node, Lean.SourceInfo.none, List.toArray, List.cons, Lean.Syntax.atom, List.nil, MonadExcept.throw, Unit.unit]]
[Char.toNat,[UInt32.toNat, Char.val]]
[instLTUInt64,[LT.mk, UInt64.lt]]
[instReprSubstring,[Repr.mk, Std.Format.text, HAppend.hAppend, String.quote, Substring.toString]]
[bfix6,[PProd.fst]]
[instOrOpUInt32,[OrOp.mk, UInt32.lor]]
[USize.modn_lt,[LT.lt, USize.toNat, HMod.hMod, Fin.modn_lt]]
[Nat.mul_pos,[]]
[instCoeTail_1,[CoeTail.mk, coeSort]]
[Array.get!,[Array.getD, arbitrary]]
[Array.isPrefixOf,[dite, LE.le, Array.size, Array.isPrefixOfAux, OfNat.ofNat, Bool.false]]
[List.eraseDups,[List.eraseDupsAux, List.nil]]
[CoeT.noConfusionType,[]]
[Nat.not_lt_zero,[Nat.not_succ_le_zero]]
[Array.mapIdxM.map,[Array, Pure.pure]]
[Float.ofNat,[OfScientific.ofScientific, Bool.false, OfNat.ofNat]]
[Lean.Parser.Tactic.constructor,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.nonReservedSymbol, Bool.false]]
[ShiftRight.shiftRight,[]]
[Lean.Parser.Tactic.tacticTrivial,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.nonReservedSymbol, Bool.false]]
[Subarray.foldl,[Id.run, Subarray.foldlM]]
[List.hasDecidableLt.proof_3,[Eq.symm, eq_of_heq, Eq.refl, List.cons, HEq.refl, False, absurd]]
[System.instToStringFilePath,[ToString.mk, System.FilePath.toString]]
[Char.val_eq_of_eq,[Eq.symm, eq_of_heq, Eq.refl, HEq.refl, Eq, Char.val, rfl]]
[IO.Error.mkInappropriateType,[IO.Error.inappropriateType, Option.none]]
[Array.findM?,[Bind.bind, ForIn.forIn, MProd.mk, Option.none, PUnit.unit, ite, Eq, Bool.true, Pure.pure, ForInStep.done, Option.some, ForInStep.yield, Unit.unit, Option, MProd.fst]]
[IO.Error.unexpectedEof.sizeOf_spec,[Eq.refl, OfNat.ofNat]]
[PUnit.subsingleton,[rfl, Eq.symm, Eq.refl]]
[UInt16.mul,[UInt16.mk, HMul.hMul, UInt16.val]]
[Lean.choiceKind,[Lean.Name.mkStr, Lean.Name.anonymous]]
[UInt16.ofNat,[UInt16.mk, Fin.ofNat]]
[FloatArray.get!,[Float, Array.get!]]
[Nat.le_of_succ_le_succ,[Nat.pred_le_pred]]
[Inhabited.default,[]]
[IO.FS.Stream.Buffer.pos,[]]
[System.FilePath.join,[ite, Eq, System.FilePath.isAbsolute, Bool.true, System.FilePath.mk, HAppend.hAppend, System.FilePath.toString, Char.toString, System.FilePath.pathSeparator]]
[«term_<||>_»,[Lean.ParserDescr.trailingNode, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.symbol, Lean.ParserDescr.cat]]
[System.FilePath.pathSeparator,[ite, Eq, System.Platform.isWindows, Bool.true, Char.ofNat]]
[Lean.Parser.Tactic.letrec,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.unary, Lean.ParserDescr.binary, Lean.ParserDescr.symbol, Lean.ParserDescr.nonReservedSymbol, Bool.false, Lean.ParserDescr.const]]
[Lean.addMacroScope,[Unit.unit, Lean.Name, Lean.Name.hasMacroScopes, BEq.beq, Lean.MacroScopesView.mainModule, Lean.Name.mkNum, Lean.MacroScopesView.review, Lean.MacroScopesView.mk, Lean.MacroScopesView.name, List.foldl, HAppend.hAppend, Lean.MacroScopesView.imported, Lean.MacroScopesView.scopes, List.cons, List.nil, Lean.Name.mkStr]]
[Std.Format.MonadPrettyFormat.startTag,[]]
[String.offsetOfPos,[String.offsetOfPosAux, OfNat.ofNat]]
[Lean.NameGenerator.mk.inj,[And.intro]]
[instSubUInt8,[Sub.mk, UInt8.sub]]
[Char.ofNat,[dite, Nat.isValidChar, Char.mk, UInt32.mk, Fin.mk, LT.lt, UInt32.size, Nat.lt_trans, of_decide_eq_true, Eq.refl, Bool.true, OfNat.ofNat, Char.ofNat.proof_1, Char.ofNat.proof_2]]
[stdRange,[Prod.mk, OfNat.ofNat]]
[ST.Ref.get,[liftM, ST.Prim.Ref.get]]
[List.forIn.loop,[Pure.pure, Bind.bind, PProd.fst]]
[IO.Error.inappropriateType.inj,[And.intro]]
[Nat.shiftLeft,[Nat, PProd.fst, HMul.hMul, OfNat.ofNat]]
[withPtrAddrUnsafe,[ptrAddrUnsafe]]
[decide_eq_true,[Eq, Decidable.decide, Bool.true, rfl, absurd]]
[Thunk.noConfusionType,[]]
[List.toByteArray,[ByteArray.empty, List.toByteArray.loop]]
[instReprAtomFloat,[ReprAtom.mk]]
[List.lengthTR,[List.lengthTRAux, OfNat.ofNat]]
[Array.map,[Id.run, Array.mapM]]
[Nat.mod_eq,[congrFun, WellFounded.fix_eq, WellFoundedRelation.wf, measure, id, dite, And, LT.lt, OfNat.ofNat, LE.le, HSub.hSub, Nat.sub_lt, Nat.lt_of_lt_of_le, dif_eq_if, HMod.hMod]]
[instSubsingletonForall,[instSubsingletonForall.proof_1]]
[List.lengthTRAux,[Nat, PProd.fst, Nat.succ]]
[Quotient.liftOn₂,[Quotient.lift₂]]
[List.or,[List.any, id]]
[AndThen.andThen,[]]
[Array.forIn.loop,[Pure.pure]]
[ExceptT.bind_throw,[of_eq_true, Eq.trans, congrFun, congrArg, Eq, LawfulMonad.pure_bind, Except.error, Except, Pure.pure, eq_self]]
[Nat.succ_sub_succ,[Nat.succ_sub_succ_eq_sub]]
[Char.toLower,[ite, And, GE.ge, OfNat.ofNat, LE.le, Char.ofNat, HAdd.hAdd]]
[Prod.lexAccessible.proof_1,[Acc.intro, Prod.mk, Eq.symm, eq_of_heq, Eq.refl, HEq.refl]]
[Nat.le_of_lt,[Nat.le_of_succ_le]]
[Lean.MonadQuotation.addMacroScope,[Bind.bind, Lean.MonadQuotation.getMainModule, Lean.MonadQuotation.getCurrMacroScope, Pure.pure, Lean.addMacroScope]]
[DoResultPRBC.continue.sizeOf_spec,[Eq.refl, HAdd.hAdd, OfNat.ofNat, SizeOf.sizeOf]]
[Option.getD,[]]
[IO.FileRight.mk.sizeOf_spec,[Eq.refl, HAdd.hAdd, OfNat.ofNat, SizeOf.sizeOf]]
[LT.lt,[]]
[System.FilePath.exeExtension,[ite, Eq, System.Platform.isWindows, Bool.true]]
[List.length_replicate.aux,[of_eq_true, Eq.trans, congrArg, Eq, List.length, congrFun, HAdd.hAdd, Nat.zero_eq, Nat.zero_add, eq_self, congr, List.cons, List.length_cons, Nat.add_succ, Nat.succ_add, Nat.succ]]
[Prod.lex,[WellFoundedRelation.mk, Prod.Lex, WellFoundedRelation.rel, Prod.lex.proof_1]]
[Lean.Parser.Tactic.Conv.convIntro___,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.nonReservedSymbol, Bool.false, Lean.ParserDescr.unary, Lean.ParserDescr.const]]
[Bool.and_true,[rfl, Eq.symm, Eq.refl]]
[Nat.fold,[Nat.foldAux]]
[List.nil.sizeOf_spec,[Eq.refl, OfNat.ofNat]]
[Lean.Syntax.toNat,[Unit.unit, Nat, Lean.Syntax.isNatLit?, OfNat.ofNat]]
[Nat.sub_succ,[rfl]]
[Array.indexOf?,[Array.indexOfAux, OfNat.ofNat]]
[instStreamSubarray,[Stream.mk, dite, LT.lt, Subarray.start, Subarray.stop, Option.none]]
[MonadState.modifyGet,[]]
[List.length_nil,[rfl]]
[IO.Error.invalidArgument.inj,[And.intro]]
[instReprSourceInfo,[Repr.mk, Unit.unit, Std.Format, Repr.addAppParen, Std.Format.group, Std.Format.nest, ite, GE.ge, OfNat.ofNat, HAppend.hAppend, Std.Format.text, Std.Format.line, reprArg, Std.Format.FlattenBehavior.allOrNone]]
[Lean.Parser.Tactic.assumption,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.nonReservedSymbol, Bool.false]]
[String.toFormat,[Std.Format.joinSep, String.splitOn, Std.Format.line]]
[OptionT.instMonadExceptOfUnitOptionT,[MonadExceptOf.mk, OptionT.fail, OptionT.tryCatch]]
[Subarray.instForInSubarray,[ForIn.mk, Subarray.forIn]]
[coeOfTCOfTail,[CoeHTCT.mk, coeTail, coeTC]]
[Nat.lt_succ_self,[Nat.lt.base]]
[Array.instEmptyCollectionArray,[EmptyCollection.mk, Array.empty]]
[instMonadWithReader,[MonadWithReader.mk, withTheReader]]
[Fin.instShiftRightFin,[ShiftRight.mk, Fin.shiftRight]]
[Squash.lift.proof_1,[Subsingleton.elim]]
[ExceptCpsT,[]]
[instOrdChar,[Ord.mk, compareOfLessAndEq]]
[Nat.lt_wfRel.proof_1,[WellFounded.intro, Acc.intro, OfNat.ofNat, absurd, Nat.not_lt_zero, Nat.succ]]
[ToStream.toStream,[]]
[instMonadWithReaderOfReaderT,[MonadWithReaderOf.mk]]
[Lean.Macro.Methods.resolveNamespace?,[]]
[StateCpsT.run',[StateCpsT.runK, Pure.pure]]
[List.foldrM,[Pure.pure, Bind.bind, PProd.fst]]
[Fin.instAndOpFin,[AndOp.mk, Fin.land]]
[UInt16.xor,[UInt16.mk, Fin.xor, UInt16.val]]
[IO.FS.FileType.noConfusionType,[noConfusionTypeEnum, IO.FS.FileType.toCtorIdx]]
[FloatArray.instInhabitedFloatArray,[Inhabited.mk, FloatArray.empty]]
[Lean.isLetterLike,[or, and, Decidable.decide, LE.le, OfNat.ofNat, Char.val, Ne]]
[EIO.toIO,[EStateM.adaptExcept]]
[instCoeStringError,[Coe.mk, IO.userError]]
[implies_congr_ctx,[propext, Iff.intro]]
[decPropToBool,[CoeDep.mk, Decidable.decide]]
[Lean.mkFreshId,[Bind.bind, Lean.MonadNameGenerator.getNGen, Lean.MonadNameGenerator.setNGen, Lean.NameGenerator.next, Pure.pure]]
[ExceptT.run_bind_lift,[of_eq_true, Eq.trans, congrFun, congrArg, Eq, Bind.bind, map_eq_pure_bind, Except.ok, Except, Pure.pure, Except.error, LawfulMonad.bind_assoc, funext, LawfulMonad.pure_bind, eq_self]]
[Subtype.eta,[rfl, Eq.symm, Eq.refl]]
[DoResultPR.noConfusionType,[]]
[Array.filterM,[Array.foldlM, Bind.bind, ite, Eq, Bool.true, Pure.pure, Array.push, List.toArray, List.nil]]
[Lean.Module.header,[]]
[HShiftRight.noConfusionType,[]]
[termDepIfThenElse,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.unary, Lean.ParserDescr.binary, Lean.ParserDescr.symbol, Lean.ParserDescr.const, Lean.ParserDescr.cat]]
[Array.size_set,[List.length_set, Array.data, Fin.val]]
[String.foldrAux,[String.foldrAux.loop]]
[Lean.Syntax.isAtom,[Lean.Syntax.missing, Lean.Syntax.node, Lean.Syntax.ident, Bool, Bool.true, Bool.false]]
[termIfThenElse,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.unary, Lean.ParserDescr.binary, Lean.ParserDescr.symbol, Lean.ParserDescr.cat, Lean.ParserDescr.const]]
[Nat.le_of_succ_le,[Nat.le_trans, Nat.le_succ]]
[String.Iterator.remainingBytes,[Nat, HSub.hSub, String.bsize]]
[Subtype.instDecidableEqSubtype.proof_2,[absurd]]
[Nat.le_total,[Or, LE.le, Nat.lt_or_ge, Or.inl, Nat.le_of_lt, Or.inr]]
[«term_<|>_»,[Lean.ParserDescr.trailingNode, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.symbol, Lean.ParserDescr.cat]]
[Substring.dropRightWhile,[Substring, Substring.mk]]
[dite,[]]
[Lean.Module.mk.sizeOf_spec,[Eq.refl, HAdd.hAdd, OfNat.ofNat, SizeOf.sizeOf]]
[Lean.unbracketedExplicitBinders,[Lean.ParserDescr.nodeWithAntiquot, Lean.Name.mkStr, Lean.Name.anonymous, Lean.ParserDescr.binary, Lean.ParserDescr.unary, Lean.binderIdent, Lean.ParserDescr.symbol, Lean.ParserDescr.cat, OfNat.ofNat]]
[Nat.zero_le,[Unit.unit, LE.le, OfNat.ofNat, Nat.le.refl, Nat.le.step, PProd.fst]]
[instDecidableEqSum.proof_5,[]]
[ReaderT.instMonadLiftReaderT,[MonadLift.mk]]
[IO.Process.Stdio.inherit.sizeOf_spec,[Eq.refl, OfNat.ofNat]]
[Nat.add_le_add_right,[Eq.mpr, Eq.refl, LE.le, HAdd.hAdd, Nat.add_comm, Nat.add_le_add_left]]
[Prod.snd,[]]
[ExceptCpsT.runCatch_lift,[of_eq_true, Eq.trans, congrFun, congrArg, Eq, bind_pure, eq_self]]
[instDecidableEqProd.proof_3,[absurd]]
[List.reverse_append,[of_eq_true, Eq.trans, congr, congrArg, Eq, List.reverse, List.nil_append, HAppend.hAppend, List.reverse_nil, List.append_nil, eq_self, Eq.mpr, List.cons_append, List.reverse_cons, congrFun, List.cons, List.nil, Eq.refl, List.append_assoc, rfl]]
[WellFounded.fix_eq,[WellFounded.fixFEq, WellFounded.apply]]
[iff_iff_implies_and_implies,[Iff.intro, And.intro, Iff.mp, Iff.mpr, And.left, And.right]]
[System.FilePath.isRelative,[not, System.FilePath.isAbsolute]]
[IO.rand,[Bind.bind, ST.Ref.get, IO.stdGenRef, IO, Nat, ST.Ref.set, Pure.pure]]
[ExceptCpsT.runCatch_throw,[rfl]]
[Ordering.toCtorIdx,[OfNat.ofNat]]
[IO.FS.Stream.Buffer.data,[]]
[Lean.Name.instAppendName,[Append.mk, Lean.Name.append]]
[Lean.withHeadRefOnly,[Bind.bind, Lean.MonadRef.getRef, Unit.unit, Lean.Syntax.getHead?, Lean.withRef]]
[flip,[]]
[UInt32.ofNatCore,[UInt32.mk, Fin.mk]]
[Lean.NameGenerator.namePrefix,[]]
[instAddUInt16,[Add.mk, UInt16.add]]
[coeD,[CoeDep.coe]]
[Except.error.sizeOf_spec,[Eq.refl, HAdd.hAdd, OfNat.ofNat, SizeOf.sizeOf]]
[MonadExcept.throw,[]]
[Array.ofSubarray,[Bind.bind, ForIn.forIn, Pure.pure, PUnit.unit, ForInStep.yield]]
[CoeFun.coe,[]]
[FloatArray.data,[]]
[List.ibelow,[True, And]]
[Lean.Parser.Tactic.withReducible,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.nonReservedSymbol, Bool.false, Lean.ParserDescr.const]]
[instMonadReaderOf,[MonadReaderOf.mk, liftM, MonadReader.read]]
[String.any,[String.anyAux, String.bsize, OfNat.ofNat]]
[decide_false_eq_false,[Eq, Decidable.decide, False, Bool.false, rfl, False.elim]]
[precMin,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.nonReservedSymbol, Bool.false]]
[Lean.Macro.Context.currMacroScope,[]]
[Nat.ctor_eq_zero,[rfl]]
[Nat.lt_eq,[rfl]]
[Nat.le_add_left,[Nat.le_add_right, Nat.add_comm]]
[IO.Process.Child.stdin,[]]
[Std.Format.FlattenBehavior.toCtorIdx,[OfNat.ofNat]]
[Std.Format.group.inj,[And.intro]]
[UInt16.add,[UInt16.mk, HAdd.hAdd, UInt16.val]]
[Nat.foldM.loop,[Pure.pure, Bind.bind, HSub.hSub, OfNat.ofNat, PProd.fst]]
[Stream.noConfusionType,[]]
[instHashableProd,[Hashable.mk, UInt64, mixHash, Hashable.hash]]
[ne_false_of_eq_true,[Not, Eq, Bool.false]]
[List.getLast.proof_1,[rfl]]
[instToStringBool,[ToString.mk, cond]]
[IO.Error.mkEofError,[IO.Error.unexpectedEof]]
[EStateM.bind,[EStateM.Result, EStateM.Result.error]]
[String.Iterator.setCurr,[String.Iterator, String.Iterator.mk, String.set]]
[FloatArray.set,[FloatArray, FloatArray.mk, Array.set]]
[Lean.Syntax.decodeScientificLitVal?.decodeExp,[ite, Eq, BEq.beq, Char.ofNat, Bool.true, Lean.Syntax.decodeScientificLitVal?.decodeAfterExp, String.next, OfNat.ofNat, Bool.false]]
[dif_neg,[Eq, dite, absurd, rfl]]
[Lean.Parser.Tactic.Conv.paren,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.nonReservedSymbol, Bool.false, Lean.Parser.Tactic.Conv.convSeq, Lean.ParserDescr.symbol]]
[Iff.mpr,[]]
[instOrElse,[OrElse.mk, Alternative.orElse]]
[USize.ofNat32.proof_1,[Unit.unit, Eq.symm, eq_of_heq, Eq.refl, OfNat.ofNat, HEq.refl, LT.lt, USize.size, usize_size_eq, Nat.lt_trans, of_decide_eq_true, Bool.true]]
[StateCpsT.instMonadStateCpsT,[Monad.mk]]
[Option.isNone,[Unit.unit, Bool, Bool.false, Bool.true]]
[Nat.succ_eq_add_one,[rfl]]
[instHashableUInt64,[Hashable.mk]]
[Char.valid,[]]
[funext,[]]
[Fin.lor.proof_1,[LT.lt, HMod.hMod, Nat.mod_lt]]
[Fin.mk.injEq,[Eq.propIntro, Eq.refl, Fin.mk, Eq.symm, eq_of_heq, HEq.refl]]
[List.length,[Unit.unit, Nat, OfNat.ofNat, HAdd.hAdd, PProd.fst]]
[USize.mod,[USize.mk, HMod.hMod, USize.val]]
[Lean.Macro.Methods.resolveGlobalName,[]]
[UInt32.noConfusionType,[]]
[IO.Error.userError.sizeOf_spec,[Eq.refl, HAdd.hAdd, OfNat.ofNat, SizeOf.sizeOf]]
[instHashableUInt32,[Hashable.mk, UInt32.toUInt64]]
[Subtype.existsOfSubtype.proof_1,[Exists, Exists.intro]]
[fixCore6,[bfix6, USize.size]]
[UInt32.decEq.proof_2,[absurd]]
[Int.natMod,[Int.toNat, HMod.hMod]]
[PUnit.unit.sizeOf_spec,[Eq.refl, OfNat.ofNat]]
[StateCpsT.runK_bind_pure,[rfl]]
[reprArg,[Repr.reprPrec, OfNat.ofNat]]
[Lean.Parser.Tactic.delta,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.nonReservedSymbol, Bool.false, Lean.ParserDescr.const, Lean.ParserDescr.unary, Lean.Parser.Tactic.location]]
[HOrElse.noConfusionType,[]]
[instHModUInt8NatUInt8,[HMod.mk, UInt8.modn]]
[id.def,[rfl]]
[EStateM.instMonadFinallyEStateM,[MonadFinally.mk, EStateM.Result, Prod, Option.some, EStateM.Result.ok, Prod.mk, EStateM.Result.error, Option.none]]
[ByteArray.noConfusionType,[]]
[IO.Error.resourceBusy.sizeOf_spec,[Eq.refl, HAdd.hAdd, OfNat.ofNat, SizeOf.sizeOf]]
[Array.mkEmpty,[Array.mk, List.nil]]
[List.hasDecEq.proof_4,[rfl]]
[String.endsWith,[BEq.beq, Substring.takeRight, String.toSubstring, String.length]]
[Nat.not_le_of_not_ble_eq_true,[absurd, Nat.ble_eq_true_of_le]]
[Fin.instXorFin,[Xor.mk, Fin.xor]]
[Nat.shiftRight,[Nat, HDiv.hDiv, PProd.fst, OfNat.ofNat]]
[instBEqOption,[BEq.mk, Unit.unit, Option.none, Option.some, Bool, Bool.true, and, BEq.beq, Bool.false]]
[List.find?,[Unit.unit, Option, Option.none, Option.some, PProd.fst]]
[tacticFunext__,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.nonReservedSymbol, Bool.false, Lean.ParserDescr.unary, Lean.ParserDescr.const, Lean.ParserDescr.cat]]
[instTransEq_1,[Trans.mk, instTransEq_1.proof_1]]
[EStateM.instMonadExceptOfEStateM,[MonadExceptOf.mk, EStateM.throw, EStateM.tryCatch]]
[optionCoe,[CoeTail.mk, Option.some]]
[String.anyAux,[String.anyAux.loop]]
[List.tail!,[Unit.unit, List, panicWithPosWithDecl, OfNat.ofNat]]
[EStateM.orElse',[EStateM.Result.ok, EStateM.Result, EStateM.Backtrackable.restore, EStateM.Result.error, ite, Eq, Bool.true]]
[«term_>=_»,[Lean.ParserDescr.trailingNode, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.symbol, Lean.ParserDescr.cat]]
[Lean.Parser.Tactic.generalize,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.nonReservedSymbol, Bool.false, Lean.ParserDescr.sepBy1, Lean.Parser.Tactic.generalizeArg, Lean.ParserDescr.symbol]]
[EIO.asTask,[BaseIO.asTask, EIO.toBaseIO]]
[UInt32.mk.sizeOf_spec,[Eq.refl, HAdd.hAdd, OfNat.ofNat, SizeOf.sizeOf]]
[LawfulFunctor.map_const,[]]
[instHShiftLeft,[HShiftLeft.mk, ShiftLeft.shiftLeft]]
[Lean.Parser.Tactic.Conv.«convEnter[__]»,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.nonReservedSymbol, Bool.false, Lean.ParserDescr.symbol, Lean.ParserDescr.sepBy1, Lean.ParserDescr.const, Lean.Parser.Tactic.Conv.enterArg]]
[StateT.failure,[Alternative.failure]]
[Array.pop,[Array.mk, List.dropLast, Array.data]]
[Option.toMonad,[Unit.unit, Alternative.failure, Pure.pure]]
[Int.ofNat.sizeOf_spec,[Eq.refl, HAdd.hAdd, OfNat.ofNat, SizeOf.sizeOf]]
[heq_of_eqRec_eq,[heq_of_eq]]
[ptrAddrUnsafe,[OfNat.ofNat]]
[Nat.zero_mod,[Eq.mpr, Eq.refl, Eq, HMod.hMod, OfNat.ofNat, Nat.mod_eq]]
[List.reverseAux,[List, PProd.fst, List.cons]]
[ReaderT.bind,[Bind.bind]]
[List.get,[absurd, Nat.not_lt_zero]]
[instHOr,[HOr.mk, OrOp.or]]
[List.getLast?.proof_1,[]]
[Array.anyM.loop,[dite, LT.lt, Unit.unit, Bool, Pure.pure, Bool.false, Bind.bind, Array.get, Fin.mk, Array.anyM.loop.proof_1, ite, Eq, Bool.true, PProd.fst, HAdd.hAdd, OfNat.ofNat]]
[Decidable.of_not_not,[Decidable.byContradiction, absurd]]
[UInt64.toUInt32,[Nat.toUInt32, UInt64.toNat]]
[prodHasDecidableLt,[inferInstanceAs, Decidable, Or, LT.lt, Prod.fst, And, Eq, Prod.snd]]
[Fin.div,[Fin, Fin.mk, HMod.hMod, HDiv.hDiv, Fin.div.proof_1]]
[StateCpsT.run_eq,[rfl]]
[instSubsingleton,[instSubsingleton.proof_1]]
[List.groupByAux,[List.nil, List.cons, List, Unit.unit, PProd.fst, List.reverse]]
[HOrElse.hOrElse,[]]
[«term%[_|_]»,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.symbol, Lean.ParserDescr.sepBy, Lean.ParserDescr.cat, Bool.false]]
[IO.FS.Handle.mk,[IO.FS.Handle.mkPrim, HAppend.hAppend]]
[List.isPrefixOf,[List.nil, List.cons, Bool, Bool.true, Bool.false, and, BEq.beq, PProd.fst]]
[instDecidableIff.proof_1,[Iff.intro]]
[ReaderT.run_pure,[rfl]]
[IO.Error.alreadyExists.sizeOf_spec,[Eq.refl, HAdd.hAdd, OfNat.ofNat, SizeOf.sizeOf]]
[Std.instInhabitedFormat,[Inhabited.mk, Std.Format.nil]]
[Nat.mod.inductionOn,[Nat.div.inductionOn]]
[IO.FileRight.other,[]]
[List.replicate.loop,[List, PProd.fst, List.cons]]
[MonadStateOf.noConfusionType,[]]
[UInt64.decEq,[Decidable, Eq, dite, Decidable.isTrue, UInt64.decEq.proof_1, Decidable.isFalse, UInt64.decEq.proof_2]]
[instReprFloat,[Repr.mk, Std.Format.text, Float.toString]]
[Lean.Syntax.isScientificLit?,[Option.none, Option, Prod, Nat, Bool, Lean.Syntax.isLit?, Lean.scientificLitKind, Lean.Syntax.decodeScientificLitVal?]]
[Lean.Name.toStringWithSep,[Unit.unit, Lean.Name.str, Lean.Name.num, String, Lean.Name.toStringWithSep.maybeEscape, ToString.toString, HAppend.hAppend, PProd.fst, Nat.repr]]
[String.decLt,[List.hasDecidableLt, String.data]]
[Prod.lt_def,[rfl]]
[Nat.instShiftLeftNat,[ShiftLeft.mk, Nat.shiftLeft]]
[String.mkIterator,[String.Iterator.mk, OfNat.ofNat]]
[Nat.gcd_one_left,[Eq.mpr, Eq.refl, Eq, Nat.gcd, OfNat.ofNat, Nat.gcd_succ, HMod.hMod, Nat.succ, Nat.mod_one, rfl]]
[LawfulMonad.noConfusionType,[]]
[ToBool.noConfusionType,[]]
[instHAdd,[HAdd.mk, Add.add]]
[StateCpsT.lift,[Bind.bind]]
[Nat.xor,[Nat.bitwise, bne]]
[StateT.run_bind,[of_eq_true, eq_self, Bind.bind]]
[instDecidableOr.proof_1,[False]]
[Trans.trans,[]]
[Quotient.recOn,[Quot.recOn]]
[Ordering.noConfusionType,[noConfusionTypeEnum, Ordering.toCtorIdx]]
[Task.get,[]]
[Lean.Name.mkStr,[Lean.Name.str, mixHash, Hashable.hash]]
[False.elim,[]]
[instMonadEST,[inferInstanceAs, Monad, EStateM]]
[Nat.ble_succ_eq_true,[Eq.refl, Bool.true, HEq.refl, Eq, Nat.ble, Nat.succ, rfl, PProd.fst]]
[instDecidableRelLtLtOfOrd,[inferInstanceAs, DecidableRel, Eq, BEq.beq, Ord.compare, Ordering.lt, Bool.true]]
[«term{}»,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.symbol]]
[List.hasDecidableLt,[Unit.unit, Decidable, LT.lt, Decidable.isFalse, List.hasDecidableLt.proof_1, Decidable.isTrue, List.lt.nil, List.hasDecidableLt.proof_2, List.cons, List.lt.head, List.hasDecidableLt.proof_3, PProd.fst, List.lt.tail, List.hasDecidableLt.proof_4]]
[Lean.isIdBeginEscape,[Decidable.decide, Eq, Lean.idBeginEscape]]
[Alternative.failure,[]]
[Lean.Syntax.isIdent,[Lean.Syntax.missing, Lean.Syntax.node, Lean.Syntax.atom, Bool, Bool.true, Bool.false]]
[withPtrEqDecEq.proof_1,[toBoolUsing_eq_true, Unit.unit]]
[IO.Error.userError.injEq,[Eq.propIntro, Eq.refl, IO.Error.userError, Eq.symm, eq_of_heq, HEq.refl]]
[ReaderT.run_monadLift,[rfl]]
[Decidable.em,[Decidable.byCases, Or.inl, Or.inr]]
[Std.Format.tag.injEq,[Eq.propIntro, And.intro, Eq.refl, Std.Format.tag, Eq.symm, eq_of_heq, HEq.refl]]
[dbgTrace,[Unit.unit]]
[instDecidableEqBool.proof_2,[]]
[Lean.binderIdent,[Lean.ParserDescr.nodeWithAntiquot, Lean.Name.mkStr, Lean.Name.anonymous, Lean.ParserDescr.binary, Lean.ParserDescr.const, Lean.ParserDescr.symbol]]
[«term_>_»,[Lean.ParserDescr.trailingNode, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.symbol, Lean.ParserDescr.cat]]
[instToStringUInt64,[ToString.mk, ToString.toString, UInt64.toNat]]
[Lean.Parser.Tactic.Conv.nestedTactic,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.nonReservedSymbol, Bool.false, Lean.ParserDescr.symbol, Lean.ParserDescr.const]]
[bne,[not, BEq.beq]]
[List.isEqv,[List.nil, List.cons, Bool, Bool.true, and, PProd.fst, Bool.false]]
[Except.ok.injEq,[Eq.propIntro, Eq.refl, Except.ok, Eq.symm, eq_of_heq, HEq.refl]]
[WellFoundedRelation.mk.inj,[]]
[UInt64.complement,[HSub.hSub, OfNat.ofNat, HAdd.hAdd]]
[Array.back?,[Array.get?, HSub.hSub, Array.size, OfNat.ofNat]]
[instInhabitedArrow_1,[Inhabited.mk, Pure.pure]]
[Option.bind,[Option, Option.none]]
[instDecidableEqNat,[Nat.decEq]]
[Lean.Meta.Simp.Config.mk.sizeOf_spec,[Eq.refl, HAdd.hAdd, OfNat.ofNat, SizeOf.sizeOf]]
[Array.filterMapM,[Array.foldlM, Bind.bind, Unit.unit, Array, Pure.pure, Array.push, List.toArray, List.nil]]
[sizeOfWFRel,[measure, SizeOf.sizeOf]]
[of_eq_true,[trivial, Eq.symm]]
[Nat.mul_one,[Nat.zero_add]]
[UInt16.decLt,[Decidable, LT.lt, inferInstanceAs]]
[instStreamSubstringChar,[Stream.mk, ite, LT.lt, Substring.startPos, Substring.stopPos, Option.some, Prod.mk, String.get, Substring.str, Substring.mk, String.next, Option.none]]
[Hashable.noConfusionType,[]]
[Function.Equiv.refl,[rfl]]
[unsafeCast.proof_1,[lcProof]]
[DoResultBC.break.sizeOf_spec,[Eq.refl, HAdd.hAdd, OfNat.ofNat, SizeOf.sizeOf]]
[Mod.noConfusionType,[]]
[Subarray.h₁,[]]
[CoeHTCT.noConfusionType,[]]
[USize.shiftRight,[USize.mk, HShiftRight.hShiftRight, USize.val, USize.modn, System.Platform.numBits]]
[«term_/_»,[Lean.ParserDescr.trailingNode, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.symbol, Lean.ParserDescr.cat]]
[«term_⊕'_»,[Lean.ParserDescr.trailingNode, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.symbol, Lean.ParserDescr.cat]]
[Substring.splitOn,[ite, Eq, BEq.beq, Bool.true, List.cons, List.nil, OfNat.ofNat, Substring.splitOn.loop]]
[Lean.Parser.Tactic.intro,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.nonReservedSymbol, Bool.false, Lean.ParserDescr.unary, Lean.ParserDescr.symbol, Lean.ParserDescr.const, Lean.ParserDescr.cat]]
[IO.Process.run,[Bind.bind, IO.Process.output, ite, Eq, bne, IO.Process.Output.exitCode, OfNat.ofNat, Bool.true, MonadExcept.throw, IO.userError, HAppend.hAppend, IO.Process.SpawnArgs.cmd, ToString.toString, Pure.pure, PUnit.unit]]
[instToStringExcept,[ToString.mk, String, HAppend.hAppend, ToString.toString]]
[UInt16.mod,[UInt16.mk, HMod.hMod, UInt16.val]]
[String.take,[Substring.toString, Substring.take, String.toSubstring]]
[IO.Error.mkInvalidArgument,[IO.Error.invalidArgument, Option.none]]
[Lean.Parser.Tactic.«tactic_<;>_»,[Lean.ParserDescr.trailingNode, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.symbol, Lean.ParserDescr.cat]]
[IO.Error.otherError.sizeOf_spec,[Eq.refl, HAdd.hAdd, OfNat.ofNat, SizeOf.sizeOf]]
[Array.concatMap,[Array.foldl, HAppend.hAppend, Array.empty, OfNat.ofNat, Array.size]]
[Char.instDecidableLe,[UInt32.decLe, Char.val]]
[PProd.noConfusionType,[]]
[instToStringULift,[ToString.mk, ToString.toString, ULift.down]]
[Subarray.h₂,[]]
[MonadWithReader.noConfusionType,[]]
[System.FilePath.pathExists,[HOrElse.hOrElse, SeqRight.seqRight, System.FilePath.metadata, Pure.pure, Bool.true, Bool.false]]
[noConfusionEnum,[dite, Eq, cast, noConfusionEnum.proof_1, False.elim, noConfusionEnum.proof_2]]
[Nat.instShiftRightNat,[ShiftRight.mk, Nat.shiftRight]]
[Id.instLawfulMonadId.proof_1,[LawfulMonad.mk, rfl]]
[DoResultSBC.noConfusionType,[]]
[UInt16.shiftRight,[UInt16.mk, HShiftRight.hShiftRight, UInt16.val, UInt16.modn, OfNat.ofNat]]
[Task.Priority.default,[OfNat.ofNat]]
[bind_pure,[]]
[Eq.subst,[]]
[ExceptT.bindCont,[Except, Pure.pure, Except.error]]
[Lean.extractMacroScopes,[Unit.unit, Lean.MacroScopesView, Lean.Name.hasMacroScopes, Lean.Name.anonymous, PProd.fst, List.cons, Lean.Name.str, Lean.Name.num, BEq.beq, Lean.MacroScopesView.mk, Lean.Name, Lean.Name.mkStr, Lean.Name.mkNum, panic, List.nil]]
[EStateM.run,[]]
[Lean.Parser.Tactic.Conv.rhs,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.nonReservedSymbol, Bool.false]]
[List.tail?,[Unit.unit, Option, List, Option.none, Option.some]]
[ReaderT.run_monadMap,[rfl]]
[Lean.Syntax.SepArray.elemsAndSeps,[]]
[instReprDecidable,[Repr.mk, Std.Format, Repr.addAppParen, Std.Format.text]]
[IO.FS.Metadata.noConfusionType,[]]
[Lean.Syntax.noConfusionType,[]]
[false_and,[propext, Iff.intro, And.left, False.elim]]
[UInt32.decLe,[Decidable, LE.le, inferInstanceAs]]
[Lean.Syntax.isNatLit?,[Option.none, Option, Nat, Lean.Syntax.isLit?, Lean.Syntax.decodeNatLitVal?, Lean.numLitKind]]
[Array.instInhabitedArray,[Inhabited.mk, Array.empty]]
[IO.FS.readBinFile,[Bind.bind, IO.FS.Handle.mk, IO.FS.Mode.read, Bool.true, IO.FS.Handle.readBinToEnd]]
[Subsingleton.elim.proof_1,[Subsingleton.allEq]]
[fix1,[fixCore1, arbitrary]]
[String.Iterator.forward,[String.Iterator, PProd.fst, String.Iterator.next]]
[Classical.indefiniteDescription.proof_1,[Nonempty, Subtype, Nonempty.intro, Subtype.mk]]
[UInt32.size,[OfNat.ofNat]]
[ReaderT.instMonadExceptOfReaderT,[MonadExceptOf.mk, liftM, MonadExcept.throw, tryCatchThe]]
[String.contains,[String.any, BEq.beq]]
[ST.mkRef,[liftM, ST.Prim.mkRef]]
[Lean.Name.instReprName,[Repr.mk, Lean.Name.reprPrec]]
[termWithout_expected_type_,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.symbol, Lean.ParserDescr.cat]]
[not_not_intro,[]]
[List.foldr,[Unit.unit, PProd.fst]]
[readThe,[MonadReaderOf.read]]
[List.reverseAux_reverseAux_nil,[rfl, of_eq_true, Eq.trans, congrFun, congrArg, Eq, List.cons, List.reverseAux, eq_self]]
[Lean.Meta.Simp.Config.memoize,[]]
[Subarray.forInUnsafe.loop,[ite, LT.lt, Bind.bind, Pure.pure, Subarray.forInUnsafe.loop, HAdd.hAdd, OfNat.ofNat]]
[System.FilePath.parent,[Functor.map, System.FilePath.mk, String.extract, System.FilePath.toString, OfNat.ofNat, String.revFind, List.contains, System.FilePath.pathSeparators]]
[MonadControl.liftWith,[]]
[guard,[ite, Pure.pure, Unit.unit, Alternative.failure]]
[Std.Format.instCoeStringFormat,[Coe.mk, Std.Format.text]]
[String.str,[String.push]]
[Array.getLit.proof_1,[Eq.symm]]
[Nat.le_of_ble_eq_true,[Eq.refl, Bool.true, HEq.refl, LE.le, Nat.zero_le, Nat.succ_le_succ, PProd.fst]]
[StateCpsT.runK_bind_modify,[rfl]]
[instAddUInt64,[Add.mk, UInt64.add]]
[EStateM.Backtrackable.noConfusionType,[]]
[IO.FileRight.mk.injEq,[Eq.propIntro, And.intro, Eq.refl, IO.FileRight.mk, Eq.symm, eq_of_heq, HEq.refl]]
[List.getLast!.proof_1,[]]
[Lean.Syntax.mkCApp,[Lean.Syntax.mkApp, Lean.mkCIdent]]
[UInt32.toUInt64,[Nat.toUInt64, UInt32.toNat]]
[Lean.githash,[Lean.getGithash, Unit.unit]]
[ByteArray.forInUnsafe,[OfNat.ofNat, ByteArray.forInUnsafe.loop]]
[Array.mapMUnsafe,[unsafeCast, OfNat.ofNat, Array.mapMUnsafe.map]]
[ExceptCpsT.instInhabitedExceptCpsT,[Inhabited.mk, arbitrary]]
[Char.val,[]]
[withPtrAddr,[OfNat.ofNat]]
[IO.FS.Stream.read,[]]
[USize.noConfusionType,[]]
[Fin.val,[]]
[RandomGen.split,[]]
[TC.accessible.proof_1,[Acc.intro, Acc.inv]]
[List.get!,[Nat.zero, List.nil, Nat.succ, PProd.fst, panicWithPosWithDecl, OfNat.ofNat]]
[Nat.le_step,[Nat.le.step]]
[instToBoolBool,[ToBool.mk]]
[IO.FS.Mode.noConfusionType,[noConfusionTypeEnum, IO.FS.Mode.toCtorIdx]]
[ByteArray.isEmpty,[BEq.beq, ByteArray.size, OfNat.ofNat]]
[Int.mul,[Int, Int.ofNat, HMul.hMul, Int.negOfNat, Nat.succ]]
[Lean.Parser.Tactic.existsIntro,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.nonReservedSymbol, Bool.false, Lean.ParserDescr.cat]]
[List.length_add_eq_lengthTRAux,[of_eq_true, Eq.trans, congrFun, congrArg, Eq, Nat.zero_add, eq_self, Eq.mpr, congr, Nat.succ_add, List.length, Eq.symm, Nat.succ, rfl]]
[PProd.mk.injEq,[Eq.propIntro, And.intro, Eq.refl, PProd.mk, Eq.symm, eq_of_heq, HEq.refl]]
[Array.elem,[Array.contains]]
[ST.instInhabitedRef,[Inhabited.mk, ST.Ref.mk, PointedType.val, ST.RefPointed, ST.instInhabitedRef.proof_1]]
[Lean.Parser.Tactic.changeWith,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.nonReservedSymbol, Bool.false, Lean.ParserDescr.cat, Lean.ParserDescr.symbol, Lean.ParserDescr.unary, Lean.Parser.Tactic.location]]
[IO.Error.protocolError.injEq,[Eq.propIntro, And.intro, Eq.refl, IO.Error.protocolError, Eq.symm, eq_of_heq, HEq.refl]]
[Lean.Meta.Simp.ConfigCtx.mk.injEq,[Eq.propIntro, Eq.refl, Lean.Meta.Simp.ConfigCtx.mk, Eq.symm, eq_of_heq, HEq.refl]]
[instToStringFloatArray,[ToString.mk, List.toString, FloatArray.toList]]
[Array.size_mkArray,[List.length_replicate]]
[instInhabitedUInt32,[Inhabited.mk, UInt32.ofNatCore, OfNat.ofNat, instInhabitedUInt32.proof_1]]
[UInt64.lor,[UInt64.mk, Fin.lor, UInt64.val]]
[Nat.mod_le,[LE.le, HMod.hMod, Nat.lt_or_ge, Eq.mpr, Eq.refl, Nat.mod_eq_of_lt, Nat.le_refl, Nat.eq_zero_or_pos, OfNat.ofNat, Nat.mod_zero, Nat.le_trans, Nat.le_of_lt, Nat.mod_lt]]
[«term_%_»,[Lean.ParserDescr.trailingNode, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.symbol, Lean.ParserDescr.cat]]
[FloatArray.instEmptyCollectionFloatArray,[EmptyCollection.mk, FloatArray.empty]]
[instDecidableEqChar,[Decidable, Eq, decEq, Char.val, Decidable.isTrue, Char.eq_of_val_eq, Decidable.isFalse, Char.ne_of_val_ne]]
[Lean.mkSepArray,[Bind.bind, ForIn.forIn, MProd.mk, ite, GT.gt, OfNat.ofNat, Pure.pure, PUnit.unit, Id, Array, Lean.Syntax]]
[IO.FS.Metadata.mk.injEq,[Eq.propIntro, And.intro, Eq.refl, IO.FS.Metadata.mk, Eq.symm, eq_of_heq, HEq.refl]]
[Except.ok.inj,[]]
[instDecidableLe,[UInt32.decLe]]
[Sum.inhabitedRight,[Inhabited.mk, Sum.inr, arbitrary]]
[Array.getSepElems,[Array.getEvenElems]]
[Nat.instTransLtArrowNatArrowNatPropLtArrowNatArrowNatPropLtArrowNatArrowNatProp,[Trans.mk, Nat.instTransLtArrowNatArrowNatPropLtArrowNatArrowNatPropLtArrowNatArrowNatProp.proof_1]]
[UInt64.mk.sizeOf_spec,[Eq.refl, HAdd.hAdd, OfNat.ofNat, SizeOf.sizeOf]]
[List.rotateRight,[ite, LE.le, OfNat.ofNat, HAppend.hAppend]]
[Bool.and_false,[rfl, Eq.symm, Eq.refl]]
[Nat.decLe,[dite, Eq, Nat.ble, Bool.true, Decidable.isTrue, Nat.le_of_ble_eq_true, Decidable.isFalse, Nat.not_le_of_not_ble_eq_true]]
[List.le,[Not, LT.lt]]
[Lean.evalPrio,[Lean.Macro.withIncRecDepth, Bind.bind, Lean.expandMacros, cond, Lean.Syntax.isOfKind, Lean.Name.mkStr, Lean.Name.anonymous, Pure.pure, Option.getD, Lean.Syntax.isNatLit?, OfNat.ofNat, Lean.Macro.throwErrorAt]]
[ByteArray.foldlMUnsafe.fold,[ite, Eq, BEq.beq, Bool.true, Pure.pure, Bind.bind, ByteArray.uget, lcProof, ByteArray.foldlMUnsafe.fold, HAdd.hAdd, OfNat.ofNat]]
[instReprTupleProd,[ReprTuple.mk, List, Std.Format, ReprTuple.reprTuple, List.cons, repr]]
[true_or,[propext, Iff.intro, trivial, Or.inl]]
[namedPattern,[]]
[Id.hasBind,[inferInstance]]
[prioLow,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.nonReservedSymbol, Bool.false]]
[MonadStateOf.modifyGet,[]]
[List.findSomeM?,[Unit.unit, Option, Pure.pure, Option.none, Bind.bind, Option.some, PProd.fst]]
[Lean.Name.instBEqName,[BEq.mk, Lean.Name.beq]]
[HPow.hPow,[]]
[IO.Error.mkInvalidArgumentFile,[Function.comp, IO.Error.invalidArgument, Option.some]]
[USize.mk.sizeOf_spec,[Eq.refl, HAdd.hAdd, OfNat.ofNat, SizeOf.sizeOf]]
[Lean.Name.num.injEq,[Eq.propIntro, And.intro, Eq.refl, Lean.Name.num, Eq.symm, eq_of_heq, HEq.refl]]
[Nat.allM,[Nat.allM.loop]]
[UInt8.modn,[UInt8.mk, HMod.hMod, UInt8.val]]
[Ordering.gt.sizeOf_spec,[Eq.refl, OfNat.ofNat]]
[withPtrEqDecEq.proof_2,[ofBoolUsing_eq_true]]
[instReprList,[Repr.mk, Std.Format, List.cons, Std.Format.text, Std.Format.bracket, Std.Format.joinSep, HAppend.hAppend, Std.Format.line]]
[StdGen.s2,[]]
[Lean.Parser.Tactic.Conv.convSeq1Indented,[Lean.ParserDescr.nodeWithAntiquot, Lean.Name.mkStr, Lean.Name.anonymous, Lean.ParserDescr.unary, Lean.ParserDescr.binary, Lean.ParserDescr.const, Lean.ParserDescr.cat, OfNat.ofNat, Lean.ParserDescr.symbol]]
[«term_&&&_»,[Lean.ParserDescr.trailingNode, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.symbol, Lean.ParserDescr.cat]]
[instOrOpUInt64,[OrOp.mk, UInt64.lor]]
[Thunk.map,[Thunk.mk, Thunk.get]]
[ST.instInhabitedRef.proof_1,[Nonempty.intro, arbitrary]]
[Std.Range.«term[_:_:_]»,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.symbol, Lean.ParserDescr.cat]]
[Lean.instEvalUnit,[Lean.Eval.mk, ite, Eq, Bool.true, Pure.pure, Unit.unit, IO.println, repr]]
[IO.FS.SystemTime.mk.inj,[And.intro]]
[Fin.shiftLeft.proof_1,[LT.lt, HMod.hMod, Nat.mod_lt]]
[IO.Error.userError.inj,[]]
[EStateM.orElse,[EStateM.Result.ok, EStateM.Result, Unit.unit, EStateM.Backtrackable.restore]]
[Substring.trimRight,[Substring.dropRightWhile, Char.isWhitespace]]
[UInt32.decLt,[Decidable, LT.lt, inferInstanceAs]]
[Array.any,[Id.run, Array.anyM]]
[FloatSpec.lt,[]]
[Lean.instQuoteProd,[Lean.Quote.mk, Lean.Syntax, Lean.Syntax.mkCApp, Lean.Name.mkStr, Lean.Name.anonymous, List.toArray, List.cons, Lean.Quote.quote, List.nil]]
[ReaderT.orElse,[HOrElse.hOrElse, Unit.unit]]
[USize.decEq.proof_1,[rfl]]
[Setoid.refl,[Equivalence.refl, Setoid.iseqv]]
[Nat.lt.base.proof_1,[Nat.le_refl, Nat.succ]]
[Except.map,[Except, Except.error, Except.ok]]
[Quotient.rec,[Quot.rec]]
[Fin.xor.proof_1,[LT.lt, HMod.hMod, Nat.mod_lt]]
[InvImage.accessible.proof_1,[Acc.intro, rfl]]
[String.find,[String.findAux, String.bsize, OfNat.ofNat]]
[Option.any,[Unit.unit, Bool, Bool.false]]
[LawfulMonad.bind_map,[]]
[Exists.elim,[]]
[Lean.Macro.State.traceMsgs,[]]
[instMonadExcept,[MonadExcept.mk, throwThe, tryCatchThe]]
[Array.anyM.loop.proof_1,[Nat.lt_of_lt_of_le]]
[MProd.fst,[]]
[Substring.trim,[Substring, Substring.mk]]
[Substring.prev,[String.Pos, ite, Eq, HSub.hSub, String.prev]]
[eq_self,[propext, Iff.intro, trivial, rfl]]
[Lean.mkIdentFromRef,[Bind.bind, Lean.MonadRef.getRef, Pure.pure, Lean.mkIdentFrom]]
[Array.foldl,[Id.run, Array.foldlM]]
[Except.ok.sizeOf_spec,[Eq.refl, HAdd.hAdd, OfNat.ofNat, SizeOf.sizeOf]]
[bfix4,[PProd.fst]]
[Nat.mul_zero,[rfl]]
[andM,[Bind.bind, Unit.unit, ToBool.toBool, Pure.pure]]
[IO.Error.alreadyExists.inj,[And.intro]]
[cast_heq,[Eq.symm, eq_of_heq, Eq.refl, HEq.refl, HEq, cast]]
[Lean.Syntax.SepArray.getElems,[Array.getSepElems, Lean.Syntax.SepArray.elemsAndSeps]]
[Array.foldlMUnsafe.fold,[ite, Eq, BEq.beq, Bool.true, Pure.pure, Bind.bind, Array.uget, lcProof, Array.foldlMUnsafe.fold, HAdd.hAdd, OfNat.ofNat]]
[Lean.Parser.Tactic.first,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.nonReservedSymbol, Bool.false, Lean.ParserDescr.unary, Lean.ParserDescr.const, Lean.ParserDescr.symbol]]
[Lean.Parser.Tactic.exact,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.nonReservedSymbol, Bool.false, Lean.ParserDescr.cat]]
[Lean.Meta.TransparencyMode.default.sizeOf_spec,[Eq.refl, OfNat.ofNat]]
[List.getLast.proof_2,[]]
[instLTUSize,[LT.mk, USize.lt]]
[Array.findRev?,[Id.run, Array.findRevM?]]
[instMonadLiftT,[MonadLiftT.mk, MonadLift.monadLift, MonadLiftT.monadLift]]
[ExceptCpsT.runCatch_bind_lift,[rfl]]
[Subsingleton.elim,[Subsingleton.elim.proof_1]]
[Std.Format.instMonadPrettyFormatStateMState,[Std.Format.MonadPrettyFormat.mk, modify, HAppend.hAppend, HAdd.hAdd, String.length, String.pushn, Char.ofNat, Bind.bind, MonadState.get, Pure.pure, Unit.unit]]
[Subtype.mk.inj,[]]
[DecidableEq,[Decidable, Eq]]
[false_of_ne,[Ne.irrefl]]
[Nat.le_of_eq,[Nat.le_refl]]
[instSubsingleton.proof_1,[Subsingleton.intro, proofIrrel]]
[List.get?,[Nat.zero, List.nil, Nat.succ, Option, Option.some, PProd.fst, Option.none]]
[Acc.inv.proof_1,[]]
[UInt16.noConfusionType,[]]
[List.length_append,[of_eq_true, Eq.trans, congr, congrArg, Eq, List.length, List.nil_append, congrFun, HAdd.hAdd, List.length_nil, Nat.zero_add, eq_self, List.cons_append, List.length_cons, HAppend.hAppend, Nat.succ, Nat.succ_add]]
[Nat.div_eq,[congrFun, WellFounded.fix_eq, WellFoundedRelation.wf, measure, id, dite, And, LT.lt, OfNat.ofNat, LE.le, HAdd.hAdd, HSub.hSub, Nat.sub_lt, Nat.lt_of_lt_of_le, Nat.zero, dif_eq_if, HDiv.hDiv]]
[Quot.liftOn,[Quot.lift]]
[Char.instLEChar,[LE.mk, Char.le]]
[String.decEq,[Decidable, Eq, dite, Decidable.isTrue, String.decEq.proof_1, Decidable.isFalse, String.decEq.proof_2]]
[instCoeTail,[CoeTail.mk, coeFun]]
[Array.forIn.loop.proof_2,[Nat.le_of_lt, Nat.lt_of_lt_of_le, Nat.lt_succ_self]]
[Array.qpartition,[Array.qpartition.loop]]
[ToString.noConfusionType,[]]
[instOrOpUInt16,[OrOp.mk, UInt16.lor]]
[Std.Format.text.sizeOf_spec,[Eq.refl, HAdd.hAdd, OfNat.ofNat, SizeOf.sizeOf]]
[IO.FS.SystemTime.mk.injEq,[Eq.propIntro, And.intro, Eq.refl, IO.FS.SystemTime.mk, Eq.symm, eq_of_heq, HEq.refl]]
[Lean.Option.hasQuote,[Lean.Quote.mk, Unit.unit, Lean.Syntax, Lean.mkIdent, Lean.Name.mkStr, Lean.Name.anonymous, Lean.Syntax.mkCApp, List.toArray, List.cons, Lean.Quote.quote, List.nil]]
[withPtrEqDecEq,[Decidable, Eq, Eq.refl, Decidable.isTrue, withPtrEqDecEq.proof_2, Decidable.isFalse, withPtrEqDecEq.proof_3]]
[UInt64.shiftLeft,[UInt64.mk, HShiftLeft.hShiftLeft, UInt64.val, UInt64.modn, OfNat.ofNat]]
[Lean.version.specialDesc,[Lean.version.getSpecialDesc, Unit.unit]]
[InvImage,[]]
[coeDecidableEq,[inferInstanceAs, Decidable, Eq, Bool.true]]
[Char.utf8Size.proof_3,[of_decide_eq_true, Eq.refl, Bool.true]]
[StateT.pure,[Pure.pure, Prod.mk]]
[Lean.Syntax.isNone,[Unit.unit, Lean.Syntax.atom, Lean.Syntax.ident, Bool, and, BEq.beq, Lean.nullKind, Array.size, OfNat.ofNat, Bool.true, Bool.false]]
[Nat.mul_eq,[rfl]]
[emptyRelation,[False]]
[List.hasDecidableLt.proof_2,[Eq.refl, List.cons, List.nil, HEq.refl, False]]
[PLift.up_down,[Eq, PLift.up, PLift.down, rfl]]
[List.rotateLeft,[ite, LE.le, OfNat.ofNat, HAppend.hAppend]]
[IO.Process.SpawnArgs.mk.sizeOf_spec,[Eq.refl, HAdd.hAdd, OfNat.ofNat, SizeOf.sizeOf]]
[IO.Error.interrupted.sizeOf_spec,[Eq.refl, HAdd.hAdd, OfNat.ofNat, SizeOf.sizeOf]]
[instReprSum,[Repr.mk, Std.Format, Repr.addAppParen, HAppend.hAppend, Std.Format.text, reprArg]]
[Int.div,[Int, Int.ofNat, HDiv.hDiv, Neg.neg, Nat.succ]]
[Lean.instInhabitedName,[Inhabited.mk, Lean.Name.anonymous]]
[Nat.lt_of_succ_lt,[Nat.le_of_succ_le]]
[TC.accessible,[TC.accessible.proof_1]]
[instReprAtomBool,[ReprAtom.mk]]
[ReaderT.map,[Functor.map]]
[Std.Format.instInhabitedFlattenBehavior,[Inhabited.mk, Std.Format.FlattenBehavior.allOrNone]]
[instDecidableEqList,[List.hasDecEq]]
[Nat.eq_zero_of_le_zero,[Nat.le_antisymm, Nat.zero_le]]
[Lean.mkOptionalNode,[Unit.unit, Lean.Syntax, Lean.mkNullNode, List.toArray, List.cons, List.nil]]
[Quotient.sound,[Quotient.sound.proof_1]]
[Subsingleton.helim.proof_1,[heq_of_eq, Subsingleton.elim]]
[Float.ofInt,[Float, Float.ofNat, Float.neg, Nat.succ]]
[List.maximum?,[Unit.unit, Option, Option.none, Option.some, List.foldl, max]]
[Lean.Parser.Tactic.Conv.enterArg,[Lean.ParserDescr.nodeWithAntiquot, Lean.Name.mkStr, Lean.Name.anonymous, Lean.ParserDescr.binary, Lean.ParserDescr.const]]
[«term_==_»,[Lean.ParserDescr.trailingNode, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.symbol, Lean.ParserDescr.cat]]
[Lean.Syntax.SepArray.ofElems,[Lean.Syntax.SepArray.mk, Lean.mkSepArray, Lean.mkAtom]]
[instDecidableAnd,[Decidable, And, Decidable.isTrue, And.intro, Decidable.isFalse, instDecidableAnd.proof_1, instDecidableAnd.proof_2]]
[instLTUInt32,[LT.mk, LT.lt, UInt32.val]]
[or,[Unit.unit, Bool, Bool.true]]
[instMulFloat,[Mul.mk, Float.mul]]
[«term_&&_»,[Lean.ParserDescr.trailingNode, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.symbol, Lean.ParserDescr.cat]]
[USize.decEq.proof_2,[absurd]]
[List.drop,[List, List.nil, PProd.fst]]
[Nat.pred_lt,[LT.lt, Nat.pred, absurd, rfl, Nat.lt_succ_of_le, Nat.le_refl, Nat.succ]]
[Nat.lt_wfRel,[WellFoundedRelation.mk, Nat.lt, Nat.lt_wfRel.proof_1]]
[Classical.epsilon_spec_aux,[Subtype.property, Classical.strongIndefiniteDescription]]
[Lean.Parser.Tactic.simpLemma,[Lean.ParserDescr.nodeWithAntiquot, Lean.Name.mkStr, Lean.Name.anonymous, Lean.ParserDescr.binary, Lean.ParserDescr.unary, Lean.Parser.Tactic.simpPre, Lean.Parser.Tactic.simpPost, Lean.ParserDescr.symbol, Lean.ParserDescr.cat, OfNat.ofNat]]
[instDecidableIff.proof_2,[Iff.mp]]
[Lean.Parser.Tactic.simpPre,[Lean.ParserDescr.nodeWithAntiquot, Lean.Name.mkStr, Lean.Name.anonymous, Lean.ParserDescr.symbol]]
[List.mapM,[Unit.unit, List, Pure.pure, List.nil, Bind.bind, PProd.fst, List.cons]]
[Subarray.all,[Id.run, Subarray.allM]]
[ST.Ref.mk.inj,[]]
[cast_eq,[rfl]]
[Lean.Name.toStringWithSep.maybeEscape,[ite, Eq, Bool.true, Option.getD, Lean.Name.escapePart]]
[Nat.succ_sub_succ_eq_sub,[rfl, congrArg, Nat.pred]]
[FloatArray.forIn,[FloatArray.size, Nat.le_refl, FloatArray.forIn.loop]]
[«term_≤_»,[Lean.ParserDescr.trailingNode, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.symbol, Lean.ParserDescr.cat]]
[instAddFloat,[Add.mk, Float.add]]
[IO.Process.SpawnArgs.env,[]]
[Char.utf8Size.proof_4,[of_decide_eq_true, Eq.refl, Bool.true]]
[EST,[EStateM]]
[IO.AccessRight.read,[]]
[IO.instMonadLiftSTRealWorldBaseIO,[MonadLift.mk, id]]
[List.toFloatArray,[FloatArray.empty, List.toFloatArray.loop]]
[String.splitOn,[ite, Eq, BEq.beq, Bool.true, List.cons, List.nil, String.splitOnAux, OfNat.ofNat]]
[String.Pos,[Nat]]
[UInt64.ofNatCore,[UInt64.mk, Fin.mk]]
[DoResultSBC.break.sizeOf_spec,[Eq.refl, HAdd.hAdd, OfNat.ofNat, SizeOf.sizeOf]]
[instMonadLiftBaseIOEIO,[MonadLift.mk, BaseIO.toEIO]]
[Squash,[Quot, True]]
[Lean.Parser.Tactic.focus,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.nonReservedSymbol, Bool.false, Lean.ParserDescr.const]]
[«stx_,+,?»,[Lean.ParserDescr.trailingNode, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.symbol]]
[Nat.mod_one,[]]
[IO.FileRight.group,[]]
[ExceptT.lift,[ExceptT.mk, Functor.map, Except.ok]]
[charToHex,[HAppend.hAppend, hexDigitRepr]]
[Nat.forM,[Nat.forM.loop]]
[Int.instDivInt,[Div.mk, Int.div]]
[List.redLength,[Unit.unit, Nat, OfNat.ofNat, Nat.succ, PProd.fst]]
[List.hasDecEq.proof_3,[]]
[UInt8.toUInt64,[Nat.toUInt64, UInt8.toNat]]
[«term_^^^_»,[Lean.ParserDescr.trailingNode, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.symbol, Lean.ParserDescr.cat]]
[Lean.Macro.mkMethodsImp,[unsafeCast]]
[Bool.true.sizeOf_spec,[Eq.refl, OfNat.ofNat]]
[Task.map,[Task.pure, Task.get]]
[UInt32.shiftLeft,[UInt32.mk, HShiftLeft.hShiftLeft, UInt32.val, UInt32.modn, OfNat.ofNat]]
[Iff.comm,[Iff.intro, Iff.symm]]
[instDecidableArrow,[dite, Decidable.isTrue, instDecidableArrow.proof_1, Decidable.isFalse, instDecidableArrow.proof_2, instDecidableArrow.proof_3]]
[String.Iterator.mk.injEq,[Eq.propIntro, And.intro, Eq.refl, String.Iterator.mk, Eq.symm, eq_of_heq, HEq.refl]]
[Lean.Parser.Tactic.«tacticHave'__:=_»,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.nonReservedSymbol, Bool.false, Lean.ParserDescr.const, Lean.ParserDescr.symbol, Lean.ParserDescr.cat]]
[Lean.Meta.Rewrite.Config.mk.inj,[And.intro]]
[PNonScalar.mk.sizeOf_spec,[Eq.refl, HAdd.hAdd, OfNat.ofNat, SizeOf.sizeOf]]
[Nat.mod_eq_sub_mod,[Eq, HMod.hMod, HSub.hSub, Nat.eq_zero_or_pos, rfl, Eq.symm, Nat.sub_zero, if_pos, And.intro, Nat.mod_eq]]
[Sum.inhabitedLeft,[Inhabited.mk, Sum.inl, arbitrary]]
[decidableOfDecidableOfIff.proof_1,[absurd, Iff.mpr]]
[IO.FS.Handle.putStrLn,[IO.FS.Handle.putStr, String.push, Char.ofNat]]
[id_map',[LawfulFunctor.id_map]]
[StateCpsT.instMonadLiftStateCpsT,[MonadLift.mk, StateCpsT.lift]]
[Lean.TrailingParserDescr,[Lean.ParserDescr]]
[heq_of_eq_of_heq,[HEq.trans, heq_of_eq]]
[Option.noConfusionType,[]]
[List.partition,[List.partitionAux, Prod.mk, List.nil]]
[IO.print,[Bind.bind, IO.getStdout, IO.FS.Stream.putStr, ToString.toString]]
[Lean.NameGenerator.mk.injEq,[Eq.propIntro, And.intro, Eq.refl, Lean.NameGenerator.mk, Eq.symm, eq_of_heq, HEq.refl]]
[Array.mk.injEq,[Eq.propIntro, Eq.refl, Array.mk, Eq.symm, eq_of_heq, HEq.refl]]
[Lean.Parser.Tactic.Conv.convSeq,[Lean.ParserDescr.nodeWithAntiquot, Lean.Name.mkStr, Lean.Name.anonymous, Lean.ParserDescr.binary, Lean.Parser.Tactic.Conv.convSeq1Indented, Lean.Parser.Tactic.Conv.convSeqBracketed]]
[List.reverse_reverse,[Eq.mpr, Eq.refl, Eq, List.reverseAux, List.nil, List.reverseAux_reverseAux_nil, rfl]]
[Lean.Parser.Tactic.tacticRefine_lift'_,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.nonReservedSymbol, Bool.false, Lean.ParserDescr.cat]]
[Array.erase,[Unit.unit, Array, Array.indexOf?, Array.feraseIdx]]
[«term_||_»,[Lean.ParserDescr.trailingNode, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.symbol, Lean.ParserDescr.cat]]
[IO.Process.StdioConfig.stdin,[]]
[instLTNat,[LT.mk, Nat.lt]]
[instReprAtomChar,[ReprAtom.mk]]
[FloatSpec.mk.inj,[And.intro]]
[Fin.val_eq_of_eq,[rfl]]
[Lean.charLitKind,[Lean.Name.mkStr, Lean.Name.anonymous]]
[Nat.pow_zero,[rfl]]
[«term_++_»,[Lean.ParserDescr.trailingNode, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.symbol, Lean.ParserDescr.cat]]
[String.map,[String.mapAux, OfNat.ofNat]]
[Std.instToFormatFormat,[Std.ToFormat.mk]]
[Quotient.recOnSubsingleton₂.proof_1,[Quot.recOnSubsingleton]]
[Lean.Macro.withIncRecDepth,[Bind.bind, MonadReader.read, Unit.unit, Lean.MacroM, BEq.beq, Lean.Macro.Context.currRecDepth, Lean.Macro.Context.maxRecDepth, MonadExcept.throw, Lean.Macro.Exception.error, Lean.maxRecDepthErrorMessage, MonadWithReader.withReader, Lean.Macro.Context.mk, Lean.Macro.Context.methods, Lean.Macro.Context.mainModule, Lean.Macro.Context.currMacroScope, HAdd.hAdd, OfNat.ofNat, Lean.Macro.Context.ref]]
[List.firstM,[Unit.unit, Alternative.failure, HOrElse.hOrElse, PProd.fst]]
[UInt64.toNat,[Fin.val, UInt64.val]]
[Substring.isNat,[Substring.all, Char.isDigit]]
[Nat.anyM,[Nat.anyM.loop]]
[instInhabitedPUnit,[Inhabited.mk, PUnit.unit]]
[IO.Error.resourceBusy.injEq,[Eq.propIntro, And.intro, Eq.refl, IO.Error.resourceBusy, Eq.symm, eq_of_heq, HEq.refl]]
[Nat.toUSize,[USize.ofNat]]
[Int.le,[Int.NonNeg, HSub.hSub]]
[instToStreamListList,[ToStream.mk]]
[Lean.NameGenerator.mkChild,[Prod.mk, Lean.NameGenerator.mk, Lean.Name.mkNum, Lean.NameGenerator.namePrefix, Lean.NameGenerator.idx, OfNat.ofNat, HAdd.hAdd]]
[prioMid,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.nonReservedSymbol, Bool.false]]
[RandomGen.noConfusionType,[]]
[Fin.val_ne_of_ne,[absurd, Fin.eq_of_val_eq]]
[Quotient.ind₂,[Quotient.ind]]
[OptionT.mk,[]]
[Lean.Syntax.decodeQuotedChar,[OptionM.run, ite, Eq, BEq.beq, Char.ofNat, Bool.true, Pure.pure, Prod.mk, Bind.bind, and, Decidable.decide, LE.le, Option.some, HSub.hSub, Char.toNat, HAdd.hAdd, OfNat.ofNat, Option.none, OptionM, Prod, Char, String.Pos, HMul.hMul]]
[Array.appendCore,[Array.size, OfNat.ofNat, Array.appendCore.loop]]
[instDecidableEqQuotient,[Quotient.recOnSubsingleton₂, Decidable, Eq, Quotient.mk, Decidable.isTrue, Quotient.sound, Decidable.isFalse, instDecidableEqQuotient.proof_2]]
[WellFoundedRelation.wf,[]]
[Lean.NameGenerator.mk.sizeOf_spec,[Eq.refl, HAdd.hAdd, OfNat.ofNat, SizeOf.sizeOf]]
[StateCpsT.instMonadStateOfStateCpsT,[MonadStateOf.mk, PUnit.unit]]
[MonadControl.restoreM,[]]
[MonadExcept.orelse',[MonadExcept.tryCatch, MonadExcept.throw, ite, Eq, Bool.true]]
[MonadExcept.tryCatch,[]]
[OptionM.run,[]]
[Lean.Parser.Tactic.tacticRefine_lift_,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.nonReservedSymbol, Bool.false, Lean.ParserDescr.cat]]
[Array.insertionSort.swapLoop,[Array, Eq.refl]]
[instMulUInt64,[Mul.mk, UInt64.mul]]
[precMin1,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.nonReservedSymbol, Bool.false]]
[List.contains,[List.elem]]
[List.map₂,[List.nil, List.cons, List, PProd.fst]]
[Thunk.pure,[Thunk.mk]]
[instOrdUInt8,[Ord.mk, compareOfLessAndEq]]
[instInhabitedOption,[Inhabited.mk, Option.none]]
[Append.noConfusionType,[]]
[Array.mapIdx,[Id.run, Array.mapIdxM]]
[NonScalar.val,[]]
[ByteArray.forIn.loop.proof_2,[Nat.le_of_lt, Nat.lt_of_lt_of_le, Nat.lt_succ_self]]
[«term_⊕_»,[Lean.ParserDescr.trailingNode, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.symbol, Lean.ParserDescr.cat]]
[ByteArray.foldlM,[dite, LE.le, ByteArray.size, ByteArray.foldlM.proof_1]]
[Lean.Syntax.getNumArgs,[Lean.Syntax.missing, Lean.Syntax.atom, Lean.Syntax.ident, Nat, Array.size, OfNat.ofNat]]
[String.Iterator.curr,[Char, String.get]]
[instDecidableFalse,[Decidable.isFalse, not_false]]
[IO.Process.StdioConfig.noConfusionType,[]]
[«term_*>_»,[Lean.ParserDescr.trailingNode, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.symbol, Lean.ParserDescr.cat]]
[IO.Process.Child.stdout,[]]
[bind_congr,[of_eq_true, Eq.trans, congrFun, congrArg, Eq, Bind.bind, funext, eq_self]]
[Substring.noConfusionType,[]]
[OrOp.or,[]]
[IO.Error.alreadyExists.injEq,[Eq.propIntro, And.intro, Eq.refl, IO.Error.alreadyExists, Eq.symm, eq_of_heq, HEq.refl]]
[UInt16.decLe,[Decidable, LE.le, inferInstanceAs]]
[String.toInt?,[OptionM.run, ite, Eq, String.get, OfNat.ofNat, Char.ofNat, Bind.bind, Substring.toNat?, Substring.drop, String.toSubstring, Pure.pure, Neg.neg, Int.ofNat, Functor.map, String.toNat?]]
[nonempty_of_exists,[Nonempty, Nonempty.intro]]
[MonadLift.monadLift,[]]
[ByteArray.uset,[ByteArray, ByteArray.mk, Array.uset]]
[String.revFind,[ite, Eq, BEq.beq, String.bsize, OfNat.ofNat, Bool.true, Option.none, String.revFindAux, String.prev]]
[Array.getMax?,[dite, LT.lt, OfNat.ofNat, Array.size, Option.some, Array.foldl, ite, Eq, Bool.true, Option.none]]
[Lean.Parser.Tactic.simpStar,[Lean.ParserDescr.nodeWithAntiquot, Lean.Name.mkStr, Lean.Name.anonymous, Lean.ParserDescr.symbol]]
[EStateM.modifyGet,[EStateM.Result, EStateM.Result.ok]]
[StateCpsT.runK_monadLift,[rfl]]
[Array.singleton,[Array.mkArray, OfNat.ofNat]]
[ne_true_of_eq_false,[Not, Eq, Bool.true]]
[IO.AccessRight.execution,[]]
[Int.toNat,[Nat, OfNat.ofNat]]
[Eq.mpr,[Eq.symm]]
[IO.FS.DirEntry.path,[HDiv.hDiv, IO.FS.DirEntry.root, System.FilePath.mk, IO.FS.DirEntry.fileName]]
[PSigma.revLex,[PSigma.revLex.proof_1]]
[List.range,[List.rangeAux, List.nil]]
[UInt32.toUInt8,[Nat.toUInt8, UInt32.toNat]]
[FloatArray.push,[FloatArray, FloatArray.mk, Array.push]]
[StateT.orElse,[HOrElse.hOrElse, Unit.unit]]
[IO.Process.Stdio.noConfusionType,[noConfusionTypeEnum, IO.Process.Stdio.toCtorIdx]]
[implies,[]]
[Prod.mk.injEq,[Eq.propIntro, And.intro, Eq.refl, Prod.mk, Eq.symm, eq_of_heq, HEq.refl]]
[Lean.Meta.Simp.ConfigCtx.mk.inj,[]]
[instNegFloat,[Neg.mk, Float.neg]]
[ToStream.noConfusionType,[]]
[panicWithPos,[panic, HAppend.hAppend, ToString.toString]]
[IO.FS.Stream.Buffer.mk.inj,[And.intro]]
[StateRefT'.set,[ST.Ref.set]]
[String.decEq.proof_1,[congrArg, String.mk]]
[Lean.MonadRef.noConfusionType,[]]
[Lean.SourceInfo.getPos?,[Lean.SourceInfo.synthetic, Bool.true, Lean.SourceInfo.none, Option, String.Pos, Option.some, Option.none]]
[IO.FS.lines,[Bind.bind, IO.FS.Handle.mk, IO.FS.Mode.read, Bool.false, List.toArray, List.nil, IO.FS.lines.read]]
[Subtype.noConfusionType,[]]
[IO.Error.mkHardwareFault,[IO.Error.hardwareFault]]
[String.split,[String.splitAux, OfNat.ofNat, List.nil]]
[Nat.mod_lt,[Nat.mod.inductionOn]]
[ByteArray.toList,[OfNat.ofNat, List.nil, ByteArray.toList.loop]]
[«term_<<<_»,[Lean.ParserDescr.trailingNode, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.symbol, Lean.ParserDescr.cat]]
[List.length_replicate,[List.nil, List.length_replicate.aux]]
[Std.Range.instForMRangeNat,[ForM.mk, Std.Range.forM]]
[UInt16.decEq,[Decidable, Eq, dite, Decidable.isTrue, UInt16.decEq.proof_1, Decidable.isFalse, UInt16.decEq.proof_2]]
[unsafeIO,[unsafeEIO]]
[Quotient.exists_rep,[Quot.exists_rep]]
[ReprTuple.noConfusionType,[]]
[Quotient.hrecOn,[Quot.hrecOn]]
[Classical.exists_true_of_nonempty,[Exists, True, Exists.intro, trivial]]
[String.append,[String, String.mk, HAppend.hAppend]]
[UInt8.size,[OfNat.ofNat]]
[Array.insertionSort.swapLoop.proof_2,[Eq.mpr, Eq.refl, LT.lt, Array.size, Array.swap, Fin.mk, Nat.lt_trans, Nat.lt_succ_self, Eq.symm, Array.size_swap]]
[UInt8.ofNatCore,[UInt8.mk, Fin.mk]]
[List.append_eq_appendTR,[funext, rfl, of_eq_true, Eq.trans, congr, congrArg, Eq, List.cons, List.reverseAux_reverseAux, List.nil, eq_self, List.reverseAux]]
[String.isNat,[String.all, Char.isDigit]]
[Fin.mod,[Fin, Fin.mk, HMod.hMod, Fin.mod.proof_1]]
[List.instLEList,[LE.mk, List.le]]
[String.toLower,[String.map, Char.toLower]]
[IO.FS.Stream.isEof,[]]
[addParenHeuristic,[ite, Eq, or, String.isPrefixOf, Bool.true, not, String.any, Char.isWhitespace, HAppend.hAppend]]
[String.replace,[OfNat.ofNat, String.replace.loop]]
[IO.Error.mkNoSuchThing,[IO.Error.noSuchThing, Option.none]]
[Lean.Syntax.mkNumLit,[Lean.Syntax.mkLit, Lean.numLitKind]]
[Iff.rfl,[Iff.refl]]
[String.Iterator.i,[]]
[Lean.Syntax.node.sizeOf_spec,[congrArg, Nat.add, HAdd.hAdd, OfNat.ofNat, SizeOf.sizeOf, Eq.trans, Eq.refl, List.nil, Eq.symm, List.cons.sizeOf_spec, Array.mk.sizeOf_spec]]
[Lean.instInhabitedSyntax,[Inhabited.mk, Lean.Syntax.missing]]
[UInt64.mul,[UInt64.mk, HMul.hMul, UInt64.val]]
[instLawfulMonadStateRefT',[instLawfulMonadStateRefT'.proof_1]]
[Nat.gcd_zero_left,[rfl]]
[EStateM.adaptExcept,[EStateM.Result, EStateM.Result.error, EStateM.Result.ok]]
[Std.Format.joinSep,[List.cons, Std.Format, Std.Format.nil, Std.ToFormat.format, HAppend.hAppend, PProd.fst]]
[instMonadExceptOfExceptT_1,[MonadExceptOf.mk, ExceptT.mk, Pure.pure, Except.error, ExceptT.tryCatch]]
[instMonadStateOfStateT,[MonadStateOf.mk, StateT.get, StateT.set, StateT.modifyGet]]
[Lean.Parser.Tactic.Conv.convRight,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.nonReservedSymbol, Bool.false]]
[instInhabitedNonScalar,[Inhabited.mk, NonScalar.mk, arbitrary]]
[Nat.le_eq,[rfl]]
[Lean.Macro.State.noConfusionType,[]]
[IO.Process.Child.noConfusionType,[]]
[Lean.Meta.Simp.Config.mk.injEq,[Eq.propIntro, And.intro, Eq.refl, Lean.Meta.Simp.Config.mk, Eq.symm, eq_of_heq, HEq.refl]]
[Lean.Meta.instReprTransparencyMode,[Repr.mk, Unit.unit, Std.Format, Repr.addAppParen, Std.Format.group, Std.Format.nest, ite, GE.ge, OfNat.ofNat, Std.Format.text, Std.Format.FlattenBehavior.allOrNone]]
[UInt64.sub,[UInt64.mk, HSub.hSub, UInt64.val]]
[Ne.irrefl,[rfl]]
[Lean.Parser.Tactic.Conv.convLeft,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.nonReservedSymbol, Bool.false]]
[Coe.noConfusionType,[]]
[Lean.instEval,[Lean.Eval.mk, IO.println, ToString.toString, Unit.unit]]
[«term_!=_»,[Lean.ParserDescr.trailingNode, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.symbol, Lean.ParserDescr.cat]]
[implies_true,[propext, Iff.intro, trivial, True.intro]]
[OptionT,[Option]]
[Lean.isSubScriptAlnum,[or, Lean.isNumericSubscript, and, Decidable.decide, LE.le, OfNat.ofNat, Char.val]]
[«stx_,+»,[Lean.ParserDescr.trailingNode, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.symbol]]
[Substring.toString,[String, String.extract]]
[Nat.decEq.proof_1,[Eq.refl, Nat.beq]]
[String.capitalize,[String.set, OfNat.ofNat, Char.toUpper, String.get]]
[instToFormatList,[Std.ToFormat.mk, List.format]]
[fix2,[fixCore2, arbitrary]]
[Subtype.val,[]]
[Lean.Parser.Tactic.discharger,[Lean.ParserDescr.nodeWithAntiquot, Lean.Name.mkStr, Lean.Name.anonymous, Lean.ParserDescr.binary, Lean.ParserDescr.unary, Lean.ParserDescr.symbol, Lean.ParserDescr.nonReservedSymbol, Bool.false, Lean.ParserDescr.const]]
[instInhabitedReaderT,[Inhabited.mk, arbitrary]]
[Array.extract,[Array.ofSubarray, Array.toSubarray]]
[ReaderT.run_seqLeft,[Eq.mpr, Eq.refl, Eq, ReaderT.run, SeqLeft.seqLeft, seqLeft_eq_bind, rfl]]
[IO.Error.timeExpired.sizeOf_spec,[Eq.refl, HAdd.hAdd, OfNat.ofNat, SizeOf.sizeOf]]
[USize.xor,[USize.mk, Fin.xor, USize.val]]
[instToFormat,[Std.ToFormat.mk, Function.comp, Std.Format.text, ToString.toString]]
[Array.get,[List.get, Array.data, Fin.val, Array.get.proof_1]]
[Nat.le_trans,[Eq.symm, eq_of_heq, Eq.refl, HEq.refl, LE.le, Nat.le.step, PProd.fst]]
[instInhabitedUInt64,[Inhabited.mk, UInt64.ofNatCore, OfNat.ofNat, instInhabitedUInt64.proof_1]]
[USize.decEq,[Decidable, Eq, dite, Decidable.isTrue, USize.decEq.proof_1, Decidable.isFalse, USize.decEq.proof_2]]
[Lean.Parser.Tactic.«tacticHave__:=_»,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.nonReservedSymbol, Bool.false, Lean.ParserDescr.const, Lean.ParserDescr.symbol, Lean.ParserDescr.cat]]
[IO.Error.mkResourceBusy,[IO.Error.resourceBusy]]
[Array.instBEqArray,[BEq.mk, Array.isEqv, BEq.beq]]
[System.instInhabitedFilePath,[Inhabited.mk, System.FilePath.mk, arbitrary]]
[IO.Process.Output.stderr,[]]
[instSubUInt16,[Sub.mk, UInt16.sub]]
[Nat.succ_lt_succ,[Nat.succ_le_succ]]
[Function.comp,[]]
[Substring.toNat?,[ite, Eq, Substring.isNat, Bool.true, Option.some, Substring.foldl, HAdd.hAdd, HMul.hMul, OfNat.ofNat, HSub.hSub, Char.toNat, Char.ofNat, Option.none]]
[Fin.instMulFin,[Mul.mk, Fin.mul]]
[FloatArray.toList,[OfNat.ofNat, List.nil, FloatArray.toList.loop]]
[DoResultPR.return.sizeOf_spec,[Eq.refl, HAdd.hAdd, OfNat.ofNat, SizeOf.sizeOf]]
[Quot.indep,[PSigma.mk, Quot.mk]]
[instTransEq_1.proof_1,[]]
[Array.modifyOp,[Array.modify]]
[Lean.Parser.Tactic.anyGoals,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.nonReservedSymbol, Bool.false, Lean.ParserDescr.const]]
[termPrintln!__,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.symbol, Lean.ParserDescr.unary, Lean.ParserDescr.cat]]
[List.cons.injEq,[Eq.propIntro, And.intro, Eq.refl, List.cons, Eq.symm, eq_of_heq, HEq.refl]]
[ST.Ref.set,[liftM, ST.Prim.Ref.set]]
[String.Iterator.toEnd,[String.Iterator, String.Iterator.mk, String.bsize]]
[«term_<&&>_»,[Lean.ParserDescr.trailingNode, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.symbol, Lean.ParserDescr.cat]]
[instReprAtomUInt16,[ReprAtom.mk]]
[Lean.Parser.Tactic.Conv.convTrace_state,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.nonReservedSymbol, Bool.false]]
[proofIrrel,[rfl]]
[instDecidableEq,[Decidable, Eq, Decidable.isTrue, propext, Decidable.isFalse, instDecidableEq.proof_1]]
[instLEFloat,[LE.mk, Float.le]]
[List.mapTRAux_eq,[of_eq_true, Eq.trans, congrArg, Eq, List.reverse, List.append_nil, eq_self, Eq.mpr, Eq.refl, List.mapTRAux, List.cons, HAppend.hAppend, List.map, List.reverse_cons, List.nil, List.append_assoc, rfl]]
[System.Platform.isOSX,[System.Platform.getIsOSX, Unit.unit]]
[Lean.Syntax.decodeStrLit,[Lean.Syntax.decodeStrLitAux, OfNat.ofNat]]
[List.elem,[Unit.unit, Bool, Bool.false, BEq.beq, Bool.true, PProd.fst]]
[BaseIO.mapTasks,[List.nil, BaseIO.mapTasks.go]]
[Int.negOfNat,[Unit.unit, Int, OfNat.ofNat, Int.negSucc]]
[Lean.Parser.Tactic.«tactic·._»,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.symbol, Lean.ParserDescr.const]]
[Substring.startPos,[]]
[IO.Error.mkResourceVanished,[IO.Error.resourceVanished]]
[ReaderT.instLawfulMonadReaderT.proof_1,[LawfulMonad.mk, ReaderT.ext, Eq.mpr, congr, congrArg, Eq, Eq.trans, ReaderT.run_bind, Pure.pure, Bind.bind, ReaderT.run, funext, ReaderT.run_pure, ReaderT.run_map, LawfulMonad.bind_pure_comp, rfl, of_eq_true, congrFun, LawfulMonad.pure_bind, eq_self, LawfulMonad.bind_assoc]]
[Lean.Quote.noConfusionType,[]]
[ExceptT.instLawfulMonadExceptT.proof_1,[LawfulMonad.mk, ExceptT.bind_pure_comp, rfl, ExceptT.ext, of_eq_true, Eq.trans, congrFun, congrArg, Eq, ExceptT.run_bind, Pure.pure, Bind.bind, ExceptT.run_pure, Except, ExceptT.run, Except.error, LawfulMonad.pure_bind, Except.ok, eq_self, Eq.mpr, congr, LawfulMonad.bind_assoc, funext, bind_congr, Eq.symm, Eq.refl]]
[controlAt,[Bind.bind, MonadControlT.liftWith, MonadControlT.restoreM]]
[Lean.Syntax.isNameLit?,[Option.none, Option, Lean.Name, Lean.Syntax.isLit?, Lean.nameLitKind, Lean.Syntax.decodeNameLit]]
[OptionT.run,[]]
[Nat.toUInt8,[UInt8.ofNat]]
[Classical.byCases,[Decidable.byCases]]
[ExceptT.instMonadExceptT,[Monad.mk]]
[List.takeWhile,[Unit.unit, List, List.nil, List.cons, PProd.fst]]
[ExceptT.seqRight_eq,[]]
[Applicative.toSeq,[]]
[Iff.refl,[Iff.intro]]
[List.hasDecEq.proof_6,[absurd]]
[Std.Range.start,[]]
[instModUSize,[Mod.mk, USize.mod]]
[true_implies,[propext, Iff.intro, trivial]]
[instMonadStateOf,[MonadStateOf.mk, liftM, MonadStateOf.get, MonadStateOf.set, MonadLiftT.monadLift, MonadState.modifyGet]]
[Alternative.noConfusionType,[]]
[Sum.inr.inj,[]]
[String.intercalate.go,[Unit.unit, String, PProd.fst, HAppend.hAppend]]
[IO.FS.instBEqSystemTime,[BEq.mk, Bool, and, Bool.true, BEq.beq, Bool.false]]
[IO.FS.Stream.mk.inj,[And.intro]]
[«term_∨_»,[Lean.ParserDescr.trailingNode, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.symbol, Lean.ParserDescr.cat]]
[Lean.Syntax.SepArray.ofElemsUsingRef,[Bind.bind, Lean.MonadRef.getRef, Pure.pure, Lean.Syntax.SepArray.mk, Lean.mkSepArray, Lean.mkAtomFrom]]
[StateCpsT.runK_set,[rfl]]
[Nat.succ.injEq,[Eq.propIntro, Eq.refl, Nat.succ, Eq.symm, eq_of_heq, HEq.refl]]
[UInt8.mod,[UInt8.mk, HMod.hMod, UInt8.val]]
[instDecidableLe_3,[UInt64.decLe]]
[Nat.succ_ne_zero,[]]
[Nat.forRevM,[Nat.forRevM.loop]]
[String.substrEq,[and, Decidable.decide, LE.le, HAdd.hAdd, String.bsize, String.substrEq.loop]]
[pure_id_seq,[of_eq_true, Eq.trans, congrFun, congrArg, Eq, LawfulApplicative.pure_seq, id, LawfulFunctor.id_map, eq_self]]
[ne_true_of_not,[]]
[IO.Error.invalidArgument.sizeOf_spec,[Eq.refl, HAdd.hAdd, OfNat.ofNat, SizeOf.sizeOf]]
[Array.uget,[Array.get, Fin.mk, USize.toNat]]
[instToFormatOption,[Std.ToFormat.mk, Option.format]]
[instDecidableIte,[Decidable, ite]]
[ex_of_PSigma,[Exists, Exists.intro]]
[unexpandEqRec,[ite, Eq, Lean.Syntax.isOfKind, Lean.Name.mkStr, Lean.Name.anonymous, Bool.true, Lean.Syntax.matchesNull, OfNat.ofNat, Bind.bind, Lean.MonadRef.mkInfoFromRefPos, Lean.MonadQuotation.getCurrMacroScope, Lean.MonadQuotation.getMainModule, Pure.pure, Lean.Syntax.node, Lean.SourceInfo.none, List.toArray, List.cons, Lean.Syntax.atom, List.nil, MonadExcept.throw, Unit.unit]]
[Nat.lt_of_le_of_lt,[Nat.le_trans, Nat.succ_le_succ]]
[Quotient.recOnSubsingleton,[Quot.recOnSubsingleton]]
[List.enumFrom,[List, Prod, Nat, List.nil, List.cons, Prod.mk, PProd.fst, HAdd.hAdd, OfNat.ofNat]]
[Lean.Syntax.isCharLit?,[Option.none, Option, Char, Lean.Syntax.isLit?, Lean.charLitKind, Lean.Syntax.decodeCharLit]]
[IO.Process.Output.mk.injEq,[Eq.propIntro, And.intro, Eq.refl, IO.Process.Output.mk, Eq.symm, eq_of_heq, HEq.refl]]
[«term↑_»,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.symbol, Lean.ParserDescr.cat]]
[«term_|||_»,[Lean.ParserDescr.trailingNode, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.symbol, Lean.ParserDescr.cat]]
[Lean.Meta.Simp.Config.decide,[]]
[Subarray.mk.inj,[And.intro]]
[Nat.instTransLtArrowNatArrowNatPropLeArrowNatArrowNatPropLtArrowNatArrowNatProp,[Trans.mk, Nat.instTransLtArrowNatArrowNatPropLeArrowNatArrowNatPropLtArrowNatArrowNatProp.proof_1]]
[«term_^_»,[Lean.ParserDescr.trailingNode, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.symbol, Lean.ParserDescr.cat]]
[SizeOf.sizeOf,[]]
[Nat.lt_succ_of_le,[Nat.succ_le_succ]]
[Quotient.lift₂.proof_2,[Quotient.ind, Setoid.refl]]
[Quot.rec,[Quot.liftIndepPr1, PSigma.snd, Quot.lift, Quot.indep, Quot.indepCoherent]]
[Lean.Macro.Exception.noConfusionType,[]]
[ReaderT.instMonadReaderT,[Monad.mk]]
[Nat.instTransLeArrowNatArrowNatPropLeArrowNatArrowNatPropLeArrowNatArrowNatProp,[Trans.mk, Nat.instTransLeArrowNatArrowNatPropLeArrowNatArrowNatPropLeArrowNatArrowNatProp.proof_1]]
[observing,[MonadExcept.tryCatch, Bind.bind, Pure.pure, Except.ok, Except.error]]
[Lean.Parser.Tactic.injection,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.nonReservedSymbol, Bool.false, Lean.ParserDescr.cat, Lean.ParserDescr.unary, Lean.ParserDescr.symbol, Lean.ParserDescr.const]]
[HEq.ndrec,[]]
[Nat.succ_le_succ,[Unit.unit, Eq.symm, eq_of_heq, Eq.refl, HEq.refl, LE.le, Nat.succ, Nat.le.refl, Nat.le.step, PProd.fst]]
[or_false,[propext, Iff.intro, False.elim, Or.inl]]
[List.replace,[List, List.nil, Unit.unit, BEq.beq, List.cons, PProd.fst]]
[Lean.Syntax.mkApp,[dite, Eq, Array.size, Unit.unit, Eq.symm, Array.toArrayLit_eq, Eq.refl, Lean.Syntax, Lean.mkNode, Lean.Name.mkStr, Lean.Name.anonymous, List.toArray, List.cons, Lean.mkNullNode, List.nil]]
[Nat.le.dest,[Exists, Eq, HAdd.hAdd, Exists.intro, OfNat.ofNat, rfl, Nat.succ, Eq.symm, Nat.add_comm, absurd, Nat.not_succ_le_zero]]
[IO.Error.unsupportedOperation.inj,[And.intro]]
[Lean.Syntax.node.injEq,[Eq.propIntro, And.intro, Eq.refl, Lean.Syntax.node, Eq.symm, eq_of_heq, HEq.refl]]
[CoeT.coe,[]]
[unexpandPSigma,[ite, Eq, Lean.Syntax.isOfKind, Lean.Name.mkStr, Lean.Name.anonymous, Bool.true, Lean.Syntax.matchesNull, OfNat.ofNat, cond, Bind.bind, Lean.MonadRef.mkInfoFromRefPos, Lean.MonadQuotation.getCurrMacroScope, Lean.MonadQuotation.getMainModule, Pure.pure, Lean.Syntax.node, Lean.SourceInfo.none, List.toArray, List.cons, Lean.Syntax.atom, List.nil, MonadExcept.throw, Unit.unit]]
[Prod.noConfusionType,[]]
[WellFounded.induction,[WellFounded.recursion]]
[Nat.instOrOpNat,[OrOp.mk, Nat.lor]]
[OptionT.fail,[OptionT.mk, Pure.pure, Option.none]]
[Pow.noConfusionType,[]]
[rawNatLit,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.symbol, Lean.ParserDescr.const]]
[PSigma.skipLeft.proof_1,[PSigma.revLex, WellFoundedRelation.wf, emptyWf]]
[instNonempty,[instNonempty.proof_1]]
[List.eraseDupsAux,[List, List.reverse, Unit.unit, List.elem, PProd.fst, List.cons]]
[IO.FS.instReprMetadata,[Repr.mk, Std.Format.bracket, HAppend.hAppend, Std.Format.nil, Std.Format.text, repr, IO.FS.Metadata.accessed, Std.Format.line, IO.FS.Metadata.modified, IO.FS.Metadata.byteSize, IO.FS.Metadata.type]]
[CoeDep.noConfusionType,[]]
[Task.bind,[Task.pure, Task.get]]
[Applicative.toSeqRight,[]]
[System.SearchPath.toString,[String.intercalate, Char.toString, System.SearchPath.separator, List.map, System.FilePath.toString]]
[UInt16.modn,[UInt16.mk, HMod.hMod, UInt16.val]]
[Lean.instInhabitedMacroScopesView,[Inhabited.mk, Lean.MacroScopesView.mk, arbitrary]]
[IO.Error.otherError.injEq,[Eq.propIntro, And.intro, Eq.refl, IO.Error.otherError, Eq.symm, eq_of_heq, HEq.refl]]
[instLEUInt32,[LE.mk, LE.le, UInt32.val]]
[Int.decEq.proof_4,[absurd]]
[IO.Error.mkAlreadyExistsFile,[Function.comp, IO.Error.alreadyExists, Option.some]]
[UInt32.ofNat',[UInt32.mk, Fin.mk]]
[Nat.zero_eq,[rfl]]
[IO.RealWorld,[Unit]]
[Char.ofNat.proof_1,[of_decide_eq_true, Eq.refl, Bool.true]]
[Squash.ind,[Quot.ind]]
[IO.FS.SystemTime.noConfusionType,[]]
[Char.isAlphanum,[or, Char.isAlpha, Char.isDigit]]
[Lean.Meta.TransparencyMode.all.sizeOf_spec,[Eq.refl, OfNat.ofNat]]
[coeOfTC,[CoeHTCT.mk, coeTC]]
[Lean.Parser.Tactic.revert,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.nonReservedSymbol, Bool.false, Lean.ParserDescr.unary, Lean.ParserDescr.const]]
[instDecidableLe_2,[UInt16.decLe]]
[System.FilePath.isDir,[Bind.bind, MonadExcept.tryCatch, System.FilePath.metadata, Pure.pure, BEq.beq, IO.FS.Metadata.type, IO.FS.FileType.dir, Bool.false]]
[Lean.nullKind,[Lean.Name.mkStr, Lean.Name.anonymous]]
[Substring.hasBeq,[BEq.mk, Substring.beq]]
[instDecidableTrue,[Decidable.isTrue, trivial]]
[Decidable.decide,[Bool.false, Bool.true]]
[ST.Prim.Ref.modifyUnsafe,[Bind.bind, ST.Prim.Ref.take, ST.Prim.Ref.set]]
[OfScientific.noConfusionType,[]]
[List.forIn_nil,[rfl]]
[trivial,[True.intro]]
[prioHigh,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.nonReservedSymbol, Bool.false]]
[Int.instAddInt,[Add.mk, Int.add]]
[IO.FS.Metadata.modified,[]]
[List.filterMapM.loop,[List, Pure.pure, Bind.bind, Unit.unit, PProd.fst, List.cons]]
[List.eraseIdx,[List, List.nil, List.cons, PProd.fst]]
[Add.add,[]]
[UInt64.decLt,[Decidable, LT.lt, inferInstanceAs]]
[Int.decEq,[Decidable, Eq, Int.ofNat, decEq, Decidable.isTrue, Int.decEq.proof_1, Decidable.isFalse, Int.decEq.proof_2, Int.negSucc, Int.decEq.proof_3, Int.decEq.proof_4, Int.decEq.proof_5, Int.decEq.proof_6]]
[Prod.map,[Prod, Prod.mk]]
[UInt8.lor,[UInt8.mk, Fin.lor, UInt8.val]]
[Unit.unit,[PUnit.unit]]
[Lean.Syntax.SepArray.noConfusionType,[]]
[instOrdUSize,[Ord.mk, compareOfLessAndEq]]
[EStateM.Backtrackable.save,[]]
[Int.noConfusionType,[]]
[instInhabited,[Inhabited.mk, Pure.pure, arbitrary]]
[leOfOrd,[LE.mk, Eq, Ordering.isLE, Ord.compare, Bool.true]]
[Std.Range.forIn.loop,[ite, GE.ge, Std.Range.stop, Pure.pure, Unit.unit, Bind.bind, PProd.fst, HAdd.hAdd, Std.Range.step]]
[Option.some.sizeOf_spec,[Eq.refl, HAdd.hAdd, OfNat.ofNat, SizeOf.sizeOf]]
[SeqLeft.noConfusionType,[]]
[Std.termF!_,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.symbol, Lean.ParserDescr.unary, Lean.ParserDescr.cat]]
[Std.ToFormat.noConfusionType,[]]
[instReprProd,[Repr.mk, Std.Format, Std.Format.bracket, Std.Format.joinSep, List.reverse, ReprTuple.reprTuple, List.cons, repr, List.nil, HAppend.hAppend, Std.Format.text, Std.Format.line]]
[List.get.proof_1,[Nat.le_of_succ_le_succ, List.length_cons]]
[Nat.ne_of_beq_eq_false,[False]]
[MonadStateOf.set,[]]
[Sum.inl.sizeOf_spec,[Eq.refl, HAdd.hAdd, OfNat.ofNat, SizeOf.sizeOf]]
[Decidable.not_and_iff_or_not,[Iff.intro, Decidable.isFalse, Decidable.isTrue, Or, Not, absurd, And.intro, Or.inr, Or.inl, False]]
[Append.append,[]]
[Subarray.allM,[Array.allM, Subarray.as, Subarray.start, Subarray.stop]]
[instInhabitedTask,[Inhabited.mk, Task.pure, arbitrary]]
[ByteArray.extract,[ByteArray.copySlice, ByteArray.empty, OfNat.ofNat, HSub.hSub, Bool.true]]
[Option.lt,[Option.none, Option.some, True, False]]
[ExceptCpsT.instLawfulMonadExceptCpsT,[ExceptCpsT.instLawfulMonadExceptCpsT.proof_1]]
[instSubsingletonDecidable.proof_1,[Subsingleton.intro, Eq, Decidable.isTrue, rfl, absurd, Decidable.isFalse]]
[optional,[HOrElse.hOrElse, Functor.map, Option.some, Pure.pure, Option.none]]
[instDecidableLt_1,[UInt8.decLt]]
[UInt16.val,[]]
[RandomGen.range,[]]
[Substring.foldl,[String.foldlAux]]
[IO.FS.Stream.write,[]]
[List.eraseReps,[Unit.unit, List, List.nil, List.eraseRepsAux]]
[IO.Error.resourceVanished.inj,[And.intro]]
[Lean.Parser.Tactic.casesTarget,[Lean.ParserDescr.nodeWithAntiquot, Lean.Name.mkStr, Lean.Name.anonymous, Lean.ParserDescr.binary, Lean.ParserDescr.unary, Lean.ParserDescr.const, Lean.ParserDescr.symbol, Lean.ParserDescr.cat, OfNat.ofNat]]
[Lean.Name.instToStringName,[ToString.mk, Lean.Name.toString, Bool.true]]
[UInt64.xor,[UInt64.mk, Fin.xor, UInt64.val]]
[List.anyM,[Unit.unit, Bool, Pure.pure, Bool.false, Bind.bind, Bool.true, PProd.fst]]
[Lean.MacroScopesView.scopes,[]]
[USize.decLt,[Decidable, LT.lt, inferInstanceAs]]
[instLEUSize,[LE.mk, USize.le]]
[Lean.version.isRelease,[Lean.version.getIsRelease, Unit.unit]]
[IO.Process.Child.mk.sizeOf_spec,[Eq.refl, HAdd.hAdd, OfNat.ofNat, SizeOf.sizeOf]]
[Or.intro_right,[Or.inr]]
[FloatArray.noConfusionType,[]]
[runST,[Unit, Unit.unit]]
[List.filterMapM,[List.reverse, List.nil, List.filterMapM.loop]]
[IO.Error.noSuchThing.sizeOf_spec,[Eq.refl, HAdd.hAdd, OfNat.ofNat, SizeOf.sizeOf]]
[instDecidableEqUInt32,[UInt32.decEq]]
[Substring.posOf,[String.Pos, HSub.hSub, String.posOfAux]]
[instSizeOfName,[SizeOf.mk, Lean.Name.sizeOf]]
[Array.toListLitAux.proof_1,[Nat.le_of_succ_le]]
[instDecidableAnd.proof_1,[And.right]]
[Lean.Parser.Tactic.induction,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.nonReservedSymbol, Bool.false, Lean.ParserDescr.sepBy1, Lean.ParserDescr.cat, Lean.ParserDescr.symbol, Lean.ParserDescr.unary, Lean.ParserDescr.const, Lean.Parser.Tactic.inductionAlts]]
[Lean.Parser.Tactic.simp,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.nonReservedSymbol, Bool.false, Lean.ParserDescr.unary, Lean.Parser.Tactic.config, Lean.Parser.Tactic.discharger, Lean.ParserDescr.symbol, Lean.ParserDescr.sepBy, Lean.Parser.Tactic.simpStar, Lean.Parser.Tactic.simpErase, Lean.Parser.Tactic.simpLemma, Lean.Parser.Tactic.location]]
[ByteArray.empty,[ByteArray.mkEmpty, OfNat.ofNat]]
[List.cons.sizeOf_spec,[Eq.refl, HAdd.hAdd, OfNat.ofNat, SizeOf.sizeOf]]
[Lean.Syntax.missing.sizeOf_spec,[Eq.refl, OfNat.ofNat]]
[System.SearchPath.separator,[ite, Eq, System.Platform.isWindows, Bool.true, Char.ofNat]]
[IO.Error.permissionDenied.sizeOf_spec,[Eq.refl, HAdd.hAdd, OfNat.ofNat, SizeOf.sizeOf]]
[ExceptCpsT.runCatch_pure,[rfl]]
[IO.Error.permissionDenied.injEq,[Eq.propIntro, And.intro, Eq.refl, IO.Error.permissionDenied, Eq.symm, eq_of_heq, HEq.refl]]
[instMulUSize,[Mul.mk, USize.mul]]
[String.nextUntil,[String.nextWhile, not]]
[Array.get?,[dite, LT.lt, Array.size, Option.some, Array.get, Fin.mk, Option.none]]
[Thunk.get,[Unit.unit]]
[eq_false,[propext, Iff.intro, absurd, False.elim]]
[HEq.subst,[HEq.ndrecOn]]
[Lean.Syntax.getOptionalIdent?,[Unit.unit, Option, Lean.Name, Lean.Syntax.getOptional?, Option.some, Lean.Syntax.getId, Option.none]]
[instReprList_1,[Repr.mk, Std.Format, List.cons, Std.Format.text, Std.Format.bracketFill, Std.Format.joinSep, HAppend.hAppend, Std.Format.line]]
[rfl,[rfl.proof_1]]
[Fin.shiftRight,[Fin, Fin.mk, HMod.hMod, HShiftRight.hShiftRight, Fin.shiftRight.proof_1]]
[Lean.Syntax.atom.inj,[And.intro]]
[instMulUInt16,[Mul.mk, UInt16.mul]]
[IO.Error.mkTimeExpired,[IO.Error.timeExpired]]
[System.instReprFilePath,[Repr.mk, Repr.addAppParen, HAppend.hAppend, Std.Format.text, repr, System.FilePath.toString]]
[instLTUInt8,[LT.mk, UInt8.lt]]
[boolToProp,[Coe.mk, Eq, Bool.true]]
[Lean.Macro.Context.noConfusionType,[]]
[List.unzip,[Unit.unit, Prod, List, Prod.mk, List.nil, PProd.fst, List.cons]]
[instInhabitedPNonScalar,[Inhabited.mk, PNonScalar.mk, arbitrary]]
[List.reverseAux_eq_append,[of_eq_true, Eq.trans, congrArg, Eq, List.nil_append, eq_self, Eq.mpr, Eq.refl, List.reverseAux, List.cons, HAppend.hAppend, List.nil, List.append_assoc, rfl]]
[Substring.any,[Bool, String.anyAux]]
[Array.size_swap,[]]
[DoResultBC.continue.sizeOf_spec,[Eq.refl, HAdd.hAdd, OfNat.ofNat, SizeOf.sizeOf]]
[Quotient.lift,[Quot.lift]]
[Option.orElse,[Option, Option.some, Unit.unit]]
[Char.isWhitespace,[or, Decidable.decide, Eq, Char.ofNat]]
[Sigma.fst,[]]
[Std.Format.prefixJoin,[Unit.unit, Std.Format, Std.Format.nil, HAppend.hAppend, Std.ToFormat.format, PProd.fst]]
[Lean.Parser.Tactic.change,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.nonReservedSymbol, Bool.false, Lean.ParserDescr.cat, Lean.ParserDescr.unary, Lean.Parser.Tactic.location]]
[instSubsingletonSquash.proof_1,[Subsingleton.intro, Squash.ind, Quot.sound, True.intro]]
[IO.println,[IO.print, String.push, ToString.toString, Char.ofNat]]
[Std.instToFormatString,[Std.ToFormat.mk, Std.Format.text]]
[Lean.Parser.Tactic.rwSeq,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.nonReservedSymbol, Bool.false, Lean.ParserDescr.unary, Lean.Parser.Tactic.config, Lean.Parser.Tactic.rwRuleSeq, Lean.Parser.Tactic.location]]
[false_iff,[propext, Iff.intro, Iff.mpr, False.elim]]
[Std.Format.bracket,[Std.Format.group, Std.Format.nest, Int.ofNat, String.length, HAppend.hAppend, Std.Format.text, Std.Format.FlattenBehavior.allOrNone]]
[instReprUnit,[Repr.mk, Std.Format.text]]
[IO.Error.fopenErrorToString,[Unit.unit, String, HAppend.hAppend, String.modify, OfNat.ofNat, Char.toLower, ToString.toString]]
[IO.FS.FileType.other.sizeOf_spec,[Eq.refl, OfNat.ofNat]]
[List.head?,[Unit.unit, Option, Option.none, Option.some]]
[StateT.ext,[funext]]
[Lean.Syntax.below,[PUnit, PProd]]
[Lean.Parser.Tactic.tacticHave_,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.nonReservedSymbol, Bool.false, Lean.ParserDescr.const]]
[UInt8.toUInt16,[Nat.toUInt16, UInt8.toNat]]
[ULift.down_up,[rfl]]
[instDecidableEqProd,[Decidable, Eq, Prod.mk, decEq, Decidable.isTrue, instDecidableEqProd.proof_1, Decidable.isFalse, instDecidableEqProd.proof_2, instDecidableEqProd.proof_3]]
[Lean.runEval,[IO.FS.withIsolatedStreams, Lean.Eval.eval, Bool.false]]
[LawfulMonad.toLawfulApplicative,[]]
[List.append_nil,[rfl, of_eq_true, Eq.trans, congrFun, congrArg, Eq, List.cons, id, eq_self]]
[PSigma.noConfusionType,[]]
[Int.instModInt,[Mod.mk, Int.mod]]
[Option.filter,[Unit.unit, Option, ite, Eq, Bool.true, Option.some, Option.none]]
[EStateM.Result.ok.injEq,[Eq.propIntro, And.intro, Eq.refl, EStateM.Result.ok, Eq.symm, eq_of_heq, HEq.refl]]
[Nat.pow_succ,[rfl]]
[heq_of_eq,[Eq.subst, HEq.refl]]
[instReprExcept,[Repr.mk, Std.Format, Repr.addAppParen, HAppend.hAppend, Std.Format.text, reprArg]]
[instToStringSum,[ToString.mk, String, HAppend.hAppend, addParenHeuristic, ToString.toString]]
[StateT.seqRight_eq,[StateT.ext, Eq.mpr, congr, congrArg, Eq, StateT.run_seqRight, Eq.trans, StateT.run_seq, Functor.map, id, Bind.bind, StateT.run_map, map_eq_pure_bind, Prod.mk, Prod.snd, StateT.run, funext, Prod.fst, LawfulMonad.bind_assoc, Pure.pure, LawfulMonad.pure_bind, congrFun, id_eq, bind_congr, of_eq_true, Prod.ext, bind_pure, eq_self, Eq.symm, Eq.refl]]
[instToStringChar,[ToString.mk, Char.toString]]
[Std.Range.stop,[]]
[Nat.all,[not, Nat.any]]
[List.rangeAux,[List, Nat, PProd.fst, List.cons]]
[Nat.le_succ,[Nat.le.step, Nat.le.refl]]
[Subtype.existsOfSubtype,[Subtype.existsOfSubtype.proof_1]]
[instMonadLiftSTEST,[MonadLift.mk, EStateM.Result, EStateM.Result.ok]]
[IO.Error.mkProtocolError,[IO.Error.protocolError]]
[instDecidableEqBool,[Unit.unit, Decidable, Eq, Decidable.isTrue, rfl, Decidable.isFalse, instDecidableEqBool.proof_1, instDecidableEqBool.proof_2]]
[List.tailD,[List]]
[IO.Process.Stdio.toCtorIdx,[OfNat.ofNat]]
[PSum.inl.inj,[]]
[instReprAtomString,[ReprAtom.mk]]
[«term_×_»,[Lean.ParserDescr.trailingNode, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.symbol, Lean.ParserDescr.cat]]
[Bool.or_false,[rfl, Eq.symm, Eq.refl]]
[String.toNat?,[ite, Eq, String.isNat, Bool.true, Option.some, String.foldl, HAdd.hAdd, HMul.hMul, OfNat.ofNat, HSub.hSub, Char.toNat, Char.ofNat, Option.none]]
[instShiftLeftUInt32,[ShiftLeft.mk, UInt32.shiftLeft]]
[Lean.Parser.Tactic.split,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.nonReservedSymbol, Bool.false, Lean.ParserDescr.unary, Lean.ParserDescr.const, Lean.ParserDescr.cat, Lean.Parser.Tactic.location]]
[Std.Format.append.inj,[And.intro]]
[Std.Format.text.inj,[]]
[HEq.ndrecOn,[]]
[Array.isEqv,[dite, Eq, Array.size, Array.isEqvAux, OfNat.ofNat, Bool.false]]
[Nat.eq_of_beq_eq_true,[Eq, rfl]]
[Lean.Parser.Tactic.Conv.convRepeat_,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.nonReservedSymbol, Bool.false, Lean.Parser.Tactic.Conv.convSeq]]
[String.takeRight,[Substring.toString, Substring.takeRight, String.toSubstring]]
[instSubsingletonForall.proof_1,[Subsingleton.intro, funext, Subsingleton.elim]]
[cond,[Unit.unit]]
[hexDigitRepr,[String.singleton, Nat.digitChar]]
[Array.toList,[Array.foldr, List.cons, List.nil, Array.size, OfNat.ofNat]]
[Lean.PrettyPrinter.instMonadQuotationUnexpandM,[Lean.MonadQuotation.mk, Pure.pure, OfNat.ofNat, Lean.Name.mkStr, Lean.Name.anonymous, id]]
[IO.FS.SystemTime.mk.sizeOf_spec,[Eq.refl, HAdd.hAdd, OfNat.ofNat, SizeOf.sizeOf]]
[LE.noConfusionType,[]]
[System.FilePath.normalize,[ite, Eq, and, BEq.beq, List.length, System.FilePath.pathSeparators, OfNat.ofNat, not, Bool.true, System.FilePath.mk, String.map, List.contains, System.FilePath.pathSeparator, Char.toLower, System.FilePath.toString]]
[termS!_,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.symbol, Lean.ParserDescr.unary, Lean.ParserDescr.cat]]
[MonadWithReaderOf.withReader,[]]
[«term-_»,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.symbol, Lean.ParserDescr.cat]]
[iff_self,[propext, Iff.intro, trivial, id]]
[Lean.Parser.Tactic.case,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.nonReservedSymbol, Bool.false, Lean.ParserDescr.const, Lean.ParserDescr.symbol, Lean.ParserDescr.unary]]
[PProd.snd,[]]
[Function.const_apply,[rfl]]
[FloatArray.get,[Float, Array.get]]
[«term_<=_»,[Lean.ParserDescr.trailingNode, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.symbol, Lean.ParserDescr.cat]]
[Lean.Module.commands,[]]
[WellFoundedRelation.mk.sizeOf_spec,[Eq.refl, HAdd.hAdd, OfNat.ofNat, SizeOf.sizeOf]]
[FloatArray.forInUnsafe,[OfNat.ofNat, FloatArray.forInUnsafe.loop]]
[ST.Prim.Ref.modifyGetUnsafe,[Bind.bind, ST.Prim.Ref.take, ST, ST.Prim.Ref.set, Pure.pure]]
[Lean.interpolatedStrKind,[Lean.Name.mkStr, Lean.Name.anonymous]]
[StateT.run_seq,[]]
[Lean.Meta.TransparencyMode.noConfusionType,[noConfusionTypeEnum, Lean.Meta.TransparencyMode.toCtorIdx]]
[PSum.inr.sizeOf_spec,[Eq.refl, HAdd.hAdd, OfNat.ofNat, SizeOf.sizeOf]]
[Lean.Parser.Tactic.cases,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.nonReservedSymbol, Bool.false, Lean.ParserDescr.sepBy1, Lean.Parser.Tactic.casesTarget, Lean.ParserDescr.symbol, Lean.ParserDescr.unary, Lean.ParserDescr.const, Lean.Parser.Tactic.inductionAlts]]
[List.filter,[List.filterAux, List.nil]]
[IO.Error.protocolError.sizeOf_spec,[Eq.refl, HAdd.hAdd, OfNat.ofNat, SizeOf.sizeOf]]
[fix,[fixCore1, arbitrary]]
[UInt16.div,[UInt16.mk, HDiv.hDiv, UInt16.val]]
[instDecidableEqQuotient.proof_2,[absurd, Quotient.exact]]
[Lean.explicitBinders,[Lean.ParserDescr.nodeWithAntiquot, Lean.Name.mkStr, Lean.Name.anonymous, Lean.ParserDescr.binary, Lean.ParserDescr.unary, Lean.bracketedExplicitBinders, Lean.unbracketedExplicitBinders]]
[false_or,[propext, Iff.intro, False.elim, Or.inr]]
[Lean.Macro.throwErrorAt,[Lean.withRef, Lean.Macro.throwError]]
[ReaderT.instMonadFunctorReaderT,[MonadFunctor.mk]]
[Std.Format.joinSuffix,[Std.Format, Std.Format.nil, HAppend.hAppend, Std.ToFormat.format, PProd.fst]]
[Nat.min,[ite, LE.le]]
[Lean.Syntax.expandInterpolatedStr,[Bind.bind, Lean.Syntax.expandInterpolatedStrChunks, Lean.Syntax.getArgs, Lean.MonadRef.mkInfoFromRefPos, Lean.MonadQuotation.getCurrMacroScope, Lean.MonadQuotation.getMainModule, Pure.pure, Lean.Syntax.node, Lean.SourceInfo.none, Lean.Name.mkStr, Lean.Name.anonymous, List.toArray, List.cons, Lean.Syntax.atom, List.nil]]
[instAndOpUInt8,[AndOp.mk, UInt8.land]]
[OptionT.instMonadOptionT,[Monad.mk]]
[String.bsize,[String.utf8ByteSize]]
[Nat.one_mul,[Nat.mul_one, Nat.mul_comm, OfNat.ofNat]]
[Lean.Syntax.decodeNatLitVal?,[ite, Eq, BEq.beq, OfNat.ofNat, Bool.true, Option.none, Char.ofNat, Option.some, or, Char.isDigit]]
[Array.allDiff,[OfNat.ofNat]]
[UInt16.toUInt64,[Nat.toUInt64, UInt16.toNat]]
[Lean.instInhabitedSourceInfo,[Inhabited.mk, Lean.SourceInfo.none]]
[Lean.Syntax.getTrailingSize,[Option.none, Option.some, Lean.SourceInfo.synthetic, Lean.SourceInfo.none, Nat, Lean.Syntax.getTailInfo?, Substring.bsize, OfNat.ofNat]]
[MonadReader.noConfusionType,[]]
[Std.Format.nest.injEq,[Eq.propIntro, And.intro, Eq.refl, Std.Format.nest, Eq.symm, eq_of_heq, HEq.refl]]
[Nat.foldRevM.loop,[Pure.pure, Bind.bind, PProd.fst]]
[And.right,[]]
[String.nextWhile,[String.bsize]]
[String.pushn,[Nat.repeat, String.push]]
[Lean.Syntax.instToFormatSyntax,[Std.ToFormat.mk, Lean.Syntax.formatStx, Option.none, Bool.false]]
[reprStr,[Std.Format.pretty, Repr.reprPrec, OfNat.ofNat, Std.Format.defWidth]]
[instMonadFunctorT,[MonadFunctorT.mk, MonadFunctor.monadMap, MonadFunctorT.monadMap]]
[UInt8.mul,[UInt8.mk, HMul.hMul, UInt8.val]]
[instToStringUInt32,[ToString.mk, ToString.toString, UInt32.toNat]]
[Float.noConfusionType,[]]
[HXor.noConfusionType,[]]
[Lean.instInhabitedParserDescr,[Inhabited.mk, Lean.ParserDescr.symbol]]
[MonadExceptOf.throw,[]]
[IO.withStdout,[Bind.bind, liftM, IO.setStdout, tryFinally, Functor.discard]]
[List.concat,[List, List.cons, List.nil, PProd.fst]]
[cast,[]]
[Lean.Parser.Tactic.renameI,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.nonReservedSymbol, Bool.false, Lean.ParserDescr.unary, Lean.ParserDescr.const, Lean.ParserDescr.symbol]]
[DoResultSBC.continue.sizeOf_spec,[Eq.refl, HAdd.hAdd, OfNat.ofNat, SizeOf.sizeOf]]
[NonScalar.mk.sizeOf_spec,[Eq.refl, HAdd.hAdd, OfNat.ofNat, SizeOf.sizeOf]]
[instXorUInt64,[Xor.mk, UInt64.xor]]
[Nat.not_le_of_gt,[False, Nat.lt_or_ge, absurd, Nat.lt_trans, Nat.lt_irrefl]]
[eq_true_of_ne_false,[Eq, Bool.true, rfl, False.elim]]
[Nat.div.proof_1,[WellFoundedRelation.wf, measure, id]]
[Fin.add.proof_1,[LT.lt, HMod.hMod, Nat.mod_lt]]
[UInt8.xor,[UInt8.mk, Fin.xor, UInt8.val]]
[BEq.noConfusionType,[]]
[MonadFinally.noConfusionType,[]]
[Xor.noConfusionType,[]]
[instDivUInt16,[Div.mk, UInt16.div]]
[String.takeWhile,[Substring.toString, Substring.takeWhile, String.toSubstring]]
[ReaderT.instAlternativeReaderT,[Alternative.mk, ReaderT.failure, ReaderT.orElse]]
[Nat.forM.loop,[Unit.unit, Unit, Pure.pure, Bind.bind, HSub.hSub, OfNat.ofNat, PProd.fst]]
[Array.foldlM.loop,[dite, LT.lt, Unit.unit, Pure.pure, Bind.bind, Array.get, Fin.mk, Array.foldlM.loop.proof_1, PProd.fst, HAdd.hAdd, OfNat.ofNat]]
[List.below,[PUnit, PProd]]
[Option.instDecidableRelLt,[Unit.unit, Decidable, Option.lt, Decidable.isTrue, trivial, Decidable.isFalse, not_false]]
[IO.FileRight.noConfusionType,[]]
[HEq.rfl,[HEq.rfl.proof_1]]
[System.FilePath.instHDivFilePathStringFilePath,[HDiv.mk, System.FilePath.join, System.FilePath.mk]]
[UInt64.noConfusionType,[]]
[IO.Error.unsupportedOperation.injEq,[Eq.propIntro, And.intro, Eq.refl, IO.Error.unsupportedOperation, Eq.symm, eq_of_heq, HEq.refl]]
[Nat.superDigitChar,[ite, Eq, OfNat.ofNat, Char.ofNat]]
[Array.swapAt,[Prod.mk]]
[Nat.add_le_add_left,[LE.le, HAdd.hAdd, Nat.le.dest]]
[instHShiftRight,[HShiftRight.mk, ShiftRight.shiftRight]]
[panic,[panicCore]]
[Nat.add_comm,[Eq, HAdd.hAdd, Eq.symm, Nat.zero_add]]
[instOrdInt,[Ord.mk, compareOfLessAndEq]]
[Id.instMonadId,[Monad.mk]]
[String.quote,[ite, Eq, String.isEmpty, Bool.true, HAppend.hAppend, String.foldl, Char.quoteCore]]
[ExceptT.map,[ExceptT.mk, Bind.bind, Except, Pure.pure, Except.ok, Except.error]]
[Lean.Syntax.getId,[Lean.Syntax.missing, Lean.Syntax.node, Lean.Syntax.atom, Lean.Name, Lean.Name.anonymous]]
[StateRefT'.instMonadFunctorStateRefT',[inferInstanceAs, MonadFunctor, ReaderT, ST.Ref]]
[MonadState.get,[]]
[Setoid.trans,[Equivalence.trans, Setoid.iseqv]]
[instReprChar,[Repr.mk, Std.Format.text, Char.quote]]
[Unit,[PUnit]]
[List.hasDecidableLt.proof_4,[Eq.symm, eq_of_heq, Eq.refl, List.cons, HEq.refl, False, absurd]]
[LawfulApplicative.seq_pure,[]]
[UInt64.modn,[UInt64.mk, HMod.hMod, UInt64.val]]
[«term{__:_//_}»,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.symbol, Lean.ParserDescr.const, Lean.ParserDescr.unary, Lean.ParserDescr.cat]]
[StateRefT'.modifyGet,[ST.Ref.modifyGet]]
[Nat.below,[PUnit, PProd]]
[throwThe,[MonadExceptOf.throw]]
[unexpandEqNDRec,[ite, Eq, Lean.Syntax.isOfKind, Lean.Name.mkStr, Lean.Name.anonymous, Bool.true, Lean.Syntax.matchesNull, OfNat.ofNat, Bind.bind, Lean.MonadRef.mkInfoFromRefPos, Lean.MonadQuotation.getCurrMacroScope, Lean.MonadQuotation.getMainModule, Pure.pure, Lean.Syntax.node, Lean.SourceInfo.none, List.toArray, List.cons, Lean.Syntax.atom, List.nil, MonadExcept.throw, Unit.unit]]
[instDecidableArrow.proof_2,[absurd]]
[instSizeOf,[SizeOf.mk, default.sizeOf]]
[instTransEq.proof_1,[Eq.symm]]
[UInt16.decEq.proof_1,[rfl]]
[Lean.Parser.Tactic.Conv.delta,[Lean.ParserDescr.node, Lean.Name.mkStr, Lean.Name.anonymous, OfNat.ofNat, Lean.ParserDescr.binary, Lean.ParserDescr.nonReservedSymbol, Bool.false, Lean.ParserDescr.const]]
[UInt64.mod,[UInt64.mk, HMod.hMod, UInt64.val]]
[ByteArray.instEmptyCollectionByteArray,[EmptyCollection.mk, ByteArray.empty]]
[fixCore3,[bfix3, USize.size]]
[ite_true,[rfl]]
[HXor.hXor,[]]
[IO.FS.Mode.noConfusion,[noConfusionEnum, IO.FS.Mode.toCtorIdx]]
[Lean.ParserDescr.ibelow,[True, And]]
[instMonadControlT,[MonadControlT.mk, MonadControlT.stM, MonadControl.stM, MonadControl.liftWith, MonadControlT.liftWith, Function.comp, MonadControl.restoreM, MonadControlT.restoreM]]
[Lean.MacroScope,[Nat]]
[Classical.axiomOfChoice,[Exists.intro, Classical.choose, Classical.choose_spec]]
[Classical.typeDecidableEq,[inferInstance]]
[decide_true_eq_true,[Eq, Decidable.decide, True, Bool.true, rfl, False.elim, True.intro]]
[tryCatchThe,[MonadExceptOf.tryCatch]]
[Lean.expandExplicitBindersAux.loop,[Unit.unit, Lean.MacroM, Lean.Syntax, Pure.pure, Lean.Syntax.isIdent, Bind.bind, Lean.MonadRef.mkInfoFromRefPos, Lean.MonadQuotation.getCurrMacroScope, Lean.MonadQuotation.getMainModule, Lean.Syntax.node, Lean.SourceInfo.none, Lean.Name.mkStr, Lean.Name.anonymous, List.toArray, List.cons, Lean.Syntax.atom, List.nil]]
[congrArg,[rfl]]
[Squash.mk,[Quot.mk, True]]
[instHXor,[HXor.mk, Xor.xor]]
